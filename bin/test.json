{
    " commands: prevent running empty seat commandFixes crash when running `seat <seat>` without a sub-command.": {
        "sway/commands/seat.c": 1
    },
    " swaybar: render with minimum height, nominally text heightFixes https://github.com/swaywm/sway/issues/2892": {
        "swaybar/bar.c": 1,
        "swaybar/render.c": 1
    },
    "A script to make inactive windows transparentI was thinking whether it's worth putting into sway docs or here, and [I was advised](https://github.com/swaywm/sway/issues/2787#issuecomment-431524704) to create a contrib dir instead, which I'm doing here.": {
        "/dev/null": 1
    },
    "Abort if proprietary drivers are in useThe idea here is we don't want users to be blissfully unaware that they are running unsupported drivers. So we abort on startup, and force the user to add a specific argument to bypass the check.\r\n\r\nCloses #2894.": {
        "sway/main.c": 1
    },
    "Add CSD to border modesThis replaces `view.using_csd` with a new border mode: `B_CSD`. This also removes `sway_xdg_shell{_v6}_view.deco_mode` and `view->has_client_side_decorations` as we can now get these from the border.\r\n\r\nYou can use `border toggle` to cycle through the modes including CSD, or use `border csd` to set it directly. The client must support the xdg-decoration protocol, and the only client I know of that does is the example in wlroots.\r\n\r\nIf the client switches from SSD to CSD without us expecting it (via the server-decoration protocol), we stash the previous border type into `view.saved_border` so we can restore it if the client returns to SSD. I haven't found a way to test this though.\r\n\r\nCloses #2429.": {
        "/dev/null": 1,
        "include/sway/server.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands/border.c": 1,
        "sway/decoration.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/ipc-json.c": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Add Dockerfile for Fedora 29.This PR adds a Dockerfile to build Sway and wlroots on Fedora 29. This isn't useful for development, but can help people get setup with a development environment.": {
        "/dev/null": 1
    },
    "Add a missing null check for moving tiling containersTrying to move the About window in Android Studio causes a crash without this check.": {
        "sway/input/cursor.c": 1
    },
    "Add app_id and class to get_tree outputThis makes it much easier (possible at all?) to get ahold of the values you need to create criteria for both Wayland and X clients. Wayland clients will have a null `class`, X clients will have a null `app_id`. Tested both to make sure nothing exploded when serializing the opposite.": {
        "sway/ipc-json.c": 1
    },
    "Add bulgarian readmeI have spell checked it and added myself as a volunteer": {
        "/dev/null": 1,
        "README.md": 1
    },
    "Add fish completionThis is my first ever pull request and I am very excited. \r\nEverything compiled successfuly.": {
        "/dev/null": 1,
        "meson.build": 1,
        "meson_options.txt": 1
    },
    "Add focus_follows_mouse always.I suggested a feature in #3025 where the focus will always follow the mouse. This can be used by specifying `focus_follows_mouse always` in the config file.": {
        "include/sway/config.h": 1,
        "sway/commands/focus_follows_mouse.c": 1,
        "sway/config.c": 1,
        "sway/input/cursor.c": 1
    },
    "Add input command xkb_current_layout": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "sway/commands/input.c": 1,
        "sway/meson.build": 1,
        "sway/sway-input.5.scd": 1
    },
    "Add libinput send_events config for touch": {
        "sway/input/input-manager.c": 1
    },
    "Add meson option for LD_LIBRARY_PATHAlso makes the meson option names consistently use dashes.\r\n\r\nFixes #2262.": {
        "meson.build": 1,
        "meson_options.txt": 1
    },
    "Add missing checks to fix 2339Fixes #2339 \r\n\r\nIn `seat_set_focus_warp`, there was a missing null check and container type check that was causing the segfault.": {
        "sway/input/seat.c": 1
    },
    "Add missing stdlib.h includes to swaynagWithout this swaynag does not build on my system (implicit declaration of\r\nfunctions like \"free\"). With these includes added it builds and works.": {
        "swaynag/main.c": 1,
        "swaynag/swaynag.c": 1
    },
    "Add mouse_warping containerThis option always moves the cursor into the middle of the container if the warp\r\nvariable is true in seat_set_focus_warp.\r\n\r\nFixes #2577": {
        "include/sway/config.h": 1,
        "sway/commands/mouse_warping.c": 1,
        "sway/config.c": 1,
        "sway/input/seat.c": 1,
        "sway/sway.5.scd": 1
    },
    "Add multiseat support to swaylockFixes #2959.": {
        "include/swaylock/seat.h": 1,
        "include/swaylock/swaylock.h": 1,
        "swaylock/main.c": 1,
        "swaylock/seat.c": 1
    },
    "Add references to sway-output(5) in sway(5)I noticed some missing references to sway-output(5) in the sway(5) man page while looking for the documentation of the _output_ command.\r\n\r\nSomewhat a follow-up of #2831\r\n\r\nI tried to keep it consistent with the documentation of _input_ and how sway-input(5) is handled.\r\n\r\n- Update the incorrect reference to _output_ in the _swaybg_command_ description.\r\n- Add a reference to sway-output(5) in See Also\r\n- Add an _output_ command description referring to sway-output(5)": {
        "sway/sway.5.scd": 1
    },
    "Add relative output transformThis commit enhances the output transform\r\ncommand with options for a relative transform,\r\ni.e. the provided transform will be applied as\r\nan offset to the current transform. Append\r\n`clockwise` to rotate clockwise from the current\r\nrotation, or `anticlockwise` to rotate in the\r\nopposite direction.\r\n\r\nFor example, if the output LVDS-1 is rotated 90 degrees\r\nclockwise, the command `output LVDS-1 transform 90 clockwise`\r\nwill rotate the display to 180 degrees. All transform\r\noptions are supported, including flipped transforms.": {
        "sway/commands/output/transform.c": 1,
        "sway/sway-output.5.scd": 1
    },
    "Add sanity check for empty focus stackProgress towards resolving #2754.": {
        "sway/input/seat.c": 1
    },
    "Add scroll factor input command.This commit adds a `scroll_factor` input command whose value is used as a multiplier for axis event deltas received from a device. Put simply, this means that scrolling speed can now be adjusted, a configuration feature that libinput itself lacks. At least on my laptop's touchpad, such a change is sorely needed.\r\n\r\nFor example, adding `scroll_factor 0.5` under a device's `input` section will make scrolling half as fast.\r\n\r\nFixes #3004.": {
        "/dev/null": 1,
        "common/util.c": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "include/util.h": 1,
        "sway/commands/input.c": 1,
        "sway/commands/input/pointer_accel.c": 1,
        "sway/config/input.c": 1,
        "sway/input/cursor.c": 1,
        "sway/meson.build": 1,
        "sway/sway-input.5.scd": 1
    },
    "Add support for building swaylock without PAMThis involves setuid'ing swaylock, which then forks and drops perms on\r\nthe parent process. The child process remains root and listens on a pipe\r\nfor requests to validate passwords against /etc/shadow.": {
        "/dev/null": 1,
        "include/swaylock/swaylock.h": 1,
        "meson.build": 1,
        "swaylock/main.c": 1,
        "swaylock/meson.build": 1,
        "swaylock/password.c": 1
    },
    "Add support for installing binaries with DT_RPATHIt's better to use DT_RPATH dynamic section of the elf binary to store\r\nthe paths of libraries to load instead of overwriting LD_LIBRARY_PATH\r\nfor the whole environment, causing surprises. This solution is much more\r\ntransparent and perfectly suitable for running contained installations\r\nof wayland/wlroots/sway.\r\n\r\nThe code unsetting the LD_LIBRARY_PATH/LD_PRELOAD was also deleted as\r\nit's a placebo security at best - we should trust the execution path\r\nthat leads us to running sway, and it's way too late to care about those\r\nvariables since we already started executing our compositor, thus we\r\nwould be compromised anyway.": {
        "meson.build": 1,
        "meson_options.txt": 1,
        "sway/main.c": 1,
        "sway/meson.build": 1,
        "swaybar/meson.build": 1,
        "swaybg/meson.build": 1,
        "swayidle/meson.build": 1,
        "swaylock/meson.build": 1,
        "swaymsg/meson.build": 1,
        "swaynag/meson.build": 1
    },
    "Add swaylock grace timerThis adds a small feature to allow for a moment of grace before swaylock actually activates. This allows the user to hit a key to cancel the lock, if they're quick. \r\n\r\nMost useful when swaylock is used from swayidle, as sometimes the lock screen can trigger when you don't want it to.\r\n\r\nAlso includes a tiny typo fix.": {
        "include/swaylock/swaylock.h": 1,
        "swaylock/main.c": 1,
        "swaylock/password.c": 1,
        "swaylock/swaylock.1.scd": 1
    },
    "Add tap and drag to sway-inputAdd functionality to disable tap-and-drag to sway-input with `drag disable`.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "sway/commands/input.c": 1,
        "sway/config/input.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/meson.build": 1,
        "sway/sway-input.5.scd": 1
    },
    "Add test to run swaySets the PATH variable correctly so that it finds the auxilliary\nexecutables.\nTo use: run \"meson test -v sway\" in the build directory.\n\nAdded an \"interactive-tests\" option for when actual tests are added.\n\n---\n\nSeems helpful for iterative testing. Input on naming/formatting welcome.": {
        "meson.build": 1,
        "meson_options.txt": 1,
        "sway/meson.build": 1
    },
    "Add using_csd variable to transaction stateThis fixes a race condition flicker when unfloating a view which uses client side decorations.\r\n\r\nWhen the view is floated it has `using_csd = true`, so the decorations are not drawn. When unfloating it it changes to false, but this change wasn't part of transactions so it could potentially render the decorations around the view while it's waiting for the transaction to apply.": {
        "include/sway/tree/container.h": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/transaction.c": 1
    },
    "Add virtual keyboard protocolRef #2373 \r\n\r\nTo test use [virtboard](https://source.puri.sm/Librem5/virtboard)\r\n\r\ncc @dcz-purism": {
        "include/sway/input/input-manager.h": 1,
        "sway/input/input-manager.c": 1
    },
    "Added meson option to allow building sway without xwayland supportThis PR is based on another PR by @armtux\r\nhttps://github.com/swaywm/sway/pull/2114/commits\r\n\r\nAdded meson option \"enable_xwayland\" (default: true) to enable/disable xwayland support in sway.\r\nI tested this with a build of wlroots using \"-Denable-xcb_errors=false -Denable-xwayland=false -Denable-x11_backend=false\".\r\n": {},
    "Adding commands for configuring titlebar borders and paddingAs talked in issue #3134 titlebar border size and padding are currently hardcoded\r\n\r\nThis patch proposes two new commands, which permits to adjust the width of titlebars\r\n - titlebar_border_thickness \\<n\\>\r\n - titlebar_padding \\<h\\> [v]\r\n\r\nExample use with swaymsg to just get a 1 px border and minimal space above and below text : \r\n$ swaymsg titlebar_border_thickness 1\r\n$ swaymsg titlebar_padding 5 1": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "include/sway/tree/container.h": 1,
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/desktop/render.c": 1,
        "sway/meson.build": 1,
        "sway/sway.5.scd": 1,
        "sway/tree/container.c": 1
    },
    "Adjust container boxPrior to f5b9815128b6c000bb5d47c339480fa481a5e99d, children of tabbed and stacked containers would have their container size and position set to the same as the tabbed/stacked container. Normally this would be a problem for a layout such as `T[V[view]]`, but there was some code in the\r\narrange functions which would check if the grandparent of the view was a tabbed or stacked container and would offset the view's Y accordingly.\r\n\r\nCommit f5b9815128b6c000bb5d47c339480fa481a5e99d changed the box to exclude the titlebar for all tabbed/stacked children so that the grandparent check could be removed. But this meant the title was not covered in the container and wasn't damaged when the child changed its title.\r\n\r\nThis patch changes it so that a child of a tabbed/stacked container will have its box include the title bar if the child is a view, but not if it's a layout container. This fixes the title damage issue while avoiding the grandparent check in the arrange functions, and matches what we see visually.\r\n\r\nFixes #2573.": {
        "sway/tree/arrange.c": 1,
        "sway/tree/view.c": 1
    },
    "Allow a fallback color to be specified for swaybgCloses #2434 \r\nFixes #2270\r\n\r\nThis allows for a color to be optionally set when the wallpaper does not fill the entire output. If specified, the fallback color is also used when the image path is inaccessible.\r\n\r\nI opted to use the following syntax\r\n```\r\noutput <name> bg <path> <mode> [<fallback_color>]\r\n```\r\ninstead of the following from #2434\r\n```\r\noutput <name> bg <color> solid_color\r\noutput <name> bg <path> <mode>\r\n```\r\n\r\nThis allows for both solid colors and images (with an optional fallback color) to be set without affecting the other when changed via commands further down the config or swaymsg.": {
        "include/sway/config.h": 1,
        "sway/commands/output/background.c": 1,
        "sway/config/output.c": 1,
        "sway/sway.5.scd": 1,
        "swaybg/main.c": 1
    },
    "Allow containers to be fullscreenNote that unmanaged xwayland surfaces are now rendered when anything is fullscreen, as opposed to only when an xwayland view is fullscreen. The alternative is searching the fullscreen container for an xwayland view, but I figured this isn't worth it.\r\n\r\nTest plan:\r\n\r\n* `focus parent` then `fullscreen` on different container layout types\r\n* Move views around within a fullscreen container\r\n* Attempt to move views out of a fullscreen container (they shouldn't move)\r\n* Attempt to fullscreen a child of a fullscreen container - the fullscreen container should unfullscreen and the child becomes fullscreen\r\n* In a fullscreen container, `focus parent`, `focus child`, `focus <direction>` into another output\r\n* `focus <direction>` from a sibling output into the fullscreen container\r\n* Move fullscreen containers to other outputs of different sizes\r\n* Fullscreen floating views to make sure I didn't break anything there": {
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands/fullscreen.c": 1,
        "sway/commands/move.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/scratchpad.c": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1
    },
    "Allow containers to floatThings worth noting:\r\n\r\n* When a fullscreen view unmaps, the check to unset fullscreen on the workspace has been moved out of `view_unmap` and into `container_destroy`, because containers can be fullscreen too\r\n* The calls to `container_reap_empty_recursive(workspace)` have been removed from `container_set_floating`. That function reaps upwards so it wouldn't do anything. I'm probably the one who originally added it...\r\n* My fix (b14bd1b0b1536039e4f46fe94515c7c44e7afc61) for the tabbed child crash has a side effect where when you close a floating container, focus is not given to the tiled container again. I've removed my fix and removed the call to `send_cursor_motion` from `seat_set_focus_warp`. We should consider calling it from somewhere earlier in the call stack.\r\n\r\nTest plan:\r\n\r\n* `focus parent` then `floating enable` with different layout types\r\n* Try to move children of floating containers out of the container\r\n* Fullscreen floating containers\r\n* Send containers to the scratchpad\r\n* Use `floating_modifier` to move and resize a floating container": {
        "include/sway/input/seat.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands/floating.c": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/scratchpad.c": 1,
        "sway/commands/split.c": 1,
        "sway/desktop/render.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/scratchpad.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1
    },
    "Allow moving containers when workspace itself is focusedTo test, create two views in a workspace, then use `focus parent` to focus the workspace, then run something like `move to workspace 2`.": {
        "sway/commands/move.c": 1
    },
    "Allow multiple outputs for workspace outputRelated to #3082 \r\ni3 documentation: https://i3wm.org/docs/userguide.html#workspace_screen\r\n`workspace <workspace> output <outputs>`\r\n\r\n`i3 4.16` allows users to list multiple outputs for a workspace and the first available will be used.\r\n\r\nAdditionally when the workspace is created, the outputs get added to the output priority list in the order specified. This ensures that if a higher output gets connected, the workspace will move to the higher output. This works the same way as if the user had a workspace on an output, disconnected the output, and then later reconnected the output.": {
        "include/sway/config.h": 1,
        "sway/commands/workspace.c": 1,
        "sway/sway.5.scd": 1,
        "sway/tree/output.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Allow running commands on containers without focusing themThis adds a `con` argument to `execute_command` which allows you to specify the container to execute the command on. In most cases it leaves it as `NULL` which makes it use the focused node. We only set it when executing `for_window` criteria such as when a view maps. This means we don't send unnecessary IPC focus events, and fixes a crash when the criteria command is `move scratchpad` (because we can't give focus to a hidden scratchpad container).\r\n\r\nEach of the shell map handlers now check to see if the view has a workspace. It won't have a workspace if criteria has moved it to the scratchpad.\r\n\r\nTo test:\r\n\r\n* `for_window [class=\"Firefox\"] move scratchpad` and then launch Firefox\r\n* Try other criteria commands\r\n\r\nFixes #2656.": {
        "include/sway/commands.h": 1,
        "sway/commands.c": 1,
        "sway/commands/bind.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1,
        "sway/tree/view.c": 1
    },
    "Allow spaces in background file pathFixes #654 \r\n\r\n`wordexp` splits the file path into multiple words if there are spaces. In `master`, only the first word is used. This caused `foo bar` to be truncated to just `foo`. Additionally, the path given to `swaybg` is not escaped in anyway and `wordexp` strips any backslash escaped spaces.\r\n\r\nThis first commit of this PR joins the words from `wordexp` together and encloses the path given to `swaybg` in quotes. This works well if there are not consecutive spaces in the file path or if consecutive spaces are backslash escaped.\r\n\r\nThe second commit of this PR will detect non-escaped consecutive spaces and escape them for the user. This allows for the path to be enclosed in quotes.\r\n\r\nWith both commits, the following methods for supplying the path should be working regardless the number of consecutive spaces:\r\n- The path in quotes\r\n- The path with spaces escaped with backslashes": {
        "sway/commands/output/background.c": 1
    },
    "Allow subsurfaces which overflow the container to be interacted withFixes #2492.": {
        "sway/tree/container.c": 1
    },
    "Allow swaybg to be disabledSame as #2791 but for swaybg.\r\n\r\nFixes #2790": {
        "sway/commands/bar/status_command.c": 1,
        "sway/commands/swaybg_command.c": 1,
        "sway/config.c": 1,
        "sway/config/output.c": 1,
        "sway/sway.5.scd": 1
    },
    "Allow swaynag to be disabledSame as #2791 and #2793, but for swaynag": {
        "sway/commands/swaynag_command.c": 1,
        "sway/config.c": 1,
        "sway/sway.5.scd": 1,
        "sway/swaynag.c": 1
    },
    "Alter config variable replacement process**Since this heavily alters the way the config commands are processed, this needs to be heavily tested before merging**\r\n\r\nCurrently, variables cannot contain commands and cannot span more than one argument. This is due to variable replacement happening after determining the handler and after splitting the config line into arguments.\r\n\r\nThis changes the process to:\r\n1. Check for empty lines and block boundaries\r\n2. Split the arguments as before\r\n3. Verify that the first argument is not a variable. If needed the following occurs\r\n    a. Perform variable replacement on just the first argument\r\n    b. Join the arguments back together then split the arguments again. _(This is needed when the variable contains the command and arguments for the command)_\r\n4. Determine the handler\r\n5. If the handler is cmd_set, escape the variable name so that it does not get replaced\r\n6. Join the arguments back together, do variable replacement on the full command, and split the arguments again\r\n7. Perform any needed quote stripping or unescaping on arguments\r\n8. Run the command handler\r\n\r\nThis allows for config snippets such as:\r\n\r\n```\r\n# Issue 2968\r\nset $super bindsym Mod4\r\n$super+a exec some-command\r\n```\r\n\r\nand\r\n\r\n```\r\n# Issue #2848\r\nset $bg bg #ffffff solid_color\r\noutput * $bg\r\n```\r\n\r\nFixes #2968 \r\nFixes #2848 ": {
        "sway/commands.c": 1
    },
    "Attempt to reap old tiling parent when floating a containerTo test:\r\n\r\n* Create layout `H[view V[view]]`\r\n* Focus the view inside the vertical split container and float it\r\n\r\nThe vertical split container was not reaped, so the tiling view would take up half the space.": {
        "sway/tree/container.c": 1
    },
    "Attempted pointer focus fixFixes #2401 (aka #2558)\r\n\r\nI know fixes for this issue have had side effects in the past, hopefully this won't but I can't guarantee it. I'm running this on my primary machine though, and I'll report any problems I have.": {
        "sway/desktop/transaction.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/node.c": 1
    },
    "Bar mode/hidden_state eventsTODO:\r\n- [x] send stop/start signals to status\r\n- [x] key events - cannot be done using current layer shell protocol due to focus issues, may need a new protocol or IPC event\r\n- [x] show bar on workspace urgency\r\n- [x] documentation\r\n\r\n~Priority low on this one, it's mostly there but I don't think I will be working that much on it for now.~": {
        "include/ipc.h": 1,
        "include/sway/config.h": 1,
        "include/sway/ipc-server.h": 1,
        "include/swaybar/bar.h": 1,
        "include/swaybar/config.h": 1,
        "include/swaybar/i3bar.h": 1,
        "include/swaybar/ipc.h": 1,
        "include/swaybar/status_line.h": 1,
        "sway/commands/bar/hidden_state.c": 1,
        "sway/commands/bar/mode.c": 1,
        "sway/config/bar.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/ipc-server.c": 1,
        "sway/sway-bar.5.scd": 1,
        "sway/sway.5.scd": 1,
        "swaybar/bar.c": 1,
        "swaybar/config.c": 1,
        "swaybar/ipc.c": 1,
        "swaybar/main.c": 1,
        "swaybar/render.c": 1,
        "swaybar/status_line.c": 1
    },
    "Build fixFixes #2521 ": {
        "meson.build": 1,
        "sway/commands/move.c": 1
    },
    "Call pango_cairo_context_set_font_options().Call pango_cairo_context_set_font_options() before pango_cairo_update_layout() and pango_cairo_show_layout(). It looks like Pango defaults to merging the Cario font options with its own defaults, and the end result is no full hinting.\r\n\r\nComparison: ![comparison](https://i.imgur.com/CXNF701.png)\r\nMaster is on top and this PR is on bottom.\r\n\r\nNotice the difference in smaller characters such as `\u00b0` and `%`. Also the top left of the `?` has a little more down curl (more accurate question mark shape). And the text is a little higher contrast.\r\n\r\nThe improvements are minor, but they're improvements.\r\n\r\nYou can see another example of pango+cairo usage in Chromium: https://chromium.googlesource.com/chromium/chromium/+/master/ui/gfx/pango_util.cc#197\r\n": {
        "common/pango.c": 1
    },
    "Call wlr_output_enable on enable/disable if neededFixes #2557 \r\n\r\nThis PR:\r\n- Calls `wlr_output_enable(wlr_output, false)` when disabling an output.\r\n- Calls `wlr_output_enable(wlr_output, true)` when (re-)enabling an output **_if_** DPMS is not set to `DPMS_OFF`\r\n\r\nI also refactored `apply_output_config` to:\r\n- ~Take in a `struct sway_output` instead of `struct sway_container`~ (Taken care of by typesafety)\r\n- Handle (re-)enabling the output instead of having it done before in `apply_output_config_to_outputs`\r\n   - ~This also required setting `sway_output->swayc` in `output_create` instead of `output_enable` to avoid an infinite loop~ (No longer needed with typesafety)\r\n\r\nSince typesafety accidentally reverted part of #2553, I also removed the modeset from `output_create`.": {
        "sway/config/output.c": 1,
        "sway/tree/output.c": 1
    },
    "Change execute_command to return a list of resultsFixes #3094 \r\n\r\nThis matches i3's behavior of returning a list of results that contain the result of each command that was executed. Additionally, the `parse_error` attribute has been added to the IPC JSON reply.": {
        "include/sway/commands.h": 1,
        "sway/commands.c": 1,
        "sway/commands/bind.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1,
        "sway/tree/view.c": 1
    },
    "Change exit binding in default config to nag user, matching i3": {
        "config.in": 1
    },
    "Check correct ws for sticky and fix floating iterFixes #2416 \r\n\r\n~When switching workspaces, the wrong workspace could be checked for sticky floating containers. This is fixed by using `seat_get_focus_inactive` (followed-by `container_parent`) instead of `seat_get_active_child`.~ See comments below\r\n\r\nAdditionally, I fixed the iterator for the floating children so the current index is decremented when moving a sticky container to the workspace being switched to.": {
        "sway/tree/workspace.c": 1
    },
    "Check if there is a current container before setting its opacityFixes https://github.com/swaywm/sway/issues/2792\r\n\r\nIssuing an opacity command when there is no current container (for example issuing via `exec swaymsg \"opacity 0.75\"` from the config file) causes sway to crash. Now there is a NULL check which stops this from happening.": {
        "sway/commands/opacity.c": 1
    },
    "Check modal state when determining whether an xwayland view should floatDepends on https://github.com/swaywm/wlroots/pull/1222.\r\n\r\nI don't know of a program that sets the state to modal without setting the window type, but I know the modal property works because logging the property shows it's true for the Firefox Open File dialog.": {
        "sway/desktop/xwayland.c": 1
    },
    "Configure initial state for numlock/capslockSet numlock state to enabled by default, keep capslock disabled and make this configurable.\r\n\r\nThe initial state of numlock and capslock can be set with \r\n```input ... xkb_numlock|xkb_capslock disable|enable```\r\n\r\nImplements #2311 \r\n\r\nNote: This relies ```wlr_keyboard_notify_modifiers``` which is not meant to be called by the compositor, but I found no other option to reliably set the modifiers. \r\n\r\nI used the xkb_ prefix to indicate that setting the state will reload the keyboard configuration. \r\nThe commands use enabled/disabled instead of off/on to match the other boolean input commands.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "sway/commands/input.c": 1,
        "sway/config/input.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/meson.build": 1,
        "sway/sway-input.5.scd": 1
    },
    "Consider cursor warp when switching workspacesFixes a regression introduced in 24a90e5d86441fc345356eb3767e5a6880dcedbd.\r\n\r\n`consider_warp_to_focus` has been renamed to `seat_consider_warp_to_focus`, moved to `seat.c` and made public. It is now called when switching workspaces via `workspace <ws>`.": {
        "include/sway/input/seat.h": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/input/seat.c": 1
    },
    "Correct \"Current mode\" in `swaymsg -t get_outputs` for scaled outputsFixes #3051.\r\n\r\nFixed output example:\r\n\r\n```\r\nOutput eDP-1 'Sharp Corporation 0x148B 0x00000000'\r\n  Current mode: 3840x2160 @ 59.997002 Hz\r\n  Position: 3440,0\r\n  Scale factor: 2x\r\n  Transform: normal\r\n  Workspace: 1\r\n  Available modes:\r\n    3840x2160 @ 47.997002 Hz\r\n    3840x2160 @ 59.997002 Hz\r\n```": {
        "sway/ipc-json.c": 1,
        "swaymsg/main.c": 1
    },
    "Correctly track saved surfaces during multiple transactionsFixes #2364.\r\n\r\nSuppose a view is 600px wide, and we tell it to resize to 601px during a resize operation. We create a transaction, save the 600px buffer and send the configure. This buffer is saved into the associated instruction, and is rendered while we wait for the view to commit a 601px buffer.\r\n\r\nBefore the view commits the 601px buffer, suppose we tell it to resize to 602px. The new transaction will also save the buffer, but it's still the 600px buffer because we haven't received a new one yet.\r\n\r\nThen suppose the view commits its original 601px buffer. This completes the first transaction, so we apply the 601px width to the container. There's still the second (now only) transaction remaining, so we render the saved buffer from that. But this is still the 600px buffer, and we believe it's 601px. Whoops.\r\n\r\nThe problem here is we can't stack buffers like this. So this commit removes the saved buffer from the instructions, places it in the view instead, and re-saves the latest buffer every time the view completes a transaction and still has further pending transactions.\r\n\r\nAs saved buffers are now specific to views rather than instructions, the functions for saving and removing the saved buffer have been moved to `view.c`.\r\n\r\nThe calls to save and restore the buffer have been relocated to more appropriate functions too, favouring `transaction_commit` and `transaction_apply` rather than `transaction_add_container` and `transaction_destroy`.\r\n\r\nTo test:\r\n\r\n* Open an xdg shell view\r\n* Float it\r\n* Resize it towards the top left using mod + right click\r\n\r\nDo not test using FileZilla. That client appears to misbehave when there's multiple configures. It commits with a new size, but the texture contains old contents. I've spent so many hours trying to find a problem in sway or wlroots in relation to this, before realising that FileZilla was the only client that does this :-\\": {
        "include/sway/desktop/transaction.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/tree/view.c": 1
    },
    "Create ISSUE_TEMPLATE.mdAdapted from the wiki.": {},
    "Create list for mouse bindings when creating new modeWhen creating a new mode, a list for mouse bindings was not being created. This was causing a segfault while in any mode other than the default and clicking on a window.\r\n\r\nThis PR simply creates a list for mouse bindings when a mode is created.": {
        "sway/commands/mode.c": 1
    },
    "Default to the previous workspace if the current one has no focused windowsThis fixes a bug that I found that can be replicated as follows:\r\n\r\nGo to a new workspace and open any app. Do this three times so you have 3 workspaces with one window each. Go to the middle workspace, close the window and attempt to use `workspace next` or `workspace prev` to navigate to either. You won't be able to\r\n\r\nThis seems to be because `workspace_by_name` only defines `current_workspace` and `current_output` if there's something focused on the current workspace as you can see here https://github.com/swaywm/sway/blob/master/sway/tree/workspace.c#L260 and in `workspace_prev_next_impl` it checks if the passed in workspace is null and stops if it is.\r\n\r\nSince I'm not proficient in C, I just patched it in `workspace_prev_next_impl` by defaulting to the previous workspace if it exists.\r\n\r\nThis is probably not the solution you want so feel free to close this in favor of a better solution or I'm happy to work out something better with some guidance": {
        "sway/tree/workspace.c": 1
    },
    "Deny \"move container\" when an empty workspace is focusedFixes first item on #2412.": {
        "sway/commands/move.c": 1
    },
    "Deny repeating reload by holding keyFixes #2568\r\n\r\nThe binding that gets stored in the keyboard's `repeat_binding` would get freed on reload, leaving a dangling pointer.\r\n\r\nRather than attempt to unset the keyboard's `repeat_binding` along with the other bindings, I opted to just not set it for the reload command because there's no point in reloading repeatedly by holding the binding. This disables repeat bindings for the reload command.\r\n\r\nAs we now need to detect whether it's a reload command in two places, I've added a binding flag to track whether it's a reload or not.": {
        "include/sway/config.h": 1,
        "sway/commands/bind.c": 1,
        "sway/input/keyboard.c": 1
    },
    "Deny several commands when there's no outputs connectedFixes #2972.\r\n\r\nI probably haven't found them all, but these are the ones that are likely to be bound to shortcuts and which will cause crashes.": {
        "sway/commands/floating.c": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/fullscreen.c": 1,
        "sway/commands/gaps.c": 1,
        "sway/commands/kill.c": 1,
        "sway/commands/layout.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/rename.c": 1,
        "sway/commands/resize.c": 1,
        "sway/commands/scratchpad.c": 1,
        "sway/commands/split.c": 1,
        "sway/commands/swap.c": 1,
        "sway/commands/workspace.c": 1
    },
    "Destroy empty workspaces in output_evacuate#2499 accidentally removed the check for empty workspaces when moving workspaces on output disconnect/disable. This caused empty workspaces to also be moved. This PR adds the check back in.": {
        "sway/tree/output.c": 1
    },
    "Detail Fedora Source build requirementsAdding some details on issues found when trying to build sway from source in Fedora": {
        "README.md": 1
    },
    "Do not modeset disabled outputsSame as https://github.com/swaywm/wlroots/pull/1215": {
        "sway/config/output.c": 1,
        "sway/desktop/output.c": 1
    },
    "Do not strip quotes for cmd_modeFixes #3146\r\n\r\nLike with cmd_bindsym and cmd_bindcode, the quotes should not be stripped for cmd_mode. cmd_mode performs its own stripping for the mode name and the only valid subcommands are cmd_bindsym and cmd_bindcode.": {
        "sway/commands.c": 1
    },
    "Do not strip quotes for exec or bind commandsLeave quotes intact for `cmd_exec`, `cmd_exec_always`, `cmd_bindcode`, `cmd_bindsym`, and `cmd_set`.\r\n\r\n`cmd_exec` and `cmd_exec_always` should not have any quotes stripped from them and should be passed to `exexcl` as is.\r\n\r\n`cmd_bindcode` and `cmd_bindsym` will have their bound command processed by `execute_command`, which will strip quotes for everything except `cmd_exec`.\r\n\r\nFixes #2736\r\nFixes #2738": {
        "sway/commands.c": 1
    },
    "Document how to identify outputs by make, model and serialFixes #2969.": {
        "sway/sway-output.5.scd": 1
    },
    "Don't call swaynag_log for bg when not readingIn #2439, I forgot to make sure the config was being read when calling `swaynag_log` for an inaccessible path. This PR just adds that check.": {
        "sway/commands/output/background.c": 1
    },
    "Don't commit transaction in output_layout_handle_changeBecause this is only ever emitted by wlroots in response to a direct function call by us (such as in `apply_output_config`) or in response to an output event such as a mode event, and we already commit transactions in the output event handlers.\r\n\r\nThis prevents creating a transaction while the tree is in an inconsistent state, which caused a crash.\r\n\r\nProbably fixes #3015, but I can't reproduce it.": {
        "sway/tree/root.c": 1
    },
    "Don't dirty outputs unnecessarily": {
        "sway/input/seat.c": 1
    },
    "Don't enable numlock by default.This fixes a confusing issue where some laptop keyboards would have 'numlock mode' enabled, remapping parts of the alphabet to numbers.\r\n\r\nIt'd be great if we could detect keyboards with dedicated numpads and enable numlock by default, but that sounds really hard. :/": {
        "sway/input/keyboard.c": 1,
        "sway/sway-input.5.scd": 1
    },
    "Don't give focus if xwayland window has a type hintFixes dunst.\r\n\r\nRequires https://github.com/swaywm/wlroots/pull/1165": {
        "sway/desktop/xwayland.c": 1
    },
    "Don't overflow the buffer when buffer would overflow.The code was taking the pointer size rather than the length of the string when strcpy:ing into the buffer. This would overflow the buffer which, ironically, this code was meant to avoid.": {
        "common/pango.c": 1
    },
    "Don't reset cursor during mouse operationsTo test, drag a floating container with `$mod + click`, and resize a container using `$mod + right click`.\r\n\r\nFixes #2996.": {
        "sway/desktop/transaction.c": 1
    },
    "Don't send never-ending transactions when a focused layer surface commitsThis moves the `arrange_windows` call into the `arrange_layers` function, where we know the output actually needs to be arranged.\r\n\r\nAdditionally, we shouldn't set focus to the parent of an unknown container type, because the parent may be an output and this causes a crash because outputs can't have direct focus.\r\n\r\nFixes #2543": {
        "sway/desktop/layer_shell.c": 1,
        "sway/input/seat.c": 1
    },
    "Don't use bitfield to test for similar transactionsWhen there's multiple transactions in the queue, sway can take a shortcut by checking if they all operate on the same set of containers. If they do, it can skip all but the last transaction. The way we tested for transactions which used the same containers was to exclusive-or their con IDs together, but this has proved not only to be ineffective but also has the potential to make sway crash.\r\n\r\nThis patch replaces the exclusive-or with a loop and container comparison.\r\n\r\nThis has a good chance of fixing #2527, but I've not been able to reproduce it in a nested session and can't do DRM testing right now. @ianyfan Can you please test? Otherwise I'll do DRM testing later.": {
        "sway/desktop/transaction.c": 1
    },
    "Don't use handler_context in view_unmapTries to fix #2619\r\n\r\n@linkmauve I failed to reproduce, but the code is wrong so I tried to fix it. Can you confirm this fix works?": {
        "sway/tree/view.c": 1
    },
    "Emit window close event earlier, before destroyingA small fix to an annoying problem I had with the ipc, whereby when I closed a window, it would send out a focus event on the newly-focused container before sending out the close event for the old container. Unless I'm misunderstanding the problem, this should fix that.\r\n\r\nAlso removed the TODO on container_create_notify, since I think all cases have been covered.": {
        "sway/tree/container.c": 1
    },
    "Enable gaps in the default configurationThe new gaps feature is so awesome that I believe it should be enabled by default.\r\n\r\nThis pull request is just a suggestion, the decision is up to you, of course.\r\n\r\nThanks for creating sway! :heart:": {
        "config.in": 1
    },
    "Enable wlr-gamma-control-unstable-v1": {
        "sway/server.c": 1
    },
    "Escaping underscores in tap_button_map": {
        "sway/sway-input.5.scd": 1
    },
    "Establish sway-output(5)": {
        "/dev/null": 1,
        "meson.build": 1,
        "sway/sway-input.5.scd": 1,
        "sway/sway.1.scd": 1,
        "sway/sway.5.scd": 1
    },
    "Export XCURSOR_SIZE and XCURSOR_THEMEThese can be used by toolkits (currently Qt, libxcursor, glfw) to\r\nchoose a default cursor theme and size.\r\n\r\nThis backports this rootston commit:\r\nhttps://github.com/swaywm/wlroots/pull/1294/commits/3a181ab430997aaf03a75cbe3b79b0fc56ec96c3": {
        "sway/server.c": 1
    },
    "Finish resize commandsCompletes #1737.\r\n\r\n* Implements `resize grow|shrink <direction> <amount>` for tiled containers\r\n* Implements `resize set <width> <height>` for tiled containers\r\n\r\nI made `resize set` allow px units, then realised afterwards that i3 doesn't support it. So I left it in. Use `px` to use pixels, and `ppt` or no unit to use percentage points.\r\n\r\nAlso fixes a sane size check which failed to check against the correct amount of pixels in some cases.": {
        "sway/commands/resize.c": 1,
        "sway/sway.5.scd": 1
    },
    "Fix #2992Move a function call, such that data it depends on is initialized before.\r\n\r\nThis fixed the crash described in #2992 for me. Previously I was able to reproduce the crash, every time I was using an external monitor.": {
        "sway/tree/output.c": 1
    },
    "Fix GtkMenuBar always opening first itemIt seems like advertising that we support touch when we don't, while using SSD, makes GtkMenuBar misbehave. Please don't ask me why...\r\n\r\nFixes #2299.": {
        "sway/input/seat.c": 1
    },
    "Fix back_and_forth documentation": {
        "sway/sway.5.scd": 1
    },
    "Fix bad-free in swaynagI messed up and added the details button (which was never malloc'd) to `swaynag->buttons`.\r\n\r\nThis changes it so `button_details` is `struct swaynag_button *` and malloc'd so that it can be free'd with the rest of the buttons.": {
        "include/swaynag/swaynag.h": 1,
        "swaynag/config.c": 1,
        "swaynag/main.c": 1
    },
    "Fix bar subcommand handler structs and selectionOverview of changes:\r\n- Made it so `mode` and `hidden_state` are valid both in the config and during runtime.\r\n- Made it so `id` and `swaybar_command` are  only valid in the config.\r\n- Moves the config-only subcommand handling to below bar selection/creation.\r\n- Only allows creation of custom id bars during runtime (default id bars in config only)\r\n\r\nFor a follow-up PR:\r\nOnce #2751 is merged, send the IPC `barconfig_update` event for the subcommands in `cmd_bar_handlers` and handle it in swaybar": {
        "include/sway/config.h": 1,
        "sway/commands/bar.c": 1,
        "sway/commands/bar/id.c": 1,
        "sway/commands/bar/status_command.c": 1,
        "sway/config/bar.c": 1
    },
    "Fix building with clangThe `struct sway_container *other` variable in swap.c was potentially used uninitialized, depending on an \"if\" statement.": {
        "sway/commands/swap.c": 1
    },
    "Fix clear_password_bufferJust a typo that breaks buffer clearing\r\n(I think it could be safely replaced with a memset since there is no succeeding memory freeing)": {
        "swaylock/password.c": 1
    },
    "Fix commands: criteria, layout, move, workspaceRef #2336 \r\n\r\nFixes #1518\r\n\r\nCriteria:\r\n- [x] urgent\r\n- [x] con_id=\\_\\_focused__\r\n\r\nCommands:\r\n- [x] layout\r\n- [x] document \\<criteria> focus\r\n- [x] move\r\n    - [x] documentation\r\n    - [x] move position center\r\n    - [x] move to mark\r\n    - [x] move to workspace back_and_forth\r\n    - [x] --no-auto-back-and-forth\r\n    - [x] make \"to\" optional\r\n- [x] workspace\r\n    - [x] --no-auto-back-and-forth\r\n    - [x] back_and_forth\r\n\r\nAlso prevents renaming workspace to \"back_and_forth\", as well as making it clear that they cannot be named to \"special\" workspace names.": {
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands/layout.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/rename.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/criteria.c": 1,
        "sway/sway.5.scd": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Fix compilation against wlroots without X11 backendTested:\r\n- built sway against wlroots built with -Dx11-backend=enabled, ran WLR_BACKENDS=x11 sway, confirmed create_output still works\r\n- built sway against wlroots built with -Dx11-backend=disabled, ran it (wayland backend), confirmed create_output still works\r\n\r\nThe error message still mentions \"X11 backend\" even if built without support for one, hopefully that's ok for a developer command.": {
        "sway/commands/create_output.c": 1
    },
    "Fix compilation error on muslI have the following error when compiling latest sway+wlroots on Void Linux with musl\r\n```\r\n[271/275] Compiling C object 'swaylock/swaylock@@swaylock@exe/main.c.o'.\r\nFAILED: swaylock/swaylock@@swaylock@exe/main.c.o\r\ncc -Iswaylock/swaylock@@swaylock@exe -Iswaylock -I../swaylock -Iinclude -I../include -I/usr/include/cairo -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/uuid -I/usr/include/freetype2 -I/usr/include/libdrm -I/usr/include/libpng16 -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/pango-1.0 -I/usr/include/fribidi -I/usr/include/harfbuzz -I/usr/include/elogind -flto -fdiagnostics-color=always -DNDEBUG -pipe -D_FILE_OFFSET_BITS=64 -Werror -std=c11 -DWL_HIDE_DEPRECATED -DWLR_USE_UNSTABLE -Wno-unused-parameter -Wno-unused-result -Wundef '-DSYSCONFDIR=\"//etc\"' '-DSWAY_VERSION=\" (\" __DATE__ \", branch '\"'\"''\"'\"')\"' -D_FORTIFY_SOURCE=2 -mtune=generic -O2 -pthread  -MD -MQ 'swaylock/swaylock@@swaylock@exe/main.c.o' -MF 'swaylock/swaylock@@swaylock@exe/main.c.o.d' -o 'swaylock/swaylock@@swaylock@exe/main.c.o' -c ../swaylock/main.c\r\n../swaylock/main.c: In function 'main':\r\n../swaylock/main.c:964:65: error: 'POLL_IN' undeclared (first use in this function)\r\n  loop_add_fd(state.eventloop, wl_display_get_fd(state.display), POLL_IN,\r\n                                                                 ^~~~~~~\r\n../swaylock/main.c:964:65: note: each undeclared identifier is reported only once for each function it appears in\r\nninja: build stopped: subcommand failed.\r\n```\r\nInvestigating the error, I found that it was introduced when commit 3a310f9 was merged.\r\nThat commit removed the `_XOPEN_SOURCE` definition. If you read the signal.h musl implementation [here](https://git.musl-libc.org/cgit/musl/tree/include/signal.h#n223) we can see that the definition is needed if the `POLL_IN` definition is to be included.\r\n```\r\n#if defined(_XOPEN_SOURCE) || defined(_BSD_SOURCE) || defined(_GNU_SOURCE)\r\n...\r\n#define POLL_IN 1\r\n...\r\n```": {
        "swaylock/main.c": 1
    },
    "Fix compiler errors.- Some platforms don't expose kill() unless _POSIX_C_SOURCE is defined.\r\n- fork(), execl(), and setsid() need unistd.h on some platforms.\r\n\r\nBasically, this fixes some platform-specific build errors.": {
        "sway/swaynag.c": 1,
        "swaynag/swaynag.c": 1
    },
    "Fix container_has_ancestor crashFixes #2450": {
        "sway/tree/container.c": 1
    },
    "Fix containers not being resized when entering scratchpadThis fixes a regression introduced by 662466e8db773926bf61b21280194a3540ae26ec (#2929). When adding a container to the scratchpad, setting `container->scratchpad = true` before `container_set_floating` made `container_set_floating` believe that the container was already floating. This fixes it by setting the property afterwards instead.\r\n\r\nTest by focusing a tiling view then running `move scratchpad` followed by `scratchpad show`.\r\n\r\nAlso tested with the config that the original issue was fixing:\r\n\r\n    for_window [class=\"Firefox\"] floating enable\r\n    for_window [class=\"Firefox\"] move scratchpad\r\n    for_window [class=\"Firefox\"] resize set 1000 1000\r\n": {
        "sway/tree/root.c": 1
    },
    "Fix crash if view has no containerThis crashed on me earlier\r\n\r\n```\r\nProgram terminated with signal SIGSEGV, Segmentation fault.\r\n#0  0x0000556bc49809a6 in container_is_floating (container=0x0) at ../sway/tree/container.c:738\r\n738\t\treturn !container->parent && container->workspace &&\r\n[Current thread is 1 (Thread 0x7f20ebc029c0 (LWP 2610))]\r\n(gdb) bt f\r\n#0  0x0000556bc49809a6 in container_is_floating (container=0x0) at ../sway/tree/container.c:738\r\n#1  0x0000556bc49847a9 in view_update_csd_from_client (view=0x556bc60bf580, enabled=true) at ../sway/tree/view.c:344\r\n#2  0x0000556bc498aa26 in handle_set_decorations (listener=0x556bc60bf7e0, data=0x556bc60c30e0) at ../sway/desktop/xwayland.c:253\r\n        xwayland_view = 0x556bc60bf580\r\n        view = 0x556bc60bf580\r\n        xsurface = 0x556bc60c30e0\r\n        csd = true\r\n#3  0x00007f20f09a4aed in wlr_signal_emit_safe (signal=0x556bc60c32d8, data=0x556bc60c30e0) at ../subprojects/wlroots/util/signal.c:29\r\n        pos = 0x556bc60bf7e0\r\n        l = 0x556bc60bf7e0\r\n        cursor = {link = {prev = 0x556bc60bf7e0, next = 0x7ffc116c9130}, notify = 0x7f20f09a4a37 <handle_noop>}\r\n        end = {link = {prev = 0x7ffc116c9110, next = 0x556bc60c32d8}, notify = 0x7f20f09a4a37 <handle_noop>}\r\n#4  0x00007f20f09567bc in read_surface_motif_hints (xwm=0x556bc5ec5840, xsurface=0x556bc60c30e0, reply=0x556bc6096c00) at ../subprojects/wlroots/xwayland/xwm.c:597\r\n        decorations = 0\r\n        motif_hints = 0x556bc6096c20\r\n#5  0x00007f20f0956ba6 in read_surface_property (xwm=0x556bc5ec5840, xsurface=0x556bc60c30e0, property=253) at ../subprojects/wlroots/xwayland/xwm.c:666\r\n        cookie = {sequence = 8146}\r\n        reply = 0x556bc6096c00\r\n#6  0x00007f20f0957629 in xwm_handle_property_notify (xwm=0x556bc5ec5840, ev=0x556bc6038dc0) at ../subprojects/wlroots/xwayland/xwm.c:906\r\n        xsurface = 0x556bc60c30e0\r\n#7  0x00007f20f0958319 in x11_event_handler (fd=55, mask=1, data=0x556bc5ec5840) at ../subprojects/wlroots/xwayland/xwm.c:1273\r\n        count = 1\r\n        event = 0x556bc6038dc0\r\n        xwm = 0x556bc5ec5840\r\n#8  0x00007f20eff20702 in wl_event_loop_dispatch () at /usr/lib/libwayland-server.so.0\r\n#9  0x00007f20eff1f2ac in wl_display_run () at /usr/lib/libwayland-server.so.0\r\n#10 0x0000556bc49535b5 in server_run (server=0x556bc49a9ae0 <server>) at ../sway/server.c:174\r\n#11 0x0000556bc4952cca in main (argc=2, argv=0x7ffc116c9618) at ../sway/main.c:384\r\n        verbose = 0\r\n        debug = 1\r\n        validate = 0\r\n        long_options = \r\n            {{name = 0x556bc49929b4 \"help\", has_arg = 0, flag = 0x0, val = 104}, {name = 0x556bc49929b9 \"config\", has_arg = 1, flag = 0x0, val = 99}, {name = 0x556bc49929c0 \"validate\", has_arg = 0, flag = 0x0, val = 67}, {name = 0x556bc49929c9 \"debug\", has_arg = 0, flag = 0x0, val = 100}, {name = 0x556bc49929cf \"version\", has_arg = 0, flag = 0x0, val = 118}, {name = 0x556bc49929d7 \"verbose\", has_arg = 0, flag = 0x0, val = 86}, {name = 0x556bc49929df \"get-socketpath\", has_arg = 0, flag = 0x0, val = 112}, {name = 0x0, has_arg = 0, flag = 0x0, val = 0}}\r\n        config_path = 0x0\r\n        usage = 0x556bc4992570 \"Usage: sway [options] [command]\\n\\n  -h, --help\", ' ' <repeats 13 times>, \"Show help message and quit.\\n  -c, --config <config>  Specify a config file.\\n  -C, --validate         Check the validity of the config file, th\"...\r\n        c = -1\r\n```\r\n\r\nFixes #2758": {
        "sway/tree/view.c": 1
    },
    "Fix crash in swap commandWhen swapping containers that are in the root of the workspace, `parent` will be `NULL`.\r\n\r\nTo test:\r\n\r\n* Create two workspaces with a terminal on each\r\n* Mark one of them\r\n* On the unmarked terminal, run `swaymsg swap container with mark foo`": {
        "sway/commands/swap.c": 1
    },
    "Fix crash moving out of tab containerTo reproduce issue:\r\n1. Set an empty workspace to be tabbed\r\n1. Open two windows\r\n1. H split one\r\n1. Open three windows, your tree should now be:\r\n    ````\r\n    Tabbed {\r\n        Window,\r\n        Tiled {\r\n            Window,\r\n            Window,\r\n            Window\r\n        }\r\n    }\r\n    ````\r\n1. Move one of the inner windows down\r\n1. Segfault\r\n\r\nStack trace: \r\n```\r\nThread 1 \"sway\" received signal SIGSEGV, Segmentation fault.\r\n[Switching to Thread 0x7ffff1fe39c0 (LWP 15042)]\r\n0x000055555559b63f in container_split (child=0x0, layout=L_VERT)\r\n    at ../sway/tree/container.c:1168\r\n1168\t\tcont->width = child->width;\r\n(gdb) bt\r\n#0  0x000055555559b63f in container_split (child=0x0, layout=L_VERT)\r\n    at ../sway/tree/container.c:1168\r\n#1  0x000055555558a470 in move_out_of_tabs_stacks\r\n    (container=0x555555ab80f0, current=0x555555aab710, move_dir=MOVE_DOWN, offs=1)\r\n    at ../sway/commands/move.c:294\r\n#2  0x000055555558a7a4 in container_move_in_direction\r\n    (container=0x555555ab80f0, move_dir=MOVE_DOWN) at ../sway/commands/move.c:374\r\n#3  0x000055555558b911 in cmd_move_in_direction\r\n    (direction=MOVE_DOWN, argc=1, argv=0x555555abb1d8)\r\n    at ../sway/commands/move.c:730\r\n#4  0x000055555558c238 in cmd_move (argc=1, argv=0x555555abb1d8)\r\n    at ../sway/commands/move.c:894\r\n#5  0x00005555555615c3 in execute_command\r\n    (_exec=0x55555577e800 \"move down\", seat=0x55555585b150)\r\n    at ../sway/commands.c:318\r\n#6  0x00005555555853a2 in seat_execute_command\r\n    (seat=0x55555585b150, binding=0x55555577e8d0) at ../sway/commands/bind.c:324\r\n#7  0x0000555555580a50 in handle_keyboard_key\r\n    (listener=0x5555555dd160, data=0x7fffffffe240) at ../sway/input/keyboard.c:284\r\n#8  0x00007ffff6f56973 in wlr_signal_emit_safe\r\n    (signal=0x5555555c86b8, data=0x7fffffffe240) at ../util/signal.c:29\r\n#9  0x00007ffff6f3dd87 in wlr_keyboard_notify_key\r\n    (keyboard=0x5555555c85c0, event=0x7fffffffe240) at ../types/wlr_keyboard.c:107\r\n#10 0x00007ffff6f1efb9 in keyboard_handle_key\r\n    (data=0x5555555c8cf0, wl_keyboard=0x5555558a7160, serial=70, time=4484117, key=108, state=1) at ../backend/wayland/wl_seat.c:230\r\n#11 0x00007ffff54041c8 in ffi_call_unix64 () at /usr/lib/libffi.so.6\r\n#12 0x00007ffff5403c2a in ffi_call () at /usr/lib/libffi.so.6\r\n#13 0x00007ffff44fbf5f in  () at /usr/lib/libwayland-client.so.0\r\n#14 0x00007ffff44f86ca in  () at /usr/lib/libwayland-client.so.0\r\n#15 0x00007ffff44f9c0c in wl_display_dispatch_queue_pending ()\r\n    at /usr/lib/libwayland-client.so.0\r\n#16 0x00007ffff6f1c89f in dispatch_events (fd=4, mask=1, data=0x5555555d21d0)\r\n    at ../backend/wayland/backend.c:28\r\n#17 0x00007ffff6f94702 in wl_event_loop_dispatch ()\r\n    at /usr/lib/libwayland-server.so.0\r\n#18 0x00007ffff6f932ac in wl_display_run () at /usr/lib/libwayland-server.so.0\r\n#19 0x000055555556d674 in server_run (server=0x5555555c1a60 <server>)\r\n    at ../sway/server.c:165\r\n#20 0x000055555556cdef in main (argc=1, argv=0x7fffffffe9c8) at ../sway/main.c:446\r\n```": {
        "sway/commands/move.c": 1
    },
    "Fix crash on mouse motion on fullscreen container`container_at` expects a workspace, not the fullscreened container.\r\nFixes #2409": {
        "sway/input/cursor.c": 1
    },
    "Fix crash on reload when keyboard is configuredIf the keyboard was configured, it would be destroyed when reloading.\r\nThis meant that setting the repeat binding on the destroyed keyboard\r\nwould cause a segmentation fault. This commit sets the repeat binding\r\nbefore running the command.": {
        "sway/input/keyboard.c": 1
    },
    "Fix crash on reloadIf sway is reloaded using a bindsym which has multiple commands, it failed to detect the reload command, didn't create a duplicate of the binding and would crash because the reload command frees the bindings.\r\n\r\nFor example:\r\n\r\n    mode system {\r\n        bindsym r reload, mode default\r\n    }\r\n\r\nIn this example, the `binding->command` is \"reload, mode default\".\r\n\r\nFixes #2545": {
        "common/stringop.c": 1,
        "include/stringop.h": 1,
        "sway/commands/bind.c": 1
    },
    "Fix crash when a deferred command destroys a workspaceExample config that produces the crash (with a single output):\r\n\r\n    workspace 1\r\n    workspace 2\r\n\r\nI'm not sure on the specifics as to why it fails, but this fixes it by committing a transaction after each deferred command.": {
        "sway/tree/container.c": 1
    },
    "Fix crash when a splash screen opens on an empty workspaceThis fixes a crash I got when opening GIMP on an empty workspace, though I'm not sure why it's required.\r\n\r\nAlso, if this check is required, should it be `children->length == 0 ||` as it is here, or should it be changed to `children->length > 0 &&` (i.e. the opposite)?": {
        "sway/desktop/render.c": 1
    },
    "Fix crash when a view destroys with pending transactionsWe were removing the saved buffer when one transaction applies, then didn't have a new buffer to save when the next transaction ran. This made the rendering code crash as it had no surface to use.\r\n\r\nThis commit makes it continue to hold the buffer if the view is destroying and has more transactions. Additionally, a check is added when saving the buffer to make sure there's no one already there.\r\n\r\nTo test, kill a view while doing an aggressive resize motion.": {
        "sway/desktop/transaction.c": 1
    },
    "Fix crash when an idle-inhibiting client exitsNote: I do not know if this is the right fix! Maybe `view_is_visible` should handle this case, or maybe something else should be reordered so `idle_inhibit_v1_check_active` does not check views in this state? Let me know if this should be fixed differently or you need more information on the crash.\r\n\r\nThis fixes a crash with sway built from head when running `mpv --gpu-context=wayland --fullscreen /some/video` followed by `killall -9 mpv` (I have seen this without manually killing mpv, but not reproducably: I suspect mpv was shutting down uncleanly):\r\n\r\n```\r\n#0  0x000055834707bbec in view_is_visible (view=0x558348bc6950) at ../sway-9999/sway/tree/view.c:989\r\n#1  0x0000558347056ba5 in idle_inhibit_v1_check_active (manager=0x55834872b3b0)\r\n    at ../sway-9999/sway/desktop/idle_inhibit_v1.c:52\r\n#2  0x000055834705c432 in transaction_progress_queue () at ../sway-9999/sway/desktop/transaction.c:351\r\n#3  0x000055834705ca95 in transaction_commit_dirty () at ../sway-9999/sway/desktop/transaction.c:533\r\n#4  0x000055834707aed3 in view_unmap (view=view@entry=0x558348bc6950) at ../sway-9999/sway/tree/view.c:589\r\n#5  0x000055834705da87 in handle_unmap (listener=0x558348bc6b58, data=<optimized out>)\r\n    at ../sway-9999/sway/desktop/xdg_shell.c:364\r\n#6  0x00007f0612aa2d9c in wlr_signal_emit_safe (signal=signal@entry=0x558348bbf638, data=data@entry=0x558348bbf530)\r\n    at ../wlroots-9999/util/signal.c:29\r\n#7  0x00007f0612a88e3f in unmap_xdg_surface (surface=0x558348bbf530)\r\n    at ../wlroots-9999/types/xdg_shell/wlr_xdg_surface.c:34\r\n#8  0x00007f0612a893a5 in destroy_xdg_surface (surface=0x558348bbf530)\r\n    at ../wlroots-9999/types/xdg_shell/wlr_xdg_surface.c:456\r\n#9  0x00007f0612adad9e in destroy_resource (element=0x558348bbf680, data=<optimized out>, flags=0)\r\n    at /var/tmp/portage/dev-libs/wayland-1.15.0/work/wayland-1.15.0/src/wayland-server.c:688\r\n#10 0x00007f0612adf212 in for_each_helper (func=func@entry=0x7f0612adad30 <destroy_resource>,\r\n    data=data@entry=0x7fffe4b21124, entries=<optimized out>, entries=<optimized out>)\r\n    at /var/tmp/portage/dev-libs/wayland-1.15.0/work/wayland-1.15.0/src/wayland-util.c:372\r\n#11 0x00007f0612adf70f in wl_map_for_each (map=0x558348bb76f0, func=0x7f0612adad30 <destroy_resource>,\r\n    data=0x7fffe4b21124) at /var/tmp/portage/dev-libs/wayland-1.15.0/work/wayland-1.15.0/src/wayland-util.c:385\r\n#12 0x00007f0612adae9d in wl_client_destroy (client=client@entry=0x558348bb76c0)\r\n    at /var/tmp/portage/dev-libs/wayland-1.15.0/work/wayland-1.15.0/src/wayland-server.c:847\r\n#13 0x00007f0612adaf75 in destroy_client_with_error (reason=<optimized out>, client=<optimized out>)\r\n    at /var/tmp/portage/dev-libs/wayland-1.15.0/work/wayland-1.15.0/src/wayland-server.c:307\r\n#14 wl_client_connection_data (fd=<optimized out>, mask=<optimized out>, data=0x558348bb76c0)\r\n    at /var/tmp/portage/dev-libs/wayland-1.15.0/work/wayland-1.15.0/src/wayland-server.c:330\r\n#15 0x00007f0612adcb72 in wl_event_loop_dispatch (loop=0x55834859df10, timeout=timeout@entry=-1)\r\n    at /var/tmp/portage/dev-libs/wayland-1.15.0/work/wayland-1.15.0/src/event-loop.c:641\r\n#16 0x00007f0612adb33a in wl_display_run (display=0x5583485a0700)\r\n    at /var/tmp/portage/dev-libs/wayland-1.15.0/work/wayland-1.15.0/src/wayland-server.c:1260\r\n#17 0x000055834704d127 in main (argc=<optimized out>, argv=<optimized out>) at ../sway-9999/sway/main.c:446\r\n```\r\n\r\nmpv uses zwp_idle_inhibit_manager_v1, and it looks like it's still in the list of inhibitors. `view_is_visible` crashes because `view->container` is null:\r\n\r\n```\r\n(gdb) p *view\r\n$1 = {type = SWAY_VIEW_XDG_SHELL, impl = 0x558347099ac0 <view_impl>, container = 0x0, surface = 0x558348bcb770,\r\n  x = 1200, y = 220, width = 1920, height = 1200, saved_x = 0, saved_y = 0, saved_width = 0, saved_height = 0,\r\n  natural_width = 1280, natural_height = 720, title_format = 0x0, border = B_NORMAL, border_thickness = 0,\r\n  border_top = false, border_bottom = false, border_left = false, border_right = false, using_csd = false, urgent = {\r\n    tv_sec = 0, tv_nsec = 0}, allow_request_urgent = true, urgent_timer = 0x0, saved_buffer = 0x0,\r\n  saved_buffer_width = 1920, saved_buffer_height = 1200, geometry = {x = 0, y = 0, width = 1920, height = 1200},\r\n  saved_geometry = {x = 0, y = 0, width = 1920, height = 1200}, destroying = false,\r\n  executed_criteria = 0x558348ba75d0, marks = 0x558348bbde50, marks_focused = 0x0, marks_focused_inactive = 0x0,\r\n  marks_unfocused = 0x0, marks_urgent = 0x0, {wlr_xdg_surface_v6 = 0x558348bbf530, wlr_xdg_surface = 0x558348bbf530,\r\n    wlr_xwayland_surface = 0x558348bbf530, wlr_wl_shell_surface = 0x558348bbf530}, events = {unmap = {listener_list = {\r\n        prev = 0x558348bc6a50, next = 0x558348bc6a50}}}, surface_new_subsurface = {link = {prev = 0x0, next = 0x0},\r\n    notify = 0x55834707b130 <view_handle_surface_new_subsurface>}}\r\n```\r\n\r\nI didn't confirm it but assume it's null because `transaction_destroy` just destroyed it.\r\n\r\nI can no longer reproduce the crash after adding this extra check to `idle_inhibit_v1_check_active`.": {
        "sway/desktop/idle_inhibit_v1.c": 1
    },
    "Fix crash when clicking certain surfacesFixes #2345.\r\n\r\n`cont` was `NULL`.\r\n\r\nTo test, I ran `i3-input` then clicked the xwayland surface that appeared.": {
        "sway/input/cursor.c": 1
    },
    "Fix crash when closing last child of a tabbed containerThe crash only occurs if the mouse cursor is above the tabbed container when the last child is closed.\r\n\r\nIntroduced in 03d49490ccff3c5c81bea73622c8616fa61eb3dd, over a week ago and unnoticed until now :O\r\n\r\nThe above commit changes the behaviour of a focus change. When you change focus, it sends pointer motion which makes the client set a new cursor image. We already had this behaviour for workspace switching, but this commit adds it for view switching too, such as in a tabbed container or when closing a view.\r\n\r\nThe sequence of events that leads to the crash is:\r\n\r\n* The last child of a tabbed container unmaps, which triggers a `destroy` event before we've cleaned up the child or reaped the tabbed container.\r\n* The seat code listens to the `destroy` event and removes the seat container from the focus stack. As part of this, it decides to set focus to the parent (my fix alters this decision).\r\n* When setting focus to the new parent, the container motion is sent as per the previously mentioned commit.\r\n* The motion code uses `container_at`, which encounters the tabbed container and its child in a half destroyed state, and everything blows up from there.\r\n\r\n`con->parent` is needed because scratchpad containers don't have parents if they're hidden, so this probably fixes a crash when a hidden scratchpad container closes too.\r\n\r\nThe `con->parent->children->length > 1` check should catch any cases where the parent is about to be reaped.": {
        "sway/input/seat.c": 1
    },
    "Fix crash when defaut seat is not createdFunction input_manager_get_default_seat should always return a seat.\r\n\r\nFixes #2891.": {
        "sway/input/input-manager.c": 1
    },
    "Fix crash when disconnecting outputIf the output being disconnected contains views, and the views are being relocated to another output of a different size, a transaction must occur to reconfigure them. This means by the time `container_discover_outputs` is called, the output is already disabled and `wlr_output` is `NULL`.\r\n\r\nI considered making it check `output->wlr_output`, but `output->enabled` should work just as well and is more descriptive.\r\n\r\nUntested on DRM. Someone please test this on DRM before merging.\r\n\r\nFixes #2705.": {
        "sway/tree/container.c": 1
    },
    "Fix crash when ending tiling dragIf the container being dragged has a parent that needs to be reaped, it must be reaped after we've reinserted the dragging container into the tree. During reaping, `handle_seat_node_destroy` tries to refocus the dragging container which isn't possible while it's detached.\r\n\r\nFixes #2846.": {
        "sway/input/seat.c": 1
    },
    "Fix crash when flattening container after moving`container_flatten` removes the container from the tree (via `container_replace`) before destroying it. When destroying, the recent changes to `handle_seat_node_destroy` incorrectly assumes that the container has a parent.\r\n\r\nThis adds a check for destroying a container which is no longer in the tree. If this is the case, focus does not need to be changed.\r\n\r\nTo test, create layout `H[view T[view]]`, focus the tabbed view and run `move left`.\r\n\r\nFixes #2765": {
        "sway/input/seat.c": 1
    },
    "Fix crash when focusing from fullscreen in an invalid direction* Fullscreen a view\r\n* Run `focus <direction>` where there is no output in that direction\r\n\r\nThe output returned was rightfully `NULL`, which needs to be handled.\r\n\r\nFixes #2584.": {
        "sway/commands/focus.c": 1
    },
    "Fix crash when fullscreen view closes on inactive workspaceWhen a view unmaps, normally the surviving ancestor (ie. after reaping) needs to be arranged. When a fullscreen view unmaps, it arranges the workspace rather than the surviving ancestor, but didn't handle cases where the workspace itself was reaped. This happens if the workspace is not currently shown and the fullscreen view was the last container on that workspace.\r\n\r\nThis commit rewrites this part of `view_unmap` so it's more readable, and fixes the crash by not arranging the workspace if it's been reaped. Note that it no longer arranges the output under any circumstance - this wasn't required anyway.\r\n\r\nFixes the second part of #2412.": {
        "sway/tree/view.c": 1
    },
    "Fix crash when moving a container to a fullscreen workspaceSetting normal focus to the fullscreen view causes the old workspace to start destroying. We then set focus to the old workspace which is no longer attached in the tree.\r\n\r\nAs we are only setting `focus_inactive` on the fullscreen container, the fix uses `seat_set_raw_focus` to avoid all the additional behaviour that comes with it such as destroying the old workspace.\r\n\r\nFixes #2915.": {
        "sway/commands/move.c": 1
    },
    "Fix crash when moving cursor over a fullscreen split containerCalling `container_at_view` fails an assertion if the container isn't a view. Calling `tiling_container_at` works correctly, as that function checks if the container is a view and calls `container_at_view` if so.\r\n\r\nTo test:\r\n\r\n* Fullscreen mpv and interact with the UI\r\n* Fullscreen a split container where one of them is mpv and interact with the UI": {
        "include/sway/tree/container.h": 1,
        "sway/input/cursor.c": 1,
        "sway/tree/container.c": 1
    },
    "Fix crash when moving view across outputsIt was incorrectly determining that the container being moved and the destination had the same parent, which resulted in tree corruption. Both parents can be `NULL` but the containers may belong to different\r\nworkspaces.\r\n\r\nTo reproduce, create layout `H[V[view] view]` in one workspace then move a view left or right from another output into that workspace.\r\n\r\nFixes #2581.": {
        "sway/commands/move.c": 1
    },
    "Fix crash when quitting a QT app on the wayland backend using menuQT unmaps the view before destroying the popup. We destroyed the popup in response to the view unmapping, but then we'd attempt to destroy it a second time which caused a crash.\r\n\r\nThe patch removes the listener.\r\n\r\nI tested it with GTK as well, and can confirm the popup is still being destroyed.\r\n\r\nFixes #2908.": {
        "include/sway/tree/view.h": 1,
        "sway/tree/view.c": 1
    },
    "Fix crash when reaping a workspaceIt wasn't returning the surviving container.\r\n\r\nTo reproduce, open a terminal in a workspace with no siblings, run `sleep 2 && exit` then switch to another workspace during the sleep.": {
        "sway/tree/container.c": 1
    },
    "Fix crash when resizing container hidden in the scratchpadFirstly, the container was wrongly identifying as a tiling container because it had no workspace.\r\n\r\nSecondly, when calculating the maximum possible size we can't use the workspace if it's not there, so we'll allow unlimited size in this case.\r\n\r\nWe should probably use the `config->floating_maximum_{width,height}`, but I feel the resize constraints needs to be refactored anyway and I just want to fix the crash for now.\r\n\r\nFixes #2928.": {
        "sway/commands/resize.c": 1,
        "sway/tree/container.c": 1
    },
    "Fix crash when running \"layout toggle\"The `argc` and `argv` used in this function are the same ones used by the layout command itself.": {
        "sway/commands/layout.c": 1
    },
    "Fix crash when running `move container to workspace back_and_forth`The back_and_forth condition is intended to be handled in the else-if block, but this was never reached because it remained in the first block's conditions.\r\n\r\nTo test, run `move container to workspace back_and_forth` when no other workspaces exist.": {
        "sway/commands/move.c": 1
    },
    "Fix crash when running deferred commandsFixes #2541": {
        "sway/input/seat.c": 1
    },
    "Fix crash when switching to new workspace during transactionWhen rendering, the workspace for the output needs to be retrieved from the output's `current` state. `output_get_active_workspace` returns the pending workspace, which crashes if the pending workspace is new and hasn't completed a transaction yet.\r\n\r\nFixes #2588.": {
        "sway/desktop/render.c": 1
    },
    "Fix crash when unmapping last child of a tabbed workspace* Create layout `T[view view]`\r\n* Move the cursor into the title bar area\r\n* Close both views\r\n\r\nSway would crash because `container_at_tabbed` would attempt to divide by zero when there are no children.\r\n\r\nThe children check isn't needed for `container_at_stacked` because it doesn't divide anything by the number of children.\r\n\r\nFixes #2636.": {
        "sway/tree/container.c": 1
    },
    "Fix crash when using workspace back_and_forth with no previousFixes #2851.": {
        "sway/commands/workspace.c": 1
    },
    "Fix crash when view maps while lockedWhen locked, there is no active workspace so it must find the `focus_inactive` workspace instead.\r\n\r\nTo reproduce:\r\n\r\n* Open a terminal and run `sleep 3 && urxvt` (or some other client)\r\n* While the sleep is happening, lock the screen\r\n\r\nAdditionally, this adds a check for if a view maps while there are no outputs connected and handles it gracefully.\r\n\r\n* Same as above, but run it with the Wayland backend and close the output window while it's sleeping.\r\n* Use IPC to run `create_output`\r\n* I noticed some positional issues after restore when the output has a non-zero position, but will resolve this separately.\r\n\r\nFixes #2827.": {
        "sway/tree/arrange.c": 1,
        "sway/tree/view.c": 1
    },
    "Fix crash when view unmaps while no outputs connectedWhen a view unmaps, we call `workspace_consider_destroy`. This function assumed the workspace would always have an output, but this is not the case when hotplugged down to zero. The function now handles this and allows itself to be destroyed when there is no output.\r\n\r\nThis means that `workspace_begin_destroy` must remove the workspace from the `root->saved_workspaces` list to avoid an eventual dangling pointer, so it does that now.\r\n\r\nLastly, when an output is plugged in again and it has to create a new initial workspace for it, we must emit the `workspace::init` IPC event otherwise swaybar shows no workspaces at all. I guess when you start sway, swaybar is started after the workspace has been created which is why this hasn't been needed earlier.\r\n\r\nTo test:\r\n\r\n* Run sway in a nested session.\r\n* Open a terminal and run `sleep 3 && exit`.\r\n* While sleeping, close the output window from your DRM session.\r\n* Let the sleep finish, watch the debug log, ensure no crash.\r\n* Use IPC to connect to the nested session's socket and run `create_output`.\r\n* See output window, with swaybar and one empty workspace.\r\n\r\nFixes #2841.": {
        "sway/tree/output.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Fix crash when views rapidly map and unmapSuppose the following:\r\n\r\n* Transactions are already in progress - say transaction A.\r\n* View A maps, which creates transaction B and appends it to the transaction queue.\r\n* View B maps, which creates transaction C and appends it to the queue.\r\n* View A unmaps, which creates transaction D and appends it to the queue.\r\n* Transaction A completes, so transaction B attempts to save View A's buffer, but this doesn't exist so it saves nothing.\r\n* Rendering code attempts to render View A, but there is no saved buffer nor live buffer that it can use.\r\n\r\nRather than implement an elaborate solution for a rare circumstance, I've take the safe option of just not rendering anything for that view. It means that if you reproduce the scenario above, you might get the title and borders rendered but no surface.\r\n\r\nFixes #2527.": {
        "sway/desktop/render.c": 1
    },
    "Fix crashes when running certain commands on an empty workspaceThis fixes crashes when running the `border`, `mark`, `unmark` and `title_format` commands on an empty workspace.": {
        "sway/commands/border.c": 1,
        "sway/commands/mark.c": 1,
        "sway/commands/title_format.c": 1,
        "sway/commands/unmark.c": 1
    },
    "Fix default_orientation autoFixes #3156 \r\n\r\nSince the output config is no longer applied before creating the default workspace, the layout for default workspaces on an output may not be correct. Due to the ordering of calls in output_enable being changed in several bug fix PRs, this just fixes the layout after the call to apply_output_config.": {
        "sway/tree/output.c": 1
    },
    "Fix documentation of output": {
        "sway/sway.5.scd": 1
    },
    "Fix dormant cursor when using multiple seatsThe cursor's image would be removed or set when the seat's capabilities were updated, but there was nothing to prevent the image from being set at other times.\r\n\r\nTo test:\r\n\r\n* Have `seat seat1 attach \"1:1:AT_Translated_Set_2_keyboard\"` in your config.\r\n* Launch sway on DRM.\r\n* The cursor's position will be in the top left of an output. Move it away and note there is only one cursor at the moment.\r\n* Launch a view on that output then close the view.\r\n* A second cursor would appear in the top left in response to the view unmapping.\r\n\r\nFixes #2921.": {
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1
    },
    "Fix double free of mode`config->current_mode` is a pointer into the `config->modes` list, and each mode has already been freed earlier in the function.\r\n\r\nSame with bars.\r\n\r\nFixes #3129.": {
        "sway/config.c": 1
    },
    "Fix double free when unmapping any viewFixes #3127.": {
        "sway/decoration.c": 1
    },
    "Fix double iterating in container_for_each_child": {
        "sway/tree/container.c": 1
    },
    "Fix double iteration of scratchpad containers`root_for_each_container` and `root_find_container` were using incorrect logic to determine if a container was hidden in the scratchpad. Containers will have a `NULL` parent if they are a direct child of a workspace. Containers will have a `NULL` workspace if they are hidden in the scratchpad.\r\n\r\nThe incorrect check meant that `root_for_each_container` would run the callback on scratchpad containers twice. This meant that executing a command such as `[class=\"$something\"] scratchpad show` would cause the command to run twice, resulting in the container being shown and hidden again which is effectively a no op.\r\n\r\nFixes #2655.": {
        "sway/tree/root.c": 1
    },
    "Fix drag-and-drop* Use surface `sx` and `sy` instead of `wlr_drag_icon` fields which have been removed\r\n* End `DOWN` mouse operation when dragging\r\n\r\nTest plan: `weston-dnd`": {
        "sway/desktop/output.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1
    },
    "Fix edge gapsFixes [Issue: Fix or remove edge_gaps](https://github.com/swaywm/sway/issues/2727) by removing them and allowing negative values for `gaps outer` just the way i3 does it.\r\n\r\nWhile this change allows negative values for the outer gaps to essentially negate `gaps inner` it does not allow to set it lower than the negated `gaps inner` value to prevent windows from ending up outside the container.\r\n\r\nThis pull request may result in issues with the -1 token value in `workspace_config` struct, if you see this going wrong please give me some pointers on how to go about fixing and testing that.": {
        "include/sway/config.h": 1,
        "sway/commands/gaps.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/config.c": 1,
        "sway/sway.5.scd": 1,
        "sway/tree/workspace.c": 1
    },
    "Fix floating click events* Set focus to a floating container when clicking its title bar.\r\n* Raise floating when user clicks title bar or decorations (in the `seat_begin` functions).\r\n* In `container_at`, it only returned a floating container if the user had clicked the surface. This makes it use `floating_container_at` instead.\r\n\r\nI have tested using `focus_follows_mouse` and `raise_floating` and it seems to work correctly.\r\n\r\nFixes #2801.": {
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/container.c": 1
    },
    "Fix floating views in tabbed/stacked workspaces not getting frame events`view_is_visible` would return false, which meant the view wouldn't receive a frame done event. `view_is_visible` needs to make an exception for floating containers.\r\n\r\nThis also moves the `workspace_is_visible` check to an earlier location for performance reasons.\r\n\r\nFixes #2659.": {
        "sway/tree/view.c": 1
    },
    "Fix focus after a non-visible workspace's last container is destroyedThe code being changed is responsible for updating the focus stack when a container is destroyed in a different part of the tree to where the real focus is. It's attempting to set focus_inactive to a sibling (or\r\nparent if no siblings) of the container that is being destroyed, then put our real focus back on the end of the focus stack.\r\n\r\nThe problem occurs when the container being destroyed is in a different workspace. For example:\r\n\r\n* Have a focused view on workspace 1\r\n* Have workspace 2 not visible with a single view that is unmapping\r\n* The first call to `seat_set_raw_focus` sets focus to workspace 2 because it's the parent\r\n* Prior to this patch, the second call to `seat_set_raw_focus` would set focus to the view on workspace 1\r\n* Later, when using `output_get_active_workspace`, this function would return workspace 2 because it's the first workspace it finds in the focus stack.\r\n\r\nTo fix this, workspace 1 must be placed on the focus stack between workspace 2 and the focused view. That's what this patch does.\r\n\r\nLastly, it also uses `seat_get_focus_inactive` to choose the focus. This fixes a crash when a view unmaps while a non-container is focused (eg. swaylock), because `focus` is `NULL`.\r\n\r\nFixes #2951.\r\nSupersedes/closes #2958.": {
        "sway/input/seat.c": 1
    },
    "Fix focus related crashesFixes #2402.\r\n\r\n* `seat_set_focus_warp` lacked a container `NULL` check\r\n* view mapping code needs to use `seat_get_focus_inactive`\r\n\r\nAlso, `seat_set_focus_warp` triggered the wrong IPC event if focus was a workspace, which resulted in swaybar not showing the workspace as active.\r\n\r\nTo test, I opened a terminal, ran `sleep 2 && firefox`, then locked the screen before the sleep finished.": {
        "sway/input/seat.c": 1,
        "sway/tree/view.c": 1
    },
    "Fix focus when clicking floating decorationsFixes #2431.\r\n\r\nIt's not right for `container_at_view` to only return the swayc if a surface was clicked. It needs to also return the swayc if the decorations are clicked.\r\n\r\nNote that `container_at_view` will now always return the swayc, so it assumes you've done a box check already. This seems like a safe assumption as I can't fault it.\r\n\r\nTo test, float a view which has title decorations then click the title. The floating view should be become focused.": {
        "sway/input/cursor.c": 1,
        "sway/tree/container.c": 1
    },
    "Fix focus_wrapping yesFixes #3064 \r\n\r\nIt appears that the focus code that handles `focus_wrapping yes` was removed during the conversion to type safety. This re-implements the focus code for when `focus_wrapping` is set to `yes` (default). Neither the `no` or `force` options appear to be effected and should be working.": {
        "sway/commands/focus.c": 1
    },
    "Fix fullscreen command and improve documentationThe first commit fixes a problem that I have when using the following keybinding on an empty workspace\r\n\r\n`bindsym Mod4+v fullscreen disable,exec termite -e pulsemixer`.\r\n\r\nWith this binding I want to open an application but in case that another view is currently in fullscreen mode, it should leave fullscreen mode first. This does not work on an empty Workspace, because `fullscreen disable` returns with error status `CMD_INVALID` and then the following exec command will not be executed (cf. https://github.com/swaywm/sway/blob/master/sway/commands.c#L307).\r\nIn i3 this binding works on empty workspaces.\r\n\r\nThe second commit documents the optional arguments of the fullscreen command, which can be found in i3's documentation too.": {
        "sway/commands/fullscreen.c": 1,
        "sway/sway.5.scd": 1
    },
    "Fix gaps in title textures and vertically center themThere was code that attempted to fill in the gap below the title texture when the texture isn't tall enough, but this only worked when the output was positioned at 0,0. The reason is that `render_rect` expects a box passed in a hybrid layout-local/output-buffer-local system, and we were passing purely output-buffer-local. I've added a comment documenting the expected format.\r\n\r\nBy the way, we can't use layout-local coordinates for the rectangle box because in some cases we set the box based on a texture size. Texture sizes are buffer-local, and we'd have to divide them to bring it back to layout-local which means losing precision. We could use output-buffer-local coordinates for the box, but this would require translating the coordinates from layout-local to output-buffer-local in many places during rendering.\r\n\r\nThis patch also vertically centers the text inside the title bar.\r\n\r\nI've tested this with the following:\r\n\r\n* Outputs with a position other than 0,0\r\n* Scaled outputs\r\n* Marks\r\n\r\nFixes #2455.": {
        "common/pango.c": 1,
        "include/pango.h": 1,
        "include/sway/config.h": 1,
        "include/sway/tree/container.h": 1,
        "sway/config.c": 1,
        "sway/debug-tree.c": 1,
        "sway/desktop/render.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1,
        "swaybar/render.c": 1,
        "swaynag/render.c": 1
    },
    "Fix geometryThe only issue I've found with this PR is alacritty flickers while resizing. I think the content area might be a subsurface, and we don't save or render subsurfaces during transactions. From what I've read in the alacritty project their Wayland support is pretty beta.\r\n\r\nMy testing includes {floating,tiling} {gedit,alacritty,urxvt} and testing {pointer events,moving,resizing}. Urxvt is included to make sure I didn't break anything with views which use normal borders and no geometry.\r\n\r\nFixes #2178\r\n\r\nFixes #2476": {
        "include/sway/desktop.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/desktop/desktop.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Fix hotplugging down to zero outputsWhen the last output is disconnected, `output_disable` is called like usual and evacuates the output to the `root->saved_workspaces` list. It then calls `root_for_each_container` to remove (untrack) the output from each container's outputs list. However, `root_for_each_container` did not iterate the saved workspaces, so when the output gets freed the containers would have a dangling pointer in their outputs list. Upon reconnect, `container_discover_outputs` would attempt to use the dangling pointer, causing a crash.\r\n\r\nThis makes `root_for_each_container` check the saved workspaces list, which fixes the problem. It also adds it to `root_find_container` for good measure.": {
        "sway/tree/root.c": 1
    },
    "Fix infinite loop when focusing sticky containers via workspace commandIn a multi-output setup, if a sticky container is on one output and focus is on the other output, and you run (eg) `workspace 1` to focus the workspace containing the sticky container, an infinite loop would occur. It would loop infinitely because it would remove the sticky container from the workspace, add it back to the same workspace, and then decrement the iterator variable.\r\n\r\nThe fix just wraps the loop in a workspace comparison.": {
        "sway/tree/workspace.c": 1
    },
    "Fix json object ipc success returnPull request https://github.com/swaywm/sway/pull/3206 seems to have broken the expected json success return values so that existing ipc tooling won't work (eg. it turned an object into an object wrapped in an array).": {
        "sway/ipc-server.c": 1
    },
    "Fix jumping viewsFixes #2490.\r\n\r\nTo be honest I'm not sure why this fixes the issue.\r\n\r\nI observed that I could only make the view jump if I resized it to the smallest possible size first. Then I had a suspicion that we were accidentally factoring in the title and border sizes into the view size when it uses CSD. So I changed that and it appears to have fixed the jumping issue.\r\n\r\nI guess when we factor the title and borders in, we send a configure to the surface with a size smaller than the minimum, and it comes back with a surface at the minimum size. We interpret this as an unexpected resize, and this somehow makes it jump.": {
        "sway/tree/view.c": 1
    },
    "Fix logic used for mouse_warping outputTurns out we don't need to store the previous focus, and it should be based on which output the cursor was in.\r\n\r\nFixes #2881": {
        "include/sway/input/seat.h": 1,
        "sway/input/seat.c": 1
    },
    "Fix management of bindings during reload`seat_execute_command` needs to check the flags on `binding_copy`, as `binding` will be a dangling pointer after a reload command.\r\n\r\n`handle_keyboard_key` needs to set the `next_repeat_binding` for non-reloads prior to executing the command in case the binding is freed by the reload command.": {
        "sway/commands/bind.c": 1,
        "sway/input/keyboard.c": 1
    },
    "Fix memory leak in swaynag": {
        "swaynag/swaynag.c": 1
    },
    "Fix memory leaks in get_socketpathOccurs very infrequently, such as calling swaymsg from i3": {
        "common/ipc-client.c": 1
    },
    "Fix missing IPC scratchpad replies/move eventsThis matches i3's behavior:\r\n- triggers window::move events when containers are moved to scratchpad or when scratchpad is shown\r\n- adds all hidden scratchpad containers to get_tree reply \r\n\r\nFixes #3159": {
        "sway/ipc-json.c": 1,
        "sway/tree/root.c": 1
    },
    "Fix mod+resizeFixes #2479.\r\n\r\nIt was missing a `mod_pressed` check.\r\n\r\nThis also moves the parent traversal into the `if` block.": {
        "sway/input/cursor.c": 1
    },
    "Fix mouse warping containerFor the drm backend the pointer would warp to 0,0 on window if `mouse_warping container` was set.\r\nCheck that the pointer does not warp to 0,0 and move the arrange functions into `view_map`.\r\nThis is actually a decrease in code size, if somebody has a fancier idea than passing `fullscreen` and `decoration` as arguments, I'm all for it. The cursor now correctly warps to the middle of the newly created window.\r\n\r\nEdit: codestyle has not been fixed thoroughly, will do that when I can remove the [WIP] comment.": {
        "include/sway/input/cursor.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/view.c": 1
    },
    "Fix moving container to inactive workspace on different outputWhen moving a container to an inactive workspace on a different output, this will change the focus on the destination output back to its last active workspace.\r\n\r\nAlso includes a few code cleanups.\r\n\r\n~Edit: need to add a check that `new_output_last_ws != destination_ws`~": {
        "sway/commands/move.c": 1
    },
    "Fix moving tiled containers to workspaces which only have floating views* Make a workspace which only contains floating views\r\n* Switch to another workspace and create a tiled view\r\n* Move the tiled view to the workspace with `move container to workspace N`\r\n\r\nThe container would be added as a sibling to the floating view, which makes the container floating while having the geometry of a tiled container.\r\n\r\nThis changes it so it only looks for tiled containers in the workspace with a fallback to the workspace itself.\r\n\r\nProbably fixes #2857 but my symptoms are different to the ones reported in that issue. @c-edw Can you please test if this fixes your issue?": {
        "sway/commands/move.c": 1
    },
    "Fix output wildcard handlingFixes #1724 \r\nFixes #2127 \r\nFixes #2295 \r\n(Any others that I'm missing?)\r\n\r\nThis PR fixes issues related to `output *`.\r\n\r\nInstead of applying the wildcard config directly to the output, the wildcard config is merged on top of the config for the output and that is then applied (falling back to the wildcard config). Additionally, when creating a non-wildcard config, it is merged on top of a copy of the wildcard config (if existent).\r\n\r\nOutput layout is no longer lost. This was due to an `output *` command being after the `output <name>` commands. When applying the `output *` config, the following snippet was changing it to auto positioning:\r\n```c\r\nif (oc && (oc->x != -1 || oc->y != -1)) {\r\n\twlr_log(WLR_DEBUG, \"Set %s position to %d, %d\", oc->name, oc->x, oc->y);\r\n\twlr_output_layout_add(output_layout, wlr_output, oc->x, oc->y);\r\n} else {\r\n\twlr_output_layout_add_auto(output_layout, wlr_output);\r\n}\r\n```\r\nSince the `output *` config is never applied directly to the output (unless there is not an output config for the output), the positions in the config should be respected.\r\n\r\nSetting the dpms state on a specific output should also work now. Before it would only work if there was a background specified by the output due to the following block changing the config before applying dpms:\r\n```c\r\nif (!oc || !oc->background) {\r\n\t// Look for a * config for background\r\n\tint i = list_seq_find(config->output_configs, output_name_cmp, \"*\");\r\n\tif (i >= 0) {\r\n\t\toc = config->output_configs->items[i];\r\n\t} else {\r\n\t\toc = NULL;\r\n\t}\r\n}\r\n/// DPMS applied below this point\r\n```": {
        "include/sway/config.h": 1,
        "sway/commands/output.c": 1,
        "sway/config/output.c": 1
    },
    "Fix overflow in strcpyCompiling current master:\r\n```\r\nIn function \u2018strcpy\u2019,\r\n    inlined from \u2018get_text_size\u2019 at ../sway-9999/common/pango.c:95:3:\r\n/usr/include/bits/string_fortified.h:90:10: error: \u2018__builtin___memcpy_chk\u2019 writing 18 bytes into a region of size 8 overflows the destination [-Werror=stringop-overflow=]\r\n   return __builtin___strcpy_chk (__dest, __src, __bos (__dest));\r\n          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nIn function \u2018strcpy\u2019,\r\n    inlined from \u2018pango_printf\u2019 at ../sway-9999/common/pango.c:115:3:\r\n/usr/include/bits/string_fortified.h:90:10: error: \u2018__builtin___memcpy_chk\u2019 writing 18 bytes into a region of size 8 overflows the destination [-Werror=stringop-overflow=]\r\n   return __builtin___strcpy_chk (__dest, __src, __bos (__dest));\r\n          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n```\r\nIntroduced in #2843 \r\n\r\nCause:\r\n```c\r\nchar* overflow = \"[buffer overflow]\";\r\nsizeof(overflow); /* = sizeof(char*) = 8 (WRONG) */\r\n```\r\n```c\r\nchar overflow[] = \"[buffer overflow]\";\r\nsizeof(overflow); /* = 18 (CORRECT) */\r\n```\r\nFixes #2863 ": {
        "common/pango.c": 1
    },
    "Fix pango escaping and refactor escape_markup_textFixes #2674.\r\n\r\nThe cause of the issue was in `get_pango_layout`. When we call `pango_parse_markup`, `text` is the escaped string, and the unescaped string is then computed and written to `buf`. We were then passing the unescaped string to `pango_layout_set_markup`, but this function needs the escaped string. `buf` is not needed and has been removed.\r\n\r\nThe other part of this PR refactors `escape_markup_text` to remove the `dest_length` argument and removes the -1 return value on error. It now assumes that you've allocated `dest` to the correct length.\r\n\r\nIf someone knowledgeable in Pango could review and confirm that that what I've done is right then it would be appreciated, as I'm not super confident.\r\n\r\nMy testing includes:\r\n* Opening the above issue in Firefox, as it has an ampersand in the title\r\n* Enabling a bar's `pango_markup` directive and then running `rename workspace to te<b>st</b>`": {
        "common/pango.c": 1,
        "include/pango.h": 1,
        "sway/tree/view.c": 1
    },
    "Fix pango title escapingThis commit fixes two bugs.\r\n\r\nFirst, commit [1] has inverted the condition when we escape pango markup. We\r\nneed to escape client-provided strings when markup is enabled.\r\n\r\nSecond, parse_title_format has a shortcut when title_format is set to `%title`,\r\nand escape_pango_markup wasn't used anymore there.\r\n\r\nFixes https://github.com/swaywm/sway/issues/3181\r\n\r\n[1]: https://github.com/swaywm/sway/pull/3179/commits/caee2dff03fc007dc46cf121e013f5347ac46ba9": {
        "sway/tree/view.c": 1
    },
    "Fix pixel leaks when using fractional scalingThe basic idea here is to apply rounding after scaling. It's not as simple as this, though, and I've detailed it in the comments for a function.\r\n\r\nIn order to fix some pixel leaks in the title bar, I found it easier to change how we place rectangles to fill the area. Instead of placing two rectangles across the full width above and below the title and having shorter rectangles in the inner area, it's now pieced together in vertical chunks. This method involves drawing two less rectangles per container.\r\n\r\nI've done some pretty thorough testing, including:\r\n\r\n* Testing with scale 1, scale 2, scale 1.4\r\n* Testing with semi-transparent containers to make sure we're not rendering over the same pixels twice\r\n* Testing with output positions that are not 0,0\r\n* Testing with containers in different parts of the screen (to clarify: some pixel gaps would appear in one spot for one container but not for another container due to its position within the output and rounding).\r\n* Testing with tabbed and stacking layouts\r\n* Testing with marks\r\n* Testing with titles that are truncated due to overflowing the title bar width\r\n* Testing with titles that are truncated due to overflowing into the mark texture\r\n\r\nFixes #2813": {
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1
    },
    "Fix pointer events for fullscreen viewsLeftover from https://github.com/swaywm/sway/pull/2410\r\n\r\nTo test, open mpv in fullscreen mode and try to use the UI with the mouse.": {
        "include/sway/tree/container.h": 1,
        "sway/input/cursor.c": 1,
        "sway/tree/container.c": 1
    },
    "Fix pointer events for overlapping floating viewsFixes #2315.": {
        "sway/tree/container.c": 1
    },
    "Fix popup damage issues when toplevel and/or popup uses geometryThe `wlr_xdg_popup_get_toplevel_coords` function has the following quirks:\r\n\r\n* It does not do anything with the coordinates of the passed popup. Instead, we are required to add them ourselves, which we do by passing them to the function as the surface local values.\r\n* It adds the geometry (shadows etc) of the toplevel itself, so the coordinates are surface local rather than content local. For this reason, we have to negate the toplevel's geometry (`child->view->geometry`).\r\n* I may be wrong, but the popup positions appear to be stored in surface local coordinates rather than content local coordinates. The geometry (shadows etc) of the popup itself must be negated (`surface->geometry`).\r\n\r\nFixes #2893.": {
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1
    },
    "Fix popup position when parent uses geometryFixes #2489.": {
        "sway/desktop/output.c": 1
    },
    "Fix popups (v2)Fixes the render and `container_at` order for popups.\r\n\r\nFixes #2210\r\n\r\nFor rendering:\r\n\r\n* `render_view_surfaces` has been renamed to `render_view_toplevels`\r\n* `render_view_toplevels` now uses `output_surface_for_each_surface` (which is now public), as that function uses `wlr_surface_for_each_surface` which doesn't descend into popups\r\n* Views now have a `for_each_popup` iterator, which is used by the renderer to render the focused view's popups\r\n* When rendering a popup, toplevels (xdg subsurfaces) of that popup are also rendered\r\n* Popups are now rendered on top of all containers\r\n\r\nFor sending frame done, the logic has been updated to match the rendering logic:\r\n\r\n* `send_frame_done_container` no longer descends into popups\r\n* `for_each_popup` is used to send frame done to the focused view's popups and their child toplevels\r\n\r\nFor `container_at`:\r\n\r\n* `floating_container_at` is now static, which means it had to be moved higher in the file.\r\n* `container_at` now considers popups for the focused view before checking containers.\r\n* `tiling_container_at` has been introduced, so that it doesn't call `container_at` recursively (it would check popups recursively if it did)": {
        "include/sway/output.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Fix popups v3The first commit reverts the revert. The second commit fixes the issue.": {
        "include/sway/output.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/input/cursor.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Fix program name in version stringsWhen running `swaymsg -v`, the version returned is actually the version of swaymsg itself, yet the message displayed was `sway version <version>`. This can create confusion if users update sway and swaymsg but don't restart sway, then use swaymsg to check the version.\r\n\r\nThis patch changes the wording to be `swaymsg version <version>` instead, and likewise for swaybar.\r\n\r\nTo get the version of a running sway instance, users should run `swaymsg -t get_version`.": {
        "swaybar/main.c": 1,
        "swaymsg/main.c": 1
    },
    "Fix race condition crash when view unmaps + maps quicklyWhen a view unmaps, we start a transaction to destroy the container, then when the transaction completes we destroy the container and unset the view's container pointer. But if the view has remapped in the meantime, the view's container pointer will be pointing to a different container which should not be cleared.\r\n\r\nThis adds a check to make sure the view is still pointing to the container being destroyed before clearing the pointer. The freeing of the title format is also removed as it is already freed when the view destroys in `view_destroy`.\r\n\r\nFixes #2710.": {
        "sway/tree/container.c": 1
    },
    "Fix race condition crashes when unmapping viewsThis fixes two issues which were both introduced in #2396.\r\n\r\nFirst issue:\r\n\r\nThe PR changes the location of the buffer save to `transaction_apply`, but puts it inside the `should_configure` block. For unmapping (destroying) views, `should_configure` returns false so it wasn't saving the buffer. If a frame was rendered between the unmap and the transaction applying then it would result in a crash.\r\n\r\nSecond issue:\r\n\r\nIf a destroying view is involved in two transactions, we must not release the buffer between the transactions because there is no live buffer to grab any more.\r\n\r\nTo test, create layout `H[view, V[view, view]]` then kill the vertical split container.": {
        "sway/desktop/transaction.c": 1
    },
    "Fix re-tiling for floating containersWhen a floating container is tiled (e.g.: 'floating toggle' or\r\n'floating disable'), it should be placed after/below the inactive\r\nfocused container from the tiling layout.\r\n\r\nFixes #2866 ": {
        "sway/tree/container.c": 1
    },
    "Fix rendering of nested tabsFixes this comment: https://github.com/swaywm/sway/pull/2533#issuecomment-416820583\r\n\r\nThe `C_CONTAINER` check needs to apply to `C_VIEW` as well.": {
        "sway/desktop/transaction.c": 1
    },
    "Fix scratchpad segfault - NULL focused workspaceFixes #3203 \r\n\r\nWhen adding a container to the scratchpad, it was possible for focus to be removed from the seat. This occurred when a single child was moved from it's parent to the scratchpad due to the focus_inactive for the parent being NULL. If the focus_inactive for the parent is NULL, the focus_inactive for the workspace should be focused.": {
        "sway/tree/root.c": 1
    },
    "Fix segfault in dispatch_cursor_buttonFixes https://github.com/swaywm/sway/issues/3131": {
        "sway/input/cursor.c": 1
    },
    "Fix segfault in output_renderFixes #2648": {
        "sway/desktop/render.c": 1
    },
    "Fix segfault when destroying unmapped child viewFixes https://github.com/swaywm/sway/issues/3210": {
        "include/sway/tree/view.h": 1,
        "sway/tree/view.c": 1
    },
    "Fix segfault when executing command without focusThis happens because I have [a daemon](https://github.com/emersion/kanshi) executing commands on hotplug (changing output configuration). I think there's a state in which there's no output and my daemon sends commands. Sway crashes with:\r\n\r\n```\r\n#0  0x000055d0dd0d7a11 in set_config_node (node=0x0) at ../sway/commands.c:218\r\n#1  0x000055d0dd0d77aa in execute_command (_exec=0x55d0dd5b0100 \"output LVDS-1 enable position 0,0 resolution 1600x900 scale 1\", seat=0x55d0dd93bbf0) at ../sway/commands.c:317\r\n#2  0x000055d0dd0e1201 in ipc_client_handle_command (client=0x55d0ddc32090) at ../sway/ipc-server.c:583\r\n#3  0x000055d0dd0e0e53 in ipc_client_handle_readable (client_fd=54, mask=1, data=0x55d0ddc32090) at ../sway/ipc-server.c:261\r\n#4  0x00007f0da3791702 in wl_event_loop_dispatch () at /home/simon/src/sway/build/sway/../../../../../../lib64/libwayland-server.so.0\r\n#5  0x00007f0da37902ac in wl_display_run () at /home/simon/src/sway/build/sway/../../../../../../lib64/libwayland-server.so.0\r\n#6  0x000055d0dd0e4eaa in server_run (server=0x55d0dd13b960 <server>) at ../sway/server.c:165\r\n#7  0x000055d0dd0e3f12 in main (argc=1, argv=0x7ffd3a9168f8) at ../sway/main.c:447\r\n```": {
        "sway/commands.c": 1
    },
    "Fix segfault with fullscreenIntroduced in #2367": {
        "sway/desktop/output.c": 1
    },
    "Fix sending fullscreen event to viewFixes #2504": {
        "sway/tree/container.c": 1
    },
    "Fix smart gapsFixes #2653 \r\n\r\nThis PR should make it so `smart_gaps` works identical to how it does in `i3-gaps`.\r\n\r\nSince `i3-gaps` does not allow for floating containers (only floating views), there is no behaviour to replicate. Currently, each floating container gets treated as a separate group and will apply gaps accordingly.": {
        "include/sway/tree/view.h": 1,
        "sway/input/seat.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Fix some cases where the cursor doesn't update`cursor_set_image` only uploads the named image if it doesn't match the previous named image. This means when setting the cursor image to a surface as given by a client (ie. not named), we have to clear the `cursor->image` property.\r\n\r\nTo test, open a window that sets a different cursor (eg. open a terminal and see the I-beam/text cursor) then switch to a new workspace. The cursor would not update, but now it changes to the regular pointer.": {
        "sway/input/cursor.c": 1
    },
    "Fix sway crash on new keyboardSway sometime crashes when attaching a new keyboard.\r\n\r\nFollowing is the backtrace:\r\n\r\n```\r\n#0  0x0000000000423051 in seat_node_from_node (seat=0x21665f0, node=0x0) at ../sway/input/seat.c:195\r\n#1  0x0000000000424294 in seat_set_raw_focus (seat=0x21665f0, node=0x0) at ../sway/input/seat.c:635\r\n#2  0x0000000000423038 in handle_seat_node_destroy (listener=0x29f8450, data=0x29f8280) at ../sway/input/seat.c:189\r\n#3  0x0000000000440fd2 in wl_signal_emit (signal=0x29f82b0, data=0x29f8280) at /usr/include/wayland-server-core.h:468\r\n#4  0x0000000000441315 in container_begin_destroy (con=0x29f8280) at ../sway/tree/container.c:90\r\n#5  0x000000000044797a in view_unmap (view=0x29f6fa0) at ../sway/tree/view.c:635\r\n#6  0x000000000044d4f3 in handle_unmap (listener=0x29f7230, data=0x28ae810) at ../sway/desktop/xwayland.c:383\r\n#7  0x00007f8ae971f4b9 in wlr_signal_emit_safe (signal=0x28ae988, data=0x28ae810) at ../util/signal.c:29\r\n#8  0x00007f8ae96d0be6 in xsurface_unmap (surface=0x28ae810) at ../xwayland/xwm.c:763\r\n#9  0x00007f8ae96cf82c in xwayland_surface_destroy (xsurface=0x28ae810) at ../xwayland/xwm.c:301\r\n#10 0x00007f8ae96d22b6 in xwm_destroy (xwm=0x2984410) at ../xwayland/xwm.c:1419\r\n#11 0x00007f8ae96ce18d in xwayland_finish_server (wlr_xwayland=0x2188370) at ../xwayland/xwayland.c:165\r\n#12 0x00007f8ae96ce33f in handle_client_destroy (listener=0x2188388, data=0x2960ef0) at ../xwayland/xwayland.c:224\r\n#13 0x00007f8ae975d7cd in  () at /lib64/libwayland-server.so.0\r\n#14 0x00007f8ae975d9b5 in wl_client_destroy () at /lib64/libwayland-server.so.0\r\n#15 0x00007f8ae975de0d in wl_display_flush_clients () at /lib64/libwayland-server.so.0\r\n#16 0x00007f8ae975de58 in wl_display_run () at /lib64/libwayland-server.so.0\r\n#17 0x0000000000416e2a in server_run (server=0x46ab60 <server>) at ../sway/server.c:187\r\n#18 0x0000000000416528 in main (argc=1, argv=0x7ffc3aece878) at ../sway/main.c:404\r\n```\r\n\r\nThis pull request fix the crash": {
        "sway/input/seat.c": 1
    },
    "Fix swaybar block background fill logicSame as #2571 but for 1.0.": {},
    "Fix swaybar block background fill logicWhen a block is padded/offset to uphold `min_width`, the background colour is now applied to the whole block rather than just the original width before padding. This brings the behaviour in-line with i3bar.\r\n\r\nRelated issue: https://github.com/greshake/i3status-rust/issues/155": {},
    "Fix swaybar crash when there's no status_commandFixes #2938.": {
        "swaybar/bar.c": 1
    },
    "Fix swaylock version stringThe referenced constants were not defined so it always printed \"version unknown\".\r\n\r\nAlso it would exit with code 1. It now exits with code 0.": {
        "swaylock/main.c": 1
    },
    "Fix swaylock w/shadow on glibc, improve securityToday I learned that GNU flaunts the POSIX standard in yet another\r\ncreative way. Additionally, this adds some security improvements,\r\nnamely:\r\n\r\n- Zeroing out password buffers in the privileged child process\r\n- setuid/setgid after reading /etc/shadow": {
        "meson.build": 1,
        "swaylock/meson.build": 1,
        "swaylock/shadow.c": 1
    },
    "Fix the double execution of exec_always commands on config reloadsWhile at it, fix the reload message.": {
        "sway/commands/exec_always.c": 1,
        "sway/config.c": 1
    },
    "Fix tiling criteria": {
        "sway/criteria.c": 1
    },
    "Fix title textures on scale changeOn an output scale change, only the title texture of the focused container and all marks textures were being updated.\r\n\r\nThis PR updates the title textures for all containers.\r\n\r\nTest Plan:\r\n- Open any number of views in various layouts (including floating)\r\n- Add some marks\r\n- Change the scale of the output\r\n- Verify all title and marks textures are updated to use the correct scale": {
        "include/sway/tree/container.h": 1,
        "sway/desktop/output.c": 1,
        "sway/tree/container.c": 1
    },
    "Fix titlebar when no title or marksFixes #3215 \r\n\r\nThis fixes the rendering of the titlebar when there is no title or marks.": {
        "sway/desktop/render.c": 1
    },
    "Fix undesirable height change of floating viewsIn view_autoconfigure the height of the view is adjusted if the parent\r\ncontainer has a tabbed/stacked layout. Previously this height change\r\nwould also be applied to floating views, although it is not needed for\r\nthem.\r\n\r\nTo reproduce the problem:\r\n1.  Open a floating window with a Sway titlebar (SSD).\r\n2.  Change the workspace layout from split to tabbed/stacked.\r\n3. In case of a tabbed workspace layout the height of the floating window\r\n    is reduced by the height of the titlebar.\r\n4. In case of a stacked workspace layout the height of the floating window\r\n    is reduced by  (height of titlebar) * (number of floating windows on this\r\n    workspace). If there are more than one floating windows on the same\r\n    workspace, there is a visible gap between the titlebar and the content of\r\n    the floating window.": {
        "sway/tree/view.c": 1
    },
    "Fix unused function in swap command```\r\nError: test_id defined but not used. [-Werror=unused-function].\r\n```\r\n\r\nAlso fixes a `size_t` cast to `void *`.\r\n\r\nhttps://github.com/swaywm/sway/issues/3123#issuecomment-438763220": {
        "sway/commands/swap.c": 1
    },
    "Fix use after free in transactionsIn `set_instructions_ready`, calling `set_instruction_ready` may cause any number of transactions to get applied, which removes them from the list being iterated.  The iteration variables need to be adjusted accordingly.": {
        "sway/desktop/transaction.c": 1
    },
    "Fix window_type with disabled xwayland supportThere were errors building with \"enable-xwayland\" set to \"false\" which were introduced by #2550.\r\nThis commit places those changes within \"#ifdef HAVE_XWAYLAND\" checks.": {},
    "Fix workspace switchingThe output also needs to be made dirty when focusing a new output.\r\n\r\nFixes #2599.": {
        "sway/input/seat.c": 1
    },
    "Fix workspace tabsWhen collecting focus to save into the transaction state, the workspace needs to look in the tiling list only.\r\n\r\nAs `seat_get_focus_inactive_tiling` returns any descendant, the list also needs to be traversed back up to the direct child of the workspace.\r\n\r\nFixes #2532": {
        "sway/desktop/transaction.c": 1
    },
    "Fix xwayland wants_floating logicRequires https://github.com/swaywm/wlroots/pull/1327 to actually fix the floating logic, but won't break anything if this is merged first.\r\n\r\nSee i3's implementation here: https://github.com/i3/i3/blob/a319860cd10cda17e176218e6dc34145fbb3bd94/src/manage.c#L444-L445\r\n\r\nTo test:\r\n\r\n* Run `emacs`, press Alt + x and type `server-start`, then open a terminal and run `emacsclient -nc`. This window should be tiled.\r\n* Run `echo getpin | pinenetry-gtk-2`. This window should be floating.\r\n\r\nFixes #2844.": {
        "sway/desktop/xwayland.c": 1
    },
    "Float views when min == max on either dimensionThis fixes pinentry-gtk-2, but might make other views floating which would otherwise be tiled. This patch is more of a trial which could end up becoming a permanent fix.\r\n\r\nFixes #2181.": {
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1
    },
    "Free transaction state upon destruction by removing pointer indirectionFixes memory leaks.\r\n\r\nNot sure about function names, whether to check for NULL, and commit message lol": {
        "sway/desktop/transaction.c": 1
    },
    "FreeBSD fixesHi all,\r\n\r\nI have been using Sway on my HardenedBSD 12-CURRENT machine for a few months now, and I think maybe it's time to PR my patches.\r\n\r\nPlease be aware, that a vanilla FreeBSD won't be able to build or run Sway yet, because there are some requirements that have older versions in the ports tree than necessary. I needed to make the following modifications to my system:\r\n\r\n- devel/meson needs to be updated to 0.47.1 (0.46.1 is currently in the port tree)\r\n- graphics/wayland-protocols needs to be updated to 1.15 (1.12 is currently in the port tree)\r\n- devel/epool-shim needs to be updated to commit 7fff1fc. Neither the one in the ports tree, nor the latest version works. I will probably open a PR there, but first I would like to understand a bit more about why it does not work.\r\n- x11/libinput needs to be updated to >=1.7.0 (1.6.0 is currently in the ports tree). This can be done by installing the following ports from https://github.com/FreeBSDDesktop/freebsd-ports:\r\n  - devel/evdev-proto\r\n  - multimediv4l_compat\r\n  - x11/libinput\r\n  - devel/py-pyudev": {
        "/dev/null": 1,
        "client/pool-buffer.c": 1,
        "meson.build": 1,
        "sway/commands.c": 1,
        "sway/commands/bar.c": 1,
        "sway/commands/output/background.c": 1,
        "sway/main.c": 1,
        "sway/server.c": 1,
        "sway/tree/workspace.c": 1,
        "swaybar/ipc.c": 1,
        "swaylock/meson.build": 1
    },
    "FreeBSD fixesThis PR fixes two issues on FreeBSD:\r\n\r\n1. `CLOCK_MONOTONIC` appeared in IEEE Std. 1003.1-200x, it was not part of POSIX.1b (the 1993 version). FreeBSD treats it accordingly, thus `_POSIX_C_SOURCE` needs to be set to `200112L`.\r\n2. PR #2855 basically hardcodes the config file path to /etc, which is a problem on e.g. FreeBSD, where the expected path for config files of non-base software is '/usr/local/etc'. Meson sets `sysconfdir` to '/etc' explicitly *only* when `prefix` is '/usr', so it is still possible to use '/usr/local' as `prefix`, and install the config files under '/usr/local/etc'. This commit allows to do that by setting `sysconfdir` based on whether `prefix` is '/usr', or not.": {
        "common/loop.c": 1,
        "meson.build": 1
    },
    "Give focus to another swaylock surface when output is disconnected* Have multiple outputs\r\n* Launch swaylock\r\n* Unplug an output (possibly has to be the last \"connected\" one)\r\n* The swaylock surface on the remaining output would not respond to key events\r\n\r\nThis was happening because when the output destroys, focus was not given to the other swaylock surface.\r\n\r\nThis patch makes focus be transferred to another layer surface owned by the same Wayland client, but only if input was inhibited by the surface being destroyed, and only if it's in the overlay layer. I figure it's best to be overly specific and relax the requirements later if needed.\r\n\r\nThis patch removes a check in `seat_set_focus_surface` which was preventing focus from being passed from a layer surface to any other surface. I don't know of a use case for this check, but it's possible that this change could produce issues.": {
        "sway/desktop/layer_shell.c": 1,
        "sway/input/seat.c": 1
    },
    "Give windows pointer focus immediatelyFixes #2401 (aka #2558)\r\n\r\nBased on feedback on #2612\r\n\r\nPreviously, when switching windows, pointer focus was not changed until the pointer was moved. This makes the pointer enter happen immediately, without the side effects of other attempted fixes.": {
        "sway/commands/focus.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Handle destroyed subsurfacesDamage subsurfaces when they are destroyed. Since subsurfaces don't have an\r\nunmap event we need to do that on destroy.\r\n\r\nWe also don't want to keep a sway_view_child when the wlr_subsurface has been\r\ndestroyed.\r\n\r\nFixes https://github.com/swaywm/sway/issues/3197": {
        "include/sway/tree/view.h": 1,
        "sway/tree/view.c": 1
    },
    "Handle gap bordersFixes `hide_edge_borders smart` when gaps are in use.\r\nImplements `hide_edge_borders smart_no_gaps` and `smart_borders on|no_gaps|off`.\r\n\r\nSince `smart_borders on` is equivalent to `hide_edge_borders smart` and `smart_borders no_gaps` is equivalent to `hide_edge_borders smart_no_gaps`, I opted to just save the last value set for `hide_edge_borders` and restore that on `smart_borders off`. This simplifies the conditions for setting the border.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "sway/commands.c": 1,
        "sway/commands/hide_edge_borders.c": 1,
        "sway/config.c": 1,
        "sway/meson.build": 1,
        "sway/sway.5.scd": 1,
        "sway/tree/view.c": 1
    },
    "Handle out-of-fd situations gracefully for transaction and urgent timersI tested it by changing the condition to `false`.": {
        "sway/desktop/transaction.c": 1,
        "sway/input/seat.c": 1
    },
    "Handle set_{title,app_id} for xdg-shell and zxdg-shell-v6This allows to update the title even if the view doesn't commit.\r\nThis is useful e.g. when a terminal sets its toplevel title to\r\nthe currently running command and when the view isn't visible.": {
        "include/sway/tree/view.h": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1
    },
    "Handle shell special characters in bg file pathSee https://github.com/swaywm/sway/issues/654#issuecomment-421604512\r\n\r\nThis changes it back so the path given to swaybg is enclosed in quotes.\r\n\r\nAdditionally, the only character that is escaped in the path stored is\r\ndouble quotes now. This makes it so we don't need to keep an exhaustive\r\nlist of characters that need to be escaped.\r\n\r\nThe end user will still need to escape these characters in their config\r\nor when passed to swaybg.\r\n\r\nExamples for file `~/asdf(1).png`\r\n```\r\noutput <name> bg ~/asdf\\(1\\).png <mode>\r\noutput <name> bg ~/asdf\"(1)\".png <mode>\r\noutput <name> bg ~/\"asdf(1).png\" <mode>\r\n```\r\n\r\n--\r\nFixes #2658 ": {
        "sway/commands.c": 1,
        "sway/commands/output/background.c": 1,
        "sway/config/output.c": 1
    },
    "Handle sigchld instead of blocking on waitpidThis stops any potential blocking when killing swaybg (e.g. reloading config). We also forcefully close their wayland connection, in case they're slow to die and we start a new swaybg.\r\n\r\nThis fixes an issue that was reported by someone on IRC, but doesn't have a github issue.\r\n\r\nFixes #2952": {
        "include/sway/config.h": 1,
        "include/sway/server.h": 1,
        "sway/config/output.c": 1,
        "sway/server.c": 1
    },
    "IPC: Send keyboard layout info in IPC_GET_INPUTSSigned-off-by: Harish Krupo <harishkrupo@gmail.com>": {
        "sway/ipc-json.c": 1,
        "swaymsg/main.c": 1
    },
    "Ignore unrelated cursor buttons while doing seat operations* Click and hold a scrollbar\r\n* Drag the cursor onto another surface\r\n* While still holding the original button, press and release another cursor button\r\n* Things get weird\r\n\r\nThere's two ways to fix this. Either cancel the seat operation and do the other click, or continue the seat operation and ignore the other click. I opted for the latter (ignoring the click) because it's easier to implement, and I suspect a second click during a seat operation is probably unintentional anyway.\r\n\r\nFixes #2756": {
        "sway/input/cursor.c": 1
    },
    "Implement bar bindsymImplements `bar [<bar-id>] bindsym [--release] button<n> <command>`.\r\n\r\nTests:\r\n- `bar bindsym button1 nop` should prevent switching to a workspace when left clicking on the workspace buttons\r\n-  The following should prevent switching the workspace when scrolling up and down on the workspace buttons\r\n   ```\r\n   bar bindsym button4 nop\r\n   bar bindsym button5 nop\r\n   ```\r\n- `bar bindsym --release button1 layout  toggle all` should\r\n   - _(If on a workspace button)_, switch to the workspace clicked (or the auto_back_and_forth workspace) and change it's layout (this tests makes sure it doesn't override the pressed behaviour)\r\n   - _(If not on a workspace button)_, change the layout of the current workspace\r\n\r\nFixes #1521": {
        "include/sway/config.h": 1,
        "include/swaybar/config.h": 1,
        "include/swaybar/ipc.h": 1,
        "sway/commands/bar/bindsym.c": 1,
        "sway/config/bar.c": 1,
        "sway/ipc-json.c": 1,
        "sway/sway-bar.5.scd": 1,
        "swaybar/bar.c": 1,
        "swaybar/config.c": 1,
        "swaybar/ipc.c": 1
    },
    "Implement bar gapsCloses #2904\r\n\r\nAdds the bar subcommand `gaps <amount>|<horizontal> <vertical>|<top> <right> <bottom> <left>` to set gaps for swaybar. Due to restrictions on margins for a layer_surface, only the sides that are anchored to an edge of the screen can have gaps. Since there is support for per-side outer gaps for workspaces, those should be able to be used instead for the last side.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "include/swaybar/config.h": 1,
        "sway/commands/bar.c": 1,
        "sway/ipc-json.c": 1,
        "sway/meson.build": 1,
        "sway/sway-bar.5.scd": 1,
        "swaybar/config.c": 1,
        "swaybar/ipc.c": 1,
        "swaybar/render.c": 1
    },
    "Implement common event loop for swaybar and swaylockIt was noticed that when you have an output with DPMS off, swaylock waits around forever for the surface on that output to update which means it never verifies the password. To fix this, @RedSoxFan and I determined that we should set a timer to handle this. However, `wl_event_loop_add_timer` appears to be available for the compositor only, not clients.\r\n\r\nTo resolve this, I took the event loop from swaybar, moved it into `common/`, refactored it a bit and made it handle timers properly. It would previously check the timers every time a Wayland event came through, but now it does it using timerfds so we don't need to wait for a Wayland event.\r\n\r\nThe following things have been implemented:\r\n\r\n* Swaylock's indicator now disappears after 3 seconds.\r\n* Swaylock's password buffer is now cleared after 10 seconds of inactivity.\r\n* Swaylock now sets a 50ms timer for the surfaces to become undirty. If the timer expires it will go ahead and verify anyway. I admit I haven't tested this yet.\r\n\r\nIf you're reviewing the individual commits, please note that some of the loop code got some fixes in further commits.": {
        "/dev/null": 1,
        "common/meson.build": 1,
        "include/swaybar/bar.h": 1,
        "include/swaybar/event_loop.h": 1,
        "include/swaybar/status_line.h": 1,
        "include/swaylock/swaylock.h": 1,
        "swaybar/bar.c": 1,
        "swaybar/event_loop.c": 1,
        "swaybar/meson.build": 1,
        "swaybar/status_line.c": 1,
        "swaylock/main.c": 1,
        "swaylock/password.c": 1
    },
    "Implement deprecated new_window and new_float commandsMay as well make it as easy as possible for users who are coming from i3.\r\n\r\nThis also changes the `border` command to accept a thickness when setting the border to normal. This makes it work the same way as the `default_border` command. Eg. `border normal 5`": {
        "sway/commands.c": 1,
        "sway/commands/border.c": 1
    },
    "Implement floating_modifier <mod> [inverse|normal]Closes #2335 \r\n\r\nImplements the `[inverse|normal]` portion of `floating_modifier <mod> [inverse|normal]`.\r\n\r\nIn `normal` mode (default), `<mod> + left click` is move and `<mod> + right click` is resize.\r\nIn `inverse` mode, `<mod> + left click` is resize and `<mod> + right click` is move.": {
        "include/sway/config.h": 1,
        "sway/commands/floating_modifier.c": 1,
        "sway/config.c": 1,
        "sway/input/cursor.c": 1
    },
    "Implement focus_on_window_activationDepends on https://github.com/swaywm/wlroots/pull/1223\r\n\r\ni3 docs: https://i3wm.org/docs/userguide.html#focus_on_window_activation\r\n\r\nTo test, I opened Firefox along with a terminal and ran `firefox http://github.com` from the terminal.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/meson.build": 1,
        "sway/tree/view.c": 1
    },
    "Implement force_display_urgency_hintThe directive sets the timeout before an urgent view becomes normal again after switching to it from another workspace.\r\n\r\nDocs: https://i3wm.org/docs/userguide.html#_delaying_urgency_hint_reset_on_workspace_change\r\n\r\nAlso:\r\n\r\n* When an xwayland surface removes the urgent hint while the timer is active, we now ignore the request. This happens as soon as the view receives focus, so it was effectively making the timer pointless.\r\n* The timeout is now only applied when switching to it from another workspace.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/seat.c": 1,
        "sway/meson.build": 1
    },
    "Implement iterators per container typeThis introduces the following `for_each` functions:\r\n\r\n* `root_for_each_workspace`\r\n* `root_for_each_container`\r\n* `output_for_each_workspace`\r\n* `output_for_each_container`\r\n* `workspace_for_each_container`\r\n* `container_for_each_child`\r\n\r\nAnd introduces the following `find` functions:\r\n\r\n* `root_find_output`\r\n* `root_find_workspace`\r\n* `root_find_container`\r\n* `output_find_workspace`\r\n* `output_find_container`\r\n* `workspace_find_container`\r\n* `container_find_child`\r\n\r\nAnd removes the following functions:\r\n\r\n* `container_descendants`\r\n* `container_for_each_descendant`\r\n* `container_find`\r\n\r\nThis change is preparing the way for demoting `sway_container`. Eventually these functions will accept and return `sway_output`s, `sway_workspace`s and `sway_container`s (meaning a `C_CONTAINER` or `C_VIEW`), and which point their assertions can be removed and we can use typehinting.\r\n\r\nThis change also makes it easy to handle abnormalities like the workspace floating list, root's scratchpad list and (once implemented) root's saved workspaces list for when there's no connected outputs.": {
        "include/sway/output.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/root.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands/hide_edge_borders.c": 1,
        "sway/commands/show_marks.c": 1,
        "sway/commands/swap.c": 1,
        "sway/commands/unmark.c": 1,
        "sway/config.c": 1,
        "sway/criteria.c": 1,
        "sway/desktop/output.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-server.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/output.c": 1,
        "sway/tree/root.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Implement key repeat for keybindingsThis PR resolves #2332. Have tested with\r\n\r\n    input 1:1:Piano {\r\n            repeat_rate 2\r\n            repeat_delay 2000\r\n    }\r\n\r\nSetting \r\n\r\n    input 0:0:X11_keyboard {\r\n            repeat_rate 0\r\n            repeat_delay 0\r\n    }\r\n\r\nshould disable key repeat. \r\n\r\n~I will update the documentation soon.~ (No documentation changes, as this PR now reuses the advised repeat_rate and repeat_delay from the Wayland protocol.)": {},
    "Implement mousedown operationThis allows you to move the cursor off the surface while dragging its scrollbar.\r\n\r\nTo test:\r\n\r\n* Launch something which has a scrollbar such as Firefox.\r\n* Put something to the right of it such as a terminal.\r\n* Click and hold Firefox's scrollbar.\r\n* With the button still held, move the cursor off Firefox and onto the terminal.\r\n* Observe the scrollbar still responds to mouse movements.\r\n* If using `focus_follows_mouse`, observe the terminal does not gain focus.\r\n* Release the mouse button. Do not move the mouse afterwards.\r\n* Observe the cursor changes to whatever the terminal uses, such as an I-beam.\r\n* If using `focus_follows_mouse`, observe the focus is changed to the terminal.": {
        "include/sway/input/seat.h": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1
    },
    "Implement move to workspace on a floating containerAlso adjusts `container_floating_translate` to not change the current properties directly.\r\n\r\nI'm not sure what i3 does with regard to centering it within the workspace. I made it retain the same position if it's being moved to a workspace on the same output. If it's being moved to a workspace on another output then it will center within that workspace.\r\n\r\nTested with both floating views and floating containers.": {
        "include/sway/tree/container.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands/move.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Implement per side and per direction outer gapsCloses #3059 \r\n\r\nThis introduces the following command extensions from `i3-gaps`:\r\n* `gaps horizontal|vertical|top|right|bottom|left <amount>`\r\n* `gaps horizontal|vertical|top|right|bottom|left all|current set|plus|minus <amount>`\r\n* `workspace <ws> gaps horizontal|vertical|top|right|bottom|left <amount>`\r\n\r\n`inner` and `outer` are also still available as options for all three of the above commands. `outer` now acts as a shorthand to set/alter all sides.\r\n\r\nAdditionally, this fixes two bugs with the prevention of invalid gap configurations for workspace configs:\r\n1. If outer gaps were not set and inner gaps were, the outer gaps would be snapped to the negation of the inner gaps due to `INT_MIN` being less than the negation. This took precedence over the default outer gaps.\r\n2. Similarly, if inner gaps were not set and outer gaps were, inner gaps would be set to zero, which would take precedence over the default inner gaps.\r\n\r\nFixing both of the above items also requires checking the gaps again when creating a workspace since the default outer gaps can be smaller than the negation of the workspace specific inner gaps.": {
        "include/sway/config.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands/gaps.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/config.c": 1,
        "sway/sway.5.scd": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Implement popup_during_fullscreeni3 docs: https://i3wm.org/docs/userguide.html#_popups_during_fullscreen_mode\r\n\r\n~~Note that this currently doesn't work for xwayland. Xwayland popups are unmanaged, and for some reason they don't have the `NET_WM_WINDOW_TYPE_POPUP` atom when mapping, so I can't identify them from other unmanaged surfaces.~~": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/meson.build": 1,
        "sway/sway.5.scd": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Implement resizing tiled containers via cursor* The `OP_RESIZE` seat operation has been renamed to `OP_RESIZE_FLOATING`, and `OP_RESIZE_TILING` has been introduced.\r\n* Similar to the above, `seat_begin_resize` and `handle_resize_motion` have been renamed and tiling variants introduced.\r\n* `resize.c`'s `resize_tiled` has to be used, so `container_resize_tiled` has been introduced in `resize.c` to allow external code to call it. Ideally all this would be in `container.c`, but I didn't want to make this PR unnecessarily big.\r\n\r\nThings to test:\r\n\r\n* Create two tiled views in horizontal/vertical layout and resize all internal edges\r\n* Float a container with two or more views inside it and resize them\r\n* Check for regressions in the resize/move stuff that's already implemented\r\n\r\nBTW, it would be good if the cursor icon could be something like this: \r\n![image](https://user-images.githubusercontent.com/2436833/43938515-6549e5b0-9ca7-11e8-9533-661965fc7648.png)\r\n\r\n...but this would have to be added to wlroots.": {
        "common/list.c": 1,
        "include/list.h": 1,
        "include/sway/commands.h": 1,
        "include/sway/input/seat.h": 1,
        "sway/commands/resize.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1
    },
    "Implement scratchpadImplements the following commands:\r\n\r\n* `move scratchpad`\r\n* `scratchpad show`\r\n* `[criteria] scratchpad show`\r\n\r\nAlso fixes these:\r\n\r\n* Fix memory leak when executing command with criteria (use `list_free(views)` instead of `free(views)`)\r\n* Fix crash when running `move to` with no further arguments": {
        "/dev/null": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "sway/commands.c": 1,
        "sway/commands/move.c": 1,
        "sway/criteria.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1
    },
    "Implement strip_workspace_name.#3082.\r\n~~For some reason, the `strip_workspace_name` is deemed invalid in the config file. Still trying to find out why.~~": {
        "/dev/null": 1,
        "common/util.c": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "include/swaybar/bar.h": 1,
        "include/swaybar/config.h": 1,
        "sway/commands/bar.c": 1,
        "sway/commands/bar/strip_workspace_numbers.c": 1,
        "sway/config/bar.c": 1,
        "sway/ipc-json.c": 1,
        "sway/meson.build": 1,
        "sway/sway-bar.5.scd": 1,
        "swaybar/bar.c": 1,
        "swaybar/config.c": 1,
        "swaybar/ipc.c": 1,
        "swaybar/render.c": 1
    },
    "Implement support for input wildcardCloses #2662 \r\n\r\nImplements support for`input *`. The code is structured similar to the way `output *` is currently implemented.\r\n\r\nThis required restructuring the input subcommand handlers. Instead of creating a new input config and applying it in each subcommand, the one created by the main input command is used and the input config is stored/merged and applied after returning from the subcommand.": {
        "include/sway/config.h": 1,
        "sway/commands.c": 1,
        "sway/commands/input.c": 1,
        "sway/commands/input/accel_profile.c": 1,
        "sway/commands/input/click_method.c": 1,
        "sway/commands/input/drag_lock.c": 1,
        "sway/commands/input/dwt.c": 1,
        "sway/commands/input/events.c": 1,
        "sway/commands/input/left_handed.c": 1,
        "sway/commands/input/map_from_region.c": 1,
        "sway/commands/input/map_to_output.c": 1,
        "sway/commands/input/middle_emulation.c": 1,
        "sway/commands/input/natural_scroll.c": 1,
        "sway/commands/input/pointer_accel.c": 1,
        "sway/commands/input/repeat_delay.c": 1,
        "sway/commands/input/repeat_rate.c": 1,
        "sway/commands/input/scroll_button.c": 1,
        "sway/commands/input/scroll_method.c": 1,
        "sway/commands/input/tap.c": 1,
        "sway/commands/input/tap_button_map.c": 1,
        "sway/commands/input/xkb_capslock.c": 1,
        "sway/commands/input/xkb_layout.c": 1,
        "sway/commands/input/xkb_model.c": 1,
        "sway/commands/input/xkb_numlock.c": 1,
        "sway/commands/input/xkb_options.c": 1,
        "sway/commands/input/xkb_rules.c": 1,
        "sway/commands/input/xkb_variant.c": 1,
        "sway/config/input.c": 1,
        "sway/input/input-manager.c": 1
    },
    "Implement support for swaymsg -t SUBSCRIBE [-m]Related to #3082\r\n\r\nIn `i3 4.16`, `i3-msg` can be used with the message type `subscribe` and has the ability to monitor for responses until killed. This adds support for both to swaymsg.\r\n\r\nIf the JSON array of event types is malformed or contains an invalid event, sway will send a response with `success` set to `false`. If swaymsg sees this, it will not display the failure and exit.\r\n\r\nIf the `subscribe` event is successful, swaymsg will wait for the first response and display that instead of the success message. If `-m/--monitor` is given, swaymsg will continue monitor for responses until killed or a malformed response is received.\r\n\r\nFor the `subscribe` event, the responses will always be printed as JSON. If `-r/--raw` is given, the JSON will not be pretty printed, which may be preferred when monitoring due to there being multiple responses.\r\n\r\nExample: `swaymsg -t subscribe -m \"['window']\"`": {
        "sway/ipc-server.c": 1,
        "swaymsg/main.c": 1,
        "swaymsg/swaymsg.1.scd": 1
    },
    "Implement swaynag -B/--button-no-terminalRelated to #3082 \r\n\r\nIn `i3 4.16`, `i3-nagbar` introduces the flags `-B/--button-no-terminal` to run the action directly instead of inside a terminal. This implements the flags for swaynag for compatibility.\r\n\r\nSince swaynag does not use an equivalent to `i3-sensible-terminal`, the flags `-b/--button` only uses a terminal when the environment variable `TERMINAL` is set, otherwise it acts the same as these new flags.": {
        "include/swaynag/swaynag.h": 1,
        "swaynag/config.c": 1,
        "swaynag/swaynag.1.scd": 1,
        "swaynag/swaynag.c": 1
    },
    "Implement swaynagThis is the first step towards #545.\r\n\r\nThis PR contains a clone of `i3-nagbar` with some added functionality. After some discussion on IRC, it was determined that we will do things a little different from i3 for showing errors. Instead of launching a terminal to show the errors, we will have a button to show detailed errors in a multi-line text box inside the expanded layer-surface.\r\n\r\nThe objective of this PR is to create `swaynagbar` in generic manner so it can be used with sway. This will not implement any actual use-cases, that will be left for future PRs.\r\n\r\n**Left for follow-up PRs:**\r\n- Show nagbar when there is config errors\r\n- Add nagbar to the binding for `exit` in the default config (to match i3)\r\n- (any other use cases that come up)\r\n\r\n**Test Plan:**\r\n- Show nagbar with a basic message\r\n  - Make sure the dismiss button dismisses nagbar\r\n- Show nagbar with a type of warning\r\n- Show nagbar on a specific output\r\n- Show nagbar on the bottom edge\r\n- Show nagbar with an action button\r\n  - Make sure the action is run when the button is clicked\r\n- Show nagbar with a detailed message\r\n  - Make sure nagbar expands and collapses\r\n  - Make sure the text area can scroll with the mouse wheel and the buttons (requires long text)\r\n  - Make sure a detailed message can be piped in via stdin\r\n- Make sure config file works\r\n  - Make sure default types (error and warning) can be overridden\r\n  - Make sure custom types can be defined\r\n  - Make sure command line args override config options": {
        "/dev/null": 1,
        "meson.build": 1,
        "sway/desktop/layer_shell.c": 1
    },
    "Implement tab cycling using mouse wheelFirstly, a change had to be made to the `container_at` functions. If you create layout `T[view H[view view]]` and hover the second tab, the `container_at` functions would return the `focus_inactive` child. They now return the split container itself. To compensate for this, `dispatch_cursor_button` has been adjusted to find the `focus_inactive` child before focusing it.\r\n\r\nThe actual implementation of wheel scrolling is pretty straightforward. This uses `handle_cursor_axis`, so I took a similar approach to `handle_cursor_button` (ie. creating a `dispatch_cursor_axis` function).\r\n\r\nTo test, create a tabbed or stacked layout, hover the title bar and scroll with the wheel.\r\n\r\nCloses #2684.": {
        "sway/input/cursor.c": 1,
        "sway/tree/container.c": 1
    },
    "Implement the presentation-time protocol": {
        "include/sway/output.h": 1,
        "include/sway/server.h": 1,
        "sway/desktop/output.c": 1,
        "sway/server.c": 1,
        "sway/tree/output.c": 1
    },
    "Implement tiling dragHold `floating_modifier` then click and drag a tiling view to move it around.\r\n\r\nThis is based of an open PR in i3: https://github.com/i3/i3/pull/3085#issuecomment-379487507\r\n\r\n* A new config directive `tiling_drag` can disable the functionality (as per i3). It's enabled by default.\r\n* The colour of the drop zone is the indicator colour. In i3 this is a solid colour, but in sway I gave it 50% transparency. I don't think i3 can make it transparent without introducing compositing into i3, so we have an advantage here.\r\n* Views within a floating container cannot be moved around (we do the move-floating behaviour instead)\r\n* This functionality intentionally cannot be triggered by a regular click and drag on the title bar. i3 doesn't do this - instead i3 starts resizing the split. We should probably do the same.\r\n\r\nSome more specific stuff:\r\n\r\n* While dragging, move the cursor to the edges of a another container. If the edge is parallel to the container's parent layout then the view will be inserted as a sibling, otherwise it'll split the container and insert it into the split.\r\n* You can also drop a view into the center of another container, which adds it as a sibling regardless of the container's parent layout.\r\n* If you hover close to the perpendicular edge of a layout container then you can insert it as a sibling of the layout container. For example, create layout `H[view V[view view]]` then move one of the right views to the left edge of the vertical container.\r\n* You can do the same for workspaces: `H[view view]` then move a view to the top.\r\n* You can drop a view into an empty workspace.\r\n\r\nCloses #2331": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "include/sway/input/seat.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands.c": 1,
        "sway/commands/move.c": 1,
        "sway/config.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Implement title alignment~~**Since this is going to have conflicts with #3145, do not merge this until after that one is merged. I'll rebase and fix merge conflicts on this one**~~ (Rebased and merge conflicts fixed)\r\n\r\nRelated to #3082\r\n\r\nThis adds support for `i3 4.16`'s ability to set the title alignment. The command is `title_align left|center|right`. When the title is on the right, marks are moved to the left. Otherwise, they are on the right.\r\n\r\nI think this matches i3 behavior for all three alignments, but may have missed an edge case. This should also be working on all transforms and with fractional scaling.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/desktop/render.c": 1,
        "sway/meson.build": 1,
        "sway/sway.5.scd": 1
    },
    "Implement type safe arguments and demote sway_containerThis commit changes the meaning of `sway_container` so that it only refers to layout containers and view containers. Workspaces, outputs and the root are no longer known as containers. Instead, root, outputs, workspaces and containers are all a type of `node`, and containers come in two types: layout containers and view containers.\r\n\r\nIn addition to the above, this implements type safe variables. This means we use specific types such as `sway_output` and `sway_workspace` instead of generic containers or nodes. However, it's worth noting that in a few places places (eg. seat focus and transactions) referring to them in a generic way is unavoidable which is why we still use nodes in some places.\r\n\r\nIf you want a TL;DR, look at `node.h`, as well as the struct definitions for root, output, workspace and container. Note that `sway_output` now contains a workspaces list, and workspaces now contain a tiling and floating list, and containers now contain a pointer back to the workspace.\r\n\r\n--------------------------------------------------------------------------------\r\n\r\nThere are now functions for `seat_get_focused_workspace` and `seat_get_focused_container`. The latter will return `NULL` if a workspace itself is focused. Most other seat functions like `seat_get_focus` and `seat_set_focus` now accept and return nodes.\r\n\r\nIn the `config->handler_context` struct, `current_container` has been replaced with three pointers: `node`, `container` and `workspace`. `node` is the same as what `current_container` was, while `workspace` is the workspace that the node resides on and `container` is the actual container, which may be `NULL` if a workspace itself is focused.\r\n\r\nThe global `root_container` variable has been replaced with one simply called `root`, which is a pointer to the `sway_root` instance.\r\n\r\nThe way outputs are created, enabled, disabled and destroyed has changed. Previously we'd wrap the `sway_output` in a container when it is enabled, but as we don't have containers any more it needs a different approach. The `output_create` and `output_destroy` functions previously created/destroyed the container, but now they create/destroy the `sway_output`. There is a new function `output_disable` to disable an output without destroying it.\r\n\r\nContainers have a new `view` property. If this is populated then the container is a view container, otherwise it's a layout container. Like before, this property is immutable for the life of the container.\r\n\r\nContainers have both a `sway_container *parent` and `sway_workspace *workspace`. As we use specific types now, `parent` cannot point to a workspace so it'll be `NULL` for containers which are direct children of the workspace. The `workspace` property is set for all containers except those which are hidden in the scratchpad as they have no workspace.\r\n\r\nIn some cases we need to refer to workspaces in a container-like way. For example, workspaces have layout and children, but when using specific types this makes it difficult. Likewise, it's difficult for a container to get its parent's layout when the parent could be another container or a workspace. To make it easier, some helper functions have been created: `container_parent_layout` and `container_get_siblings`.\r\n\r\n`container_remove_child` has been renamed to `container_detach` and `container_replace_child` has been renamed to `container_replace`.\r\n\r\n`container_handle_fullscreen_reparent(con, old_parent)` has had the `old_parent` removed. We now unfullscreen the workspace when detaching the container, so this function is simplified and only needs one argument now.\r\n\r\n`container_notify_subtree_changed` has been renamed to `container_update_representation`. This is more descriptive of its purpose. I also wanted to be able to call it with whatever container was changed rather than the container's parent, which makes bubbling up to the workspace easier.\r\n\r\nThere are now state structs per node thing. ie. `sway_output_state`, `sway_workspace_state` and `sway_container_state`.\r\n\r\nThe `focus`, `move` and `layout` commands have been completely refactored to work with the specific types. I considered making these a separate PR, but I'd be backporting my changes only to replace them again, and it's easier just to test everything at once.\r\n\r\nObviously this needs a ton of testing. I'm going to run this as my daily from now on.\r\n\r\nCloses #2343 \r\nFixes #2552": {
        "/dev/null": 1,
        "include/sway/config.h": 1,
        "include/sway/desktop/transaction.h": 1,
        "include/sway/input/input-manager.h": 1,
        "include/sway/input/seat.h": 1,
        "include/sway/ipc-json.h": 1,
        "include/sway/ipc-server.h": 1,
        "include/sway/output.h": 1,
        "include/sway/server.h": 1,
        "include/sway/tree/arrange.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/root.h": 1,
        "include/sway/tree/view.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands.c": 1,
        "sway/commands/border.c": 1,
        "sway/commands/floating.c": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/fullscreen.c": 1,
        "sway/commands/gaps.c": 1,
        "sway/commands/hide_edge_borders.c": 1,
        "sway/commands/kill.c": 1,
        "sway/commands/layout.c": 1,
        "sway/commands/mark.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/opacity.c": 1,
        "sway/commands/reload.c": 1,
        "sway/commands/rename.c": 1,
        "sway/commands/resize.c": 1,
        "sway/commands/scratchpad.c": 1,
        "sway/commands/seat/cursor.c": 1,
        "sway/commands/show_marks.c": 1,
        "sway/commands/smart_gaps.c": 1,
        "sway/commands/split.c": 1,
        "sway/commands/sticky.c": 1,
        "sway/commands/swap.c": 1,
        "sway/commands/title_format.c": 1,
        "sway/commands/unmark.c": 1,
        "sway/commands/urgent.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/config.c": 1,
        "sway/config/bar.c": 1,
        "sway/config/output.c": 1,
        "sway/criteria.c": 1,
        "sway/debug-tree.c": 1,
        "sway/desktop/desktop.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/output.c": 1,
        "sway/tree/root.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Implement window_role criteria tokenDepends on https://github.com/swaywm/wlroots/pull/1226\r\n\r\nThis is the last of the criteria tokens.\r\n\r\nTo test, I put this in my config then launched Firefox:\r\n\r\n    for_window [window_role=\"browser\"] title_format \"%title lolz\"": {
        "include/sway/tree/view.h": 1,
        "sway/criteria.c": 1,
        "sway/desktop/xwayland.c": 1
    },
    "Implement window_type criteria tokenTo test:\r\n\r\n    for_window [window_type=\"dialog\"] title_format \"%title (lolz)\"\r\n\r\nThen open Firefox and press `Ctrl+O` to open the Open File dialog.\r\n\r\nBTW, we can't store the actual atom value in the criteria because xwayland is initialised lazily, so I store the `enum atom_name` value instead. And because 0 is a valid enum value, I use `ATOM_LAST` as the \"no value set\" value.": {
        "include/sway/criteria.h": 1,
        "include/sway/xwayland.h": 1,
        "sway/criteria.c": 1,
        "sway/desktop/xwayland.c": 1
    },
    "Improve documentation and remove dead codeThis contains three unrelated things:\r\n* Documentation for `swaymsg -t get_seats` (as well as implementation in fish completions)\r\n* Fix in sway.5 manpage (fixes spacing after the Table)\r\n* Deletion of a not needed code fragment in seat.c": {
        "completions/fish/swaymsg.fish": 1,
        "sway/input/seat.c": 1,
        "sway/sway.5.scd": 1,
        "swaymsg/swaymsg.1.scd": 1
    },
    "Improve new workspace name selectionImproves upon 18e425ed by using the first assigned workspace instead of\r\nthe last one. The order isn't explicitly guaranteed to be the same as in\r\nthe config, but in general works.": {
        "sway/tree/workspace.c": 1
    },
    "Improve rendering with a fullscreen opaque overlay surfaceThe rendering code doesn't use the exclusive input surface at all\r\nanymore to decide to skip rendering of shell surfaces. This fixes\r\na weird situation in which a client requests exclusive input but\r\nisn't an overlay layer surface.\r\n\r\nThe renderer also renders all overlay surfaces in this situation,\r\nnot just one. This simplifies the code and fixes rendering when\r\nthere are more than one overlay surfaces (e.g. for a virtual\r\nkeyboard to type the lockscreen password).": {
        "include/sway/output.h": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1
    },
    "Improvements to the runtime only part of the gaps commandThis patch addresses two issues:\r\n1. The command `gaps inner|outer all|current set|plus|minus <amount>` is not valid in the configuration file, hence list it accordingly in the manpage.\r\n 2.  Always raise an error if the mentioned gaps command is found in the config file. Previously there was only an error reported on startup but not on config reload.\r\n\r\nBy working on this patch I realized that the gaps command is an exception to the other commands: All commands are classified in config file only commands, runtime only commands or commands which are valid in both cases. But the gaps command doesn't conform to this classification and actually consists  of two commands:\r\n- `gaps inner|outer all|current set|plus|minus <amount>` (runtime only)\r\n- `gaps inner|outer <amount>` (runtime and config)\r\n\r\nTherefore the gaps command itself has to check if it is run at config load or at runtime. \r\n\r\nInstead of this patch it might be a cleaner solution to split the gaps command into two distinct commands\r\n- `gaps inner|outer all|current set|plus|minus <amount>` (runtime only)\r\n- `default_gaps inner|outer <amount>` (runtime and config)\r\n\r\nwith the disadvantage, that this syntax would be incompatible to i3-gaps. If we keep the current syntax, I think my patch is necessary.": {
        "sway/commands/gaps.c": 1,
        "sway/sway.5.scd": 1
    },
    "Introduce a way to show config warnings in swaynagCloses #3138\r\n\r\nAdds the function `config_add_swaynag_warning(char *fmt, ...)` so that handlers can add warnings to the swaynag config log in a uniform way. The formatting is identical to errors and include the line number, line, and config path.\r\n\r\nThis also alters the background file access warning to use the function and introduces a warning for duplicate bindings.": {
        "include/sway/config.h": 1,
        "sway/commands/bind.c": 1,
        "sway/commands/output/background.c": 1,
        "sway/config.c": 1
    },
    "Introduce create_output command (for developer use)Should help with testing hotplugging.\r\n\r\nDepends on https://github.com/swaywm/wlroots/pull/1253.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "sway/commands.c": 1,
        "sway/meson.build": 1
    },
    "Introduce cursor_rebaseThis function \"rebases\" the cursor on top of whatever is underneath it, without triggering any focus changes.\r\n\r\nFixes #2815": {
        "include/sway/input/cursor.h": 1,
        "sway/commands/border.c": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/seat/cursor.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Introduce seat_set_focus_container and seat_set_focus_workspaceThese are the same as `seat_set_focus`, but accept a specific type rather than using nodes. Doing this adds more typesafety and lets us avoid using `&con->node` which looks a little ugly.\r\n\r\nThis fixes a crash that pretty much nobody would ever come across. If you have a bindsym for `focus` with no arguments and run it from an empty workspace, sway would crash because it assumes `container` is not `NULL` (fixed in `focus.c`).": {
        "include/sway/input/seat.h": 1,
        "sway/commands/floating.c": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/fullscreen.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/swap.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/output.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Introduce seat_set_raw_focus and remove notify argument from seat_set_focus_warpThis introduces `seat_set_raw_focus`: a function that manipulates the focus stack without doing any other behaviour whatsoever. There are a few places where this is useful, such as where we set `focus_inactive` followed by another call to set the real focus again. With this change, the `notify` argument to `seat_set_focus_warp` is also removed as these cases now use the raw function instead.\r\n\r\nA bonus of this is we are no longer emitting `window::focus` IPC events when setting `focus_inactive`, nor are we sending focus/unfocus events to the surface.\r\n\r\nThis also fixes the following:\r\n\r\n* When running `move workspace to output <name>` and moving the last workspace from the source output, the `workspace::focus` IPC event is no longer emitted for the newly created workspace.\r\n* When splitting the currently focused container, unfocus/focus events will not be sent to the surface when giving `focus_inactive` to the newly created parent, and `window::focus` events will not be emitted.": {
        "include/sway/input/seat.h": 1,
        "sway/commands/move.c": 1,
        "sway/commands/swap.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/container.c": 1
    },
    "Link xcb dependency to meson options \"enable_xwayland\"xcb is only required with xwayland, so remove xcb dependency if xwayland is disabled.\r\n\r\nI'm new to meson, so I'm not sure it's done the right way. But I successfully tested the build with both -Denable-xwayland=true and -Denable-xwayland=false.": {
        "meson.build": 1,
        "sway/meson.build": 1
    },
    "Make SYSCONFDIR FHS compliant when \"prefix\" is setSYSCONFDIR should always point to `/etc` since `/usr/etc` is not FHS compliant.\r\nFrom [FHS-2.3](http://www.pathname.com/fhs/pub/fhs-2.3.html):\r\n\r\n> Note that /usr/etc is still not allowed: programs in /usr should place configuration files in /etc.\r\n\r\nThis is the default in meson since version 0.44: [Release Notes](http://mesonbuild.com/Release-notes-for-0-44-0.html#prefixdependent-defaults-for-sysconfdir-localstatedir-and-sharedstatedir)\r\nSince meson installs the config file in `/etc/sway/config` in any case (even with `config.set('sysconfdir', join_paths(prefix, sysconfdir))` in `meson.build` with `prefix=\"/usr\"`), setting the project argument `SYSCONFDIR=/usr/etc` makes sway unable to find the global configuration file (it crashes with error \"Unable to find a config file!\"). This PR fixes the issue.": {
        "meson.build": 1
    },
    "Make gaps implementation consistent with i3-gapsThis changes our gaps implementation to behave like i3-gaps.\r\n\r\nOur previous implementation allowed you to set gaps on a per container basis. This is no longer possible as it isn't supported by i3-gaps and doesn't seem to have a practical use case. The `gaps_outer` and `gaps_inner` properties on containers are now removed as they just read the `gaps_inner` from the workspace.\r\n\r\n`gaps inner|outer <px>` no longer changes the gaps for all workspaces. It only sets defaults for new workspaces.\r\n\r\n`gaps inner|outer current|workspace|all set|plus|minus <px>` is now runtime only, and the workspace option is now removed. `current` now sets gaps for the current workspace as opposed to the current container.\r\n\r\n`workspace <ws> gaps inner|outer <px>` is now implemented. This sets defaults for a workspace.\r\n\r\nThis also fixes a bug where changing the layout of a split container from linear to tabbed would cause gaps to not be applied to it until you switch to another workspace and back.\r\n\r\ni3-gaps docs: https://github.com/Airblader/i3#gaps\r\n\r\nSupersedes/closes #2131.": {
        "include/sway/config.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands/gaps.c": 1,
        "sway/commands/layout.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/sway.5.scd": 1,
        "sway/tree/container.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Make it clear that being able to restore root is a failureRelated to #3024": {
        "sway/main.c": 1
    },
    "Make mod+resize work in any directionThis makes it so if you hold mod and right click on a surface to resize it, the resize direction is chosen based on which quarter of the surface you've clicked. The previous implementation only resized towards the bottom right.": {
        "sway/input/cursor.c": 1
    },
    "Make outputs dirty when changing focusFixes a workspace switch bug introduced by 5967ee1fbcba66ea57d971b924a51209a70d3aaa.": {
        "sway/input/seat.c": 1
    },
    "Make seat_get_active_child ignore floating children`seat_get_active_child` is used to get the active tiling child in a few places, such as outputs getting their active workspace and tabbed/stacked containers getting their visible child. When a workspace uses a tabbed or stacked layout and contains a focused floating view, calling `seat_get_active_child` on the workspace would incorrectly return the floating view. This changes it so it will return the tiling child.\r\n\r\nThis fixes the following bug:\r\n\r\n* Create layout `T[view view]` then float one of the views\r\n* Attempt to click the tiling view to give it focus - it wouldn't work because `seat_get_active_child` would return the floating view": {
        "include/sway/input/seat.h": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/move.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Make separate gaps functions per container typeIn preparation for using type safety.": {
        "include/sway/tree/arrange.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Make workspace back_and_forth seat-specific* When using multiple seats, each seat has its own `prev_workspace_name` for the purpose of `workspace back_and_forth`.\r\n* Removes `prev_workspace_name` global variable.\r\n* Removes unused `next_name_map` function in `tree/workspace.c`.\r\n* Fixes memory leak in `seat_destroy` (`seat` was not freed).\r\n\r\nTested using `workspace back_and_forth`, `move container to workspace back_and_forth`, and `reload`.": {
        "include/sway/input/seat.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands/move.c": 1,
        "sway/commands/swap.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Man page: Correct argument format for output position config": {
        "sway/sway.5.scd": 1
    },
    "Meson: Fix SYSCONFDIR definition```SYSCONFDIR``` was set to the wrong path if ```prefix``` is not ```'/usr'``` and\r\n```sysconfdir``` is an absolute path. Use ```join_paths()``` to fix it.\r\n\r\nAlso remove the special case for ```prefix``` ```'/usr'```. In that case Meson\r\nalready sets ```sysconfdir``` to the absolute path ```'/etc'```, so just using\r\n```join_paths()``` will return the correct value.\r\n\r\n    join_paths('/usr/local', 'etc') => '/usr/local/etc'\r\n    join_paths('/usr/local', '/etc') => '/etc'\r\n    join_paths('/usr', '/etc') => '/etc'\r\n\r\nThis should allow building and installing to '/usr/local' while storing configuration data like pam settings in ```/etc```. (#3096)": {
        "meson.build": 1
    },
    "Minor refactor of input managerThe input manager is a singleton object. Passing the `sway_input_manager` argument to each of its functions is unnecessary, while removing the argument makes it obvious to the caller that it's a singleton. This patch removes the argument and makes the input manager use `server.input` instead.\r\n\r\nOn a similar note:\r\n\r\n* `sway_input_manager.server` is removed in favour of using the `server` global.\r\n* `seat.input` is removed because it can get it from `server.input`.\r\n\r\nDue to a circular dependency, creating seat0 is now done directly in `server_init` rather than in `input_manager_create`. This is because creating seats must be done after `server.input` is set.\r\n\r\nLastly, it now stores the default seat name using a constant and removes a second reference to seat0 (in `input_manager_get_default_seat`).": {
        "include/sway/input/input-manager.h": 1,
        "include/sway/input/seat.h": 1,
        "sway/commands.c": 1,
        "sway/commands/border.c": 1,
        "sway/commands/input.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/scratchpad.c": 1,
        "sway/commands/swap.c": 1,
        "sway/config.c": 1,
        "sway/criteria.c": 1,
        "sway/debug-tree.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1,
        "sway/server.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/output.c": 1,
        "sway/tree/root.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "More commandsRef #2336 \r\n\r\n- [x] nop\r\n- [x] fix set\r\n- [x] fix some workspace shenanigans\r\n- [x] fix exec quoting\r\n- [x] assign\r\n\r\nDon't think I will do `popup_during_fullscreen`, ~`force_display_urgency_hint`~ or `force_on_window_activation` in this PR since it's mainly just fixing things": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/criteria.h": 1,
        "sway/commands.c": 1,
        "sway/commands/assign.c": 1,
        "sway/commands/exec_always.c": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/rename.c": 1,
        "sway/commands/set.c": 1,
        "sway/commands/sticky.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/meson.build": 1,
        "sway/sway.5.scd": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Move sticky containers in output_evacuateWhen evacuating an output, sticky containers need to be moved to a different output. Currently, they are not moved since `workspace_is_empty` returns `true` when there are only sticky containers.\r\n\r\nThis PR adds an additional check after the `workspace_is_empty` call that checks whether there are `floating` containers. If there are, they must all be sticky. The sticky containers get moved to another output and the workspace gets destroyed as normal.": {
        "sway/tree/container.c": 1,
        "sway/tree/output.c": 1
    },
    "Move sticky containers when switching workspace via criteria* Create a view on workspace 1\r\n* Switch to workspace 2 (on the same output) and create a floating sticky view\r\n* Use criteria to focus the view on workspace 1\r\n\r\nIn master, the sticky container remains on workspace 2 and is not rendered. In this PR it is relocated to workspace 1. This is because the code that moves the sticky containers was in `workspace_switch` which is not called when using the above method. This patch relocates the sticky-moving code into `seat_set_focus_warp`.\r\n\r\nA side effect of this patch is that if you have a sticky container focused and then switch workspaces, the sticky container will no longer be focused. It would previously retain focus. I think unfocusing is desirable though, as the user's intention is to focus whatever's on the workspace.\r\n\r\nIn `seat_set_focus_warp`, `new_output_last_ws` was only set when changing outputs, but now it's always set. This means `new_output_last_ws` and `last_workspace` might point to the same workspace, which means we have to make sure we don't destroy it twice. It now checks to make sure they're different, and to make this more obvious I've moved both calls to `workspace_consider_destroy` to be next to each other.": {
        "sway/input/seat.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Move swaylock PAM policy to /etc/pam.d.Fixes #3096.\r\n": {
        "swaylock/meson.build": 1
    },
    "Move view border properties to container structThis will be needed to implement layout saving and restoring, as we need to be able to configure borders on a placeholder container which has no view.": {
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands/border.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/input/cursor.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Move view marks properties to container structLike border properties, this will be needed to implement layout saving and restoring.": {
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands/client.c": 1,
        "sway/commands/mark.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/reload.c": 1,
        "sway/commands/show_marks.c": 1,
        "sway/commands/swap.c": 1,
        "sway/commands/unmark.c": 1,
        "sway/criteria.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Move view {x,y,width,height} into container structThis renames/moves the following properties:\r\n\r\n* `sway_view.{x,y,width,height}` -> `sway_container.content_{x,y,width,height}`\r\n    * This is required to support placeholder containers as they don't have a view.\r\n* `sway_container_state.view_{x,y,width,height}` -> `sway_container_state.content_{x,y,width,height}`\r\n    * To remain consistent with the above.\r\n* `sway_container_state.con_{x,y,width,height}` -> `sway_container_state.{x,y,width,height}`\r\n    * The `con` prefix was there to give it contrast from the view properties, and is no longer useful.\r\n\r\nThe function `container_set_geometry_from_floating_view` has also been renamed to `container_set_geometry_from_content`.": {
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands/border.c": 1,
        "sway/commands/resize.c": 1,
        "sway/desktop/desktop.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/ipc-json.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Move workspace moving code out of container_move_to`container_move_to` handled moving containers to new parents, as well as moving workspaces to new outputs.\r\n\r\nThis commit removes the workspace-moving code from this function and introduces `workspace_move_to_output`. Moving workspaces using `container_move_to` only happened from the move command, so it's been implemented as a static function in that file.\r\n\r\nSimplifying `container_move_to` makes it easier for me to fix some issues in #2420.": {
        "sway/commands/move.c": 1,
        "sway/tree/layout.c": 1
    },
    "Only consider tiling views for gaps outerFixes #2802 ": {
        "sway/tree/workspace.c": 1
    },
    "Only damage popups when popups have damageThe previous behaviour was to damage the entire view, which would recurse into each popup. This patch makes it damage only the popup's surface, and respect the surface damage given by the client.\r\n\r\nThis adds listeners to the popup's map and unmap events rather than doing the damage in the create and destroy functions. To get the popup's position relative to the view, a new `child_impl` function `get_root_coords` has been introduced, which traverses up the parents.\r\n\r\nFixes #2601": {
        "include/sway/tree/view.h": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/tree/view.c": 1
    },
    "Only show cursor if pointer configuredFixes https://github.com/swaywm/sway/issues/1568\r\n\r\nThe implementation works, idk if it's any good though. Also haven't dealt with tablet pads because I don't have one.\r\n\r\nPossible FR: some sort of seat sub-command `show_cursor yes|no|auto`": {
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1
    },
    "Overhaul swaybar protocol handling (+fixes)Should fix #2177\r\n\r\nThis replaces the somewhat dodgy old implementation with something a bit more sensible, I think.\r\n\r\nBoth protocols now properly handle long and multiple statuses. The old i3bar handling also allowed dodgy JSON to be sent, as long as it starts with a valid array, which this fixes.\r\n\r\nI've tried it with many different status commands, but I may have missed something so please test if you have anything unconventional. Might also want to test performance as well, seems fine but I haven't tested it thoroughly.\r\n\r\n~One annoying thing is that since everything works in the one buffer, it is not trivial to print received JSON for debugging (since we cannot simply add a null-terminator). Ideas for adding it back in:~\r\n~1. copy the string each time a valid array is encountered, then print it at the end; good if we assume that most of the time, only one status with be sent at a time;~\r\n~2. don't drop the last json object, keep it around in the buffer, then add a null-terminator at the end and print it; good if we assume that most of the time, the buffer won't in fact overflow.~\r\n~Thoughts? I think the second option is probably better.~\r\n\r\nIn the end, I didn't go with either of the above options, instead, I printed each object as they came (using some buffer shenanigans to avoid copying the string), but printed another message for what actually gets rendered.\r\n\r\n\r\nAlso leave comments about ~function/~ variable names, they may not be the best.\r\n\r\nOne thing I did realise afterwards is that `read_line_buffer` skips over `\\r` but I haven't bothered to do that, not sure if that's wanted.\r\n\r\nNote: there is a small issue with the bar immediately exiting due to invalid JSON which I thought I had fixed but still occurs occasionally. I'm also not sure why it exits rather than just display the error message. I think it might have something to do with receiving null bytes from the stream.": {
        "common/readline.c": 1,
        "include/swaybar/event_loop.h": 1,
        "include/swaybar/status_line.h": 1,
        "swaybar/event_loop.c": 1,
        "swaybar/i3bar.c": 1,
        "swaybar/render.c": 1,
        "swaybar/status_line.c": 1
    },
    "Parse floating criteriaThis makes the criteria parser recognize the \"floating\" token. From there on the criteria seems to be handled as expected.": {
        "sway/criteria.c": 1
    },
    "Parse missing i3 window typesfixes the parsing part of #2906 \r\n\r\nSee https://github.com/i3/i3/blob/bde4f40b67b217f98982d1b2f0d7b877d31ed5e4/src/match.c#L318-L326 for window type names of i3\r\n\r\nI'm unsure if some of the new atoms should be added to the [list of `wants_floating`](https://github.com/swaywm/sway/blob/master/sway/desktop/xwayland.c#L227) window types.": {
        "include/sway/xwayland.h": 1,
        "sway/criteria.c": 1,
        "sway/desktop/xwayland.c": 1
    },
    "Pre-parse binding commandsHi there!\r\n\r\nThis PR shifts complexity from runtime to setup, so that keyboard and mouse bindings always execute their associated command, even when allocation fails. This change has the additional benefit of validating all commands on startup.\r\n\r\n(I would have preferred a zero-allocation command parsing method, but variable substitution and string escaping make the latter task almost impossible unless you maintain a 'large-enough' temporary buffer for string rewriting and then provide either a custom allocator or move away from null-terminated strings. I really would like to find a cleaner solution.)\r\n\r\nAs criteria are rarely used (I've yet to see an i3 config with more than a few, and don't require any myself), the corresponding code has gone mostly untested. Is there a test config file that includes everything?\r\n\r\nFYI, `list_t` managed to be ambiguous once or twice, as I forgot if it was a pointer or plain struct.\r\n\r\nPlease review.\r\n\r\n": {},
    "Prepare arrange code for type safe argumentsThis commit changes the arrange code in a way that will support type safe arguments.\r\n\r\nThe `arrange_output` et al functions are now public, however I opted not to use them directly yet. I've kept the generic `arrange_windows` there for convenience until type safety is fully implemented. This means this patch has much less risk of breaking things as it would otherwise.\r\n\r\nTo be type safe, `arrange_children_of` cannot exist in its previous form because the thing passed to it could be either a workspace or a container. So it's now renamed to `arrange_children` and accepts a `list_t`, as well as the parent layout and parent's box.\r\n\r\nThere was some code which checked the grandparent's layout to see if it was tabbed or stacked and adjusted the Y offset of the grandchild accordingly. Accessing the grandparent layout isn't easy when using type safe arguments, and it seemed odd to even need to do this. I determined that this was needed because a child of a tabbed container would have a swayc Y matching the top of the tab bar. I've changed this so a child of a tabbed container will have a swayc Y matching the bottom of the tab bar, which means we don't need to access the grandparent layout. Some tweaks to the rendering and autoconfigure code have been made to implement this, and the `container_at` code appears to work without needing any changes.\r\n\r\n`arrange_children_of` (now `arrange_children`) would check if the parent had gaps and would copy them to the child, effectively making the workspace's gaps recurse into all children. We can't do this any more without passing `has_gaps`, `gaps_inner` and `gaps_outer` as arguments to `arrange_children`, so I've changed the `add_gaps` function to retrieve it from the workspace directly.\r\n\r\n`apply_tabbed_or_stacked_layout` has been split into two functions, as it had different logic depending on the layout.\r\n\r\nLastly, `arrange.h` had an unnecessary include of `transaction.h`. I've removed it, which means I've had to add it to several other files.": {
        "include/sway/tree/arrange.h": 1,
        "sway/commands/layout.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/root.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Preserve workspace name": {
        "sway/tree/workspace.c": 1
    },
    "Prevent excessive frame events when we ignore a frameIn wlroots, if the compositor doesn't swap the output's buffers in response to a frame event then wlroots would emit a frame event whenever the Wayland event loop becomes idle, and do so repeatedly, because the idle event source is only removed when the buffers are swapped.\r\n\r\nA proper fix for this is to make wlroots request frames from the backend, but in the interim this patch disables the idle event source if we're ignoring the frame event.\r\n\r\nThis prevents sway from throttling the CPU when mpv displays album art when mpv is using the wayland backend.\r\n\r\nThis also adds a missing call to `pixman_region32_fini`.\r\n\r\nFixes #2748": {
        "sway/desktop/output.c": 1
    },
    "Prevent overriding background mode after it's been set.Fixes #2867.\r\nI have added a new variant of the `background_mode` enum called `BACKGROUND_MODE_UNSET`. This is probably not the best solution. ": {
        "swaylock/main.c": 1
    },
    "Prevent sticky containers from jumping on workspace switchIf you have swaybar docked to the top, and you create a floating sticky container and switch workspaces on the same output, the sticky container would move down by the height of swaybar on each switch.\r\n\r\nThis happens because when creating the workspace we set the dimensions to the same as the output, then the subsequent arrange corrects it. During this arrange, floating containers are translated so they stay relative to the workspace. This translation needs to not occur for the initial arrange.\r\n\r\nThis patch makes workspaces have a zero width and height when first created, so we can detect whether this is the initial arrange and avoid translating the floating containers if so.": {
        "sway/tree/arrange.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Put swaybar in overlay layer when using mode hideThis allows the bar to render over fullscreen views.\r\n\r\nFixes #2832.": {
        "swaybar/bar.c": 1
    },
    "Rebase the cursor after applying transactionsThis approaches cursor rebasing from a different angle. Rather than littering the codebase with `cursor_rebase` calls and using transaction callbacks, this just runs `cursor_rebase` after applying every transaction - but only if there's outputs connected, because otherwise it causes a crash during shutdown.\r\n\r\nThere is one known case where we still need to call `cursor_rebase` directly, and that's when running `seat seat0 cursor move ...`. This command doesn't set anything as dirty so no transaction occurs.": {
        "include/sway/desktop/transaction.h": 1,
        "sway/commands/border.c": 1,
        "sway/commands/focus.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Rebase the cursor after focusing in a directionPrior to this patch, creating a tabbed container with two views, switching tab and then scrolling without motion would cause the scroll events to be sent to the old focus. To fix this, rebasing the cursor is needed after changing focus.\r\n\r\nFixes #2945.": {
        "sway/commands/focus.c": 1
    },
    "Rebase the cursor after mapping a viewI originally put the rebase at the end of view_map, but at this point the view is still at its native size and will ignore the motion event if it falls outside of its native size. The only way to do this properly is to rebase the cursor later - either after sending the configure, after the view commits with the new size, or after applying the transaction. I chose to do it after applying the transaction for simplicity.\r\n\r\nI then attempted to just call `cursor_rebase` after applying every transaction, but this causes crashes when exiting sway (and possibly other places) because `cursor_rebase` assumes the tree is in a valid state.\r\n\r\nSo my chosen solution introduces `transaction_commit_dirty_with_callback` which allows `handle_map` to register a callback which will run when the transaction is applied.\r\n\r\nFixes #2949.\r\n\r\nMight be a fix for #2946, but I can't reproduce that.": {
        "include/sway/desktop/transaction.h": 1,
        "sway/desktop/transaction.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1
    },
    "Reconfigure xwayland views when repositionedFixes #2673.": {
        "sway/desktop/transaction.c": 1
    },
    "Refactor destroy functions and save workspaces when there's no outputsThis changes the destroy functions to the following:\r\n\r\n* `output_begin_destroy`\r\n* `output_destroy`\r\n* `workspace_begin_destroy`\r\n* `workspace_destroy`\r\n* `container_begin_destroy`\r\n* `container_destroy`\r\n* `view_begin_destroy`\r\n* `view_destroy`\r\n\r\nThe terminology was `destroy` and `free`, and it has been changed to `begin_destroy` and `destroy` respectively.\r\n\r\nWhen the last output is disconnected, its workspaces will now be stashed in the root. Upon connection of a new output they will be restored.\r\n\r\nThere is a new function `workspace_consider_destroy` which decides whether the given workspace should be destroyed or not (ie. empty and not visible).\r\n\r\nCalling `container_begin_destroy` will no longer automatically reap the parents. In some places we want to reap the parents and in some we don't, so this is left to the caller.\r\n\r\n`container_reap_empty_recursive` and `container_reap_empty` have been combined into one function and it will recurse up the tree.\r\n\r\nThis needs testing with output hotplugging, and unplugging the last output to see what happens.\r\n\r\nDespite adding more functions, I've somehow managed to delete more code than I've added :)": {
        "include/sway/output.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/root.h": 1,
        "include/sway/tree/view.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands/move.c": 1,
        "sway/config/output.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/output.c": 1,
        "sway/tree/root.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Refactor seat_get_focus functionsFixes #2467.\r\n\r\nThis commit introduces `seat_get_focus_inactive_floating` to supplement `seat_get_focus_inactive_tiling`, and uses it during `focus mode_toggle` which fixes a focus bug.\r\n\r\nThis also refactors the `seat_get_focus_inactive` functions so that they do their selection logic themselves rather than offloading it to `seat_get_focus_by_type` which was getting bloated. `seat_get_focus_by_type` is now removed.\r\n\r\nLastly, this commit changes `seat_get_focus` to just return the first container in the focus stack rather than looping and calling `seat_get_focus_by_type`.": {
        "include/sway/input/seat.h": 1,
        "sway/commands/focus.c": 1,
        "sway/input/seat.c": 1
    },
    "Refactor surface iteratorsThe current iterators design is very confusing. This PR will:\r\n- Remove `struct root_geometry`\r\n- Remove `output_get_surface_box`\r\n\r\nUpdates #2291": {
        "include/sway/output.h": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1
    },
    "Refactor view_map* Move workspace selection into separate function\r\n* Instead of keeping a `prev_focus` variable, do the check in `should_focus` (ie. views can only take focus if they're mapped into the active workspace)\r\n* Fix assign-to-output - it previously set `prev_focus` but should be `target_sibling`\r\n* Remove call to `workspace_switch` as we'll only ever focus the view if it's in the active workspace": {
        "sway/tree/view.c": 1
    },
    "Reload config using idle eventThis patch makes it so when you run `reload`, the actual reloading is deferred to the next time the event loop becomes idle. This avoids several use-after-frees and removes the workarounds we have to avoid them.\r\n\r\nWhen you run `reload`, we validate the config before creating the idle event. This is so the reload command will still return an error if there are validation errors. To allow this, `load_main_config` has been adjusted so it doesn't apply the config if `validating` is true rather than applying it unconditionally.\r\n\r\nThis also fixes a memory leak in the reload command where if the config failed to load, the `bar_ids` list would not be freed.\r\n\r\nTo test:\r\n\r\n* Change config and reload, verify new config applied\r\n* Hold the binding for reload\r\n* Introduce a validation error and reload your config, eg. by renaming your config file to something else before reloading (it appears that command validation errors are not reported by swaymsg, even in master)": {
        "include/sway/config.h": 1,
        "sway/commands/bind.c": 1,
        "sway/commands/reload.c": 1,
        "sway/commands/seat/attach.c": 1,
        "sway/commands/seat/fallback.c": 1,
        "sway/config.c": 1,
        "sway/input/keyboard.c": 1
    },
    "Relocate container_move, container_move_to and container_get_in_direction* `container_move` is only called from the move command\r\n* `container_move_to` was called from both the move command and the sticky command, but the sticky command can easily not call it\r\n* `container_get_in_direction` is only called from the focus command\r\n\r\nMoving these functions to their respective commands gives better separation of code and removes bloat from `layout.c`. These functions will need to be refactored to take advantage of type safety, so separating them will make this easier to refactor.\r\n\r\nThe following static functions have also been moved:\r\n\r\n* `is_parellel`\r\n* `invert_movement`\r\n* `move_offs`\r\n* `container_limit`\r\n* `workspace_rejigger`\r\n* `move_out_of_tabs_stacks`\r\n* `get_swayc_in_output_direction`\r\n\r\nThey were all used by the move functions, except for the last one which is used by focus.\r\n\r\nOther changes:\r\n\r\n* `index_child` has been renamed to `container_sibling_index`, moved to `container.c` and made public\r\n* `sway_output_from_wlr` has been renamed to `output_from_wlr_output`, moved to `output.c` and made public\r\n* `container_handle_fullscreen_reparent` has been made public\r\n* `sway_dir_to_wlr` has been made public\r\n\r\nNo changes have been made to any of the moved functions, other than updating calls to functions that have been renamed.": {
        "include/sway/output.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/sticky.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/output.c": 1
    },
    "Remove __PRETTY_FUNCTION__This is a non-standard extension as well as completely useless in C.\r\n__func__ is the standard way of doing this.": {
        "include/log.h": 1
    },
    "Remove bad assertion in workspace_rejiggerThe assertion can be (rightfully) triggered by creating layout `V[H[view view] view]` and moving the top right view to the right.\r\n\r\nAfter removing the assertion I found the container being moved needs its size reset to prevent it from being sized wrongly after arranging.": {
        "sway/commands/move.c": 1
    },
    "Remove container_for_each_descendant_bfsThe function was not used.\r\n\r\nAlso renames `container_for_each_descendant_dfs` to just `container_for_each_descendant`.": {
        "include/sway/tree/container.h": 1,
        "sway/commands/hide_edge_borders.c": 1,
        "sway/commands/show_marks.c": 1,
        "sway/commands/unmark.c": 1,
        "sway/config.c": 1,
        "sway/criteria.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-server.c": 1,
        "sway/tree/container.c": 1
    },
    "Remove container_has_childIn all cases you can use `container_has_ancestor` with the arguments swapped, which is faster than `container_has_child`.": {
        "include/sway/tree/container.h": 1,
        "sway/input/seat.c": 1,
        "sway/tree/container.c": 1
    },
    "Remove cursor warping from seat_set_focusBecause cursor warping was the default behaviour in `seat_set_focus`, there may be cases where we may have been warping the cursor unintentionally. This patch removes cursor warping from `seat_set_focus` and only does it in the `focus` command. This is managed by a static function in `focus.c`.\r\n\r\nTo know whether to warp or not, we need to know which node had focus previously. To keep track of this easily, `seat->prev_focus` has been introduced and is set to the previous in `seat_set_focus`.": {
        "include/sway/input/seat.h": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/swap.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1
    },
    "Remove enum movement_directionThere's no point having both `movement_direction` and `wlr_direction`. This replaces the former with the latter.\r\n\r\nAs `movement_direction` also contained `MOVE_PARENT` and `MOVE_CHILD` items, these are now checked specifically in the focus command and handled in separate functions, just like the other focus variants.\r\n\r\nThis is progress towards #3030.": {
        "common/util.c": 1,
        "include/sway/output.h": 1,
        "include/sway/tree/container.h": 1,
        "include/util.h": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/move.c": 1,
        "sway/tree/output.c": 1
    },
    "Remove extra line. This commit removes an unnecessary line from config.c.": {
        "sway/config.c": 1
    },
    "Remove last vestiges of sway_logCloses https://github.com/swaywm/sway/issues/1864\r\n\r\nPersonally, I think the wlroots CONTRIBUTING.md is better, maybe this one should be updated with some information from there.\r\n": {
        "CONTRIBUTING.md": 1
    },
    "Remove layout.cWhen we have type safety we'll need to have functions for `workspace_add_tiling` and so on. This means the existing container functions will be just for containers, so they are being moved to `container.c`. At this point `layout.c` doesn't contain much else, so I've relocated everything and removed the file.\r\n\r\n* `container_swap` and its static functions have been moved to the swap command and made static.\r\n* `container_recursive_resize` has been moved to the resize command and made static.\r\n* The following have been moved to `container.c`:\r\n    * `container_handle_fullscreen_reparent`\r\n    * `container_insert_child`\r\n    * `container_add_sibling`\r\n    * `container_add_child`\r\n    * `container_remove_child`\r\n    * `container_replace_child`\r\n    * `container_split`\r\n* `enum movement_direction` and `sway_dir_to_wlr` have been moved to `util.c`.\r\n\r\nNo changes have been made to any of the functions.\r\n\r\nSide note: Several commands included `layout.h` which then included `root.h`. With `layout.h` gone, `root.h` has to be included by those commands.": {
        "common/util.c": 1,
        "include/sway/config.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "include/util.h": 1,
        "sway/commands/exec_always.c": 1,
        "sway/commands/floating.c": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/fullscreen.c": 1,
        "sway/commands/hide_edge_borders.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/output.c": 1,
        "sway/commands/resize.c": 1,
        "sway/commands/show_marks.c": 1,
        "sway/commands/sticky.c": 1,
        "sway/commands/swap.c": 1,
        "sway/commands/unmark.c": 1,
        "sway/commands/urgent.c": 1,
        "sway/config.c": 1,
        "sway/config/output.c": 1,
        "sway/criteria.c": 1,
        "sway/debug-tree.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1
    },
    "Remove libcap/prctl artifactsThey seem like relics of the pasts, from when we were retaining the\r\nptrace cap.\r\n\r\nSome translations still may need updates.": {
        "include/sway/config.h": 1,
        "include/sway/debug.h": 1,
        "include/sway/ipc-json.h": 1,
        "include/swaybar/config.h": 1,
        "include/swaybar/tray/dbus.h": 1,
        "include/swaybar/tray/sni_watcher.h": 1,
        "include/swaybar/tray/tray.h": 1,
        "meson.build": 1,
        "sway/config/seat.c": 1,
        "sway/debug-tree.c": 1,
        "sway/input/cursor.c": 1,
        "sway/ipc-json.c": 1,
        "sway/main.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "swaybar/config.c": 1,
        "swayidle/main.c": 1,
        "swaylock/main.c": 1,
        "swaynag/config.c": 1
    },
    "Remove move_out_of_tabs_stacksThis fixes the following. Create these layouts and run `move right`:\r\n\r\n(Initial layout -> expected result -> actual result)\r\n\r\n* `H[S[unfocused focused] unfocused]` -> `H[S[unfocused] focused unfocused]` -> `H[H[S[unfocused] focused] unfocused]`\r\n* `H[S[unfocused focused] V[unfocused]]` -> `H[S[unfocused] V[unfocused focused]]` -> `H[H[S[unfocused] focused] V[unfocused]]`\r\n\r\n`move_out_of_tabs_stacks` was originally made to allow views to move out of the tabbed/stacked container in the parallel direction, but at some point this has started working using the regular logic.\r\n\r\nFixes #2689.": {
        "sway/commands/move.c": 1
    },
    "Remove obsolete base64.c fileAppears to be left over from the old `get_clipboard` command": {
        "include/util.h": 1,
        "sway/base64.c": 1
    },
    "Remove raise_floating directiveThe directive controlled whether floating views should raise to the top when the cursor is moved over it while using `focus_follows_mouse`. The default was enabled, which is undesirable. For example, if you have two floating views where one completely covers the other, the smaller one would be inaccessible because moving the mouse over the bigger one would raise it above the smaller one.\r\n\r\nThere is no known use case for having `raise_floating` enabled, so this patch removes the directive and implements the `raise_floating` disabled behaviour instead.\r\n\r\nResolves some comments in #2425.": {
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "sway/commands.c": 1,
        "sway/commands/raise_floating.c": 1,
        "sway/config.c": 1,
        "sway/input/seat.c": 1,
        "sway/meson.build": 1,
        "sway/sway.5.scd": 1
    },
    "Remove redundant container creation in view initialisationSince the container is already assigned in ~`view_create`~ ~`view_init`~ `view_map`.\r\n\r\nSeems to work, hope I'm not missing something.": {
        "sway/tree/view.c": 1
    },
    "Remove resolve_path() from utilsThis reverts commit c9694ee63d451da62dc50b234b3080a35a40e844.\r\n\r\nI saw that the function remains unused and could be removed.": {
        "common/util.c": 1,
        "include/util.h": 1
    },
    "Rename container_sort_workspaces and container_wrap_children* Renames `container_sort_workspaces` to `output_sort_workspaces` and moves it to `output.c`.\r\n* Renames `container_wrap_children` to `workspace_wrap_children` and moves it to `workspace.c`. This function is only called with workspaces.\r\n\r\nThese functions will eventually take a `sway_output` and `sway_workspace` as their arguments, hence why they're being renamed and moved.": {
        "include/sway/output.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands/floating.c": 1,
        "sway/commands/fullscreen.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/rename.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/output.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Rename sway_root.outputs to sway_root.all_outputsThis list includes disabled outputs.\r\n\r\nWhen `sway_container` is demoted, we'll need to store the root's children (ie. enabled outputs) in the `sway_root`. It makes sense to put these in a list called `outputs`, so I'm renaming the existing list in advance.": {
        "include/sway/tree/root.h": 1,
        "sway/config/output.c": 1,
        "sway/desktop/output.c": 1,
        "sway/ipc-server.c": 1,
        "sway/tree/root.c": 1
    },
    "Rename workspace_outputs to workspace_configs and fix memory leakWhen we eventually implement `workspace <ws> gaps inner|outer <px>`, we'll need to store the gaps settings for workspaces before they're created. Rather than create a `workspace_gaps` struct, the approach I'm taking is to rename `workspace_outputs` to `workspace_configs` and then add gaps settings to that.\r\n\r\nI've added a lookup function `workspace_find_config`. Note that we have a similar thing for outputs (`output_config` struct and `output_find_config`).\r\n\r\nLastly, when freeing config it would create a memory leak by freeing the list items but not the workspace or output names inside them. This has been rectified using a `free_workspace_config` function.": {
        "include/sway/config.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands/workspace.c": 1,
        "sway/config.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Render LAYER_TOP surfaces above fullscreenThis allows e.g. mako to be visible over a fullscreen container.": {
        "sway/desktop/render.c": 1
    },
    "Render fonts slightly nicer Set cairo font options to render text and lines with subpixel hinting (if available).\r\n\r\nI've been running sway with this patch for several months and I prefer it.": {
        "common/cairo.c": 1,
        "include/cairo.h": 1,
        "include/swaybar/bar.h": 1,
        "include/swaylock/swaylock.h": 1,
        "sway/tree/container.c": 1,
        "swaybar/bar.c": 1,
        "swaybar/render.c": 1,
        "swaylock/main.c": 1,
        "swaylock/render.c": 1
    },
    "Render software cursors with wlr_output_render_software_cursorsUpdate for https://github.com/swaywm/wlroots/pull/1366": {
        "sway/desktop/render.c": 1
    },
    "Replace _XOPEN_SOURCE with _POSIX_C_SOURCEAnd make sure we don't define both in the same source file.": {
        "common/stringop.c": 1,
        "sway/commands/assign.c": 1,
        "sway/commands/bar/bindsym.c": 1,
        "sway/commands/bar/hidden_state.c": 1,
        "sway/commands/bar/icon_theme.c": 1,
        "sway/commands/bar/id.c": 1,
        "sway/commands/bar/mode.c": 1,
        "sway/commands/bar/output.c": 1,
        "sway/commands/bar/separator_symbol.c": 1,
        "sway/commands/bar/tray_output.c": 1,
        "sway/commands/bind.c": 1,
        "sway/commands/exec_always.c": 1,
        "sway/commands/for_window.c": 1,
        "sway/commands/input/xkb_layout.c": 1,
        "sway/commands/input/xkb_model.c": 1,
        "sway/commands/input/xkb_options.c": 1,
        "sway/commands/input/xkb_rules.c": 1,
        "sway/commands/input/xkb_variant.c": 1,
        "sway/commands/mode.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/no_focus.c": 1,
        "sway/commands/reload.c": 1,
        "sway/commands/rename.c": 1,
        "sway/commands/seat/attach.c": 1,
        "sway/commands/seat/cursor.c": 1,
        "sway/commands/set.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/config.c": 1,
        "sway/config/bar.c": 1,
        "sway/config/input.c": 1,
        "sway/config/output.c": 1,
        "sway/config/seat.c": 1,
        "sway/criteria.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/seat.c": 1,
        "sway/main.c": 1,
        "sway/security.c": 1,
        "swaybar/bar.c": 1,
        "swaybar/config.c": 1,
        "swaybar/main.c": 1,
        "swaylock/main.c": 1,
        "swaylock/pam.c": 1,
        "swaylock/password.c": 1,
        "swaylock/render.c": 1,
        "swaylock/shadow.c": 1,
        "swaymsg/main.c": 1,
        "swaynag/config.c": 1,
        "swaynag/main.c": 1,
        "swaynag/swaynag.c": 1,
        "swaynag/types.c": 1
    },
    "Replace enum resize_edge with wlr_edgesNo need to have two resize edge enums.": {
        "include/sway/tree/layout.h": 1,
        "sway/commands/resize.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/layout.c": 1
    },
    "Replace getdelim to make swaybar work on FreeBSDAs we have discussed in #2672 with @ianyfan, the Linux (glibc) and FreeBSD implementation of `getdelim` handles the \"no more data, delimiter not found, and EOF not reached\" scenario differently: FreeBSD handles it as an error, while Linux does not. This causes trouble with swaybar, since it uses `getdelim` with `EOF` as delimiter on an infinite stream, where `EOF` is never reached. \r\n\r\nThis commit replaces the `getdelim`/`getline` calls in the `PROTOCOL_UNDEF` phase of `status_handle_readable` with reading all available data from the stream in one go. This is achieved by first issuing a `FIONREAD` ioctl request to get how much data is available, and than using `read` to get it all.\r\n\r\nI have tested this with a i3's trivial-bar-script.sh, and the default config of i3status and py3status on both FreeBSD 12.0-CURRENT and Debian Buster.": {
        "swaybar/status_line.c": 1
    },
    "Replace hacky L_FLOATING container with a listWorkspaces previously had a magical `workspace->floating` container, which had a layout of `L_FLOATING` and whose children were actual floating views. This allowed some conveniences, but was a hacky solution because the container has to be exempt from focus, coordinate transactions with the workspace, and omit emitting IPC events (which we didn't do).\r\n\r\nThis commit changes it to be a list directly in the `sway_workspace`. The `L_FLOATING` layout is no longer used so this has been removed as well.\r\n\r\n* Fixes incorrect check in the swap command (it checked if the containers had the `L_FLOATING` layout, but this layout applied to the magical container).\r\n* Introduces `workspace_add_floating`.": {
        "include/sway/tree/container.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands/floating.c": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/scratchpad.c": 1,
        "sway/commands/swap.c": 1,
        "sway/debug-tree.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/root.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Reset outputs on reloadFixes #1752 \r\nFixes #2293\r\n\r\nThis PR creates default output configs for connected outputs when reloading. This ensures that when the output configs are applied, if an option is missing it is reset to the default instead of left unchanged.\r\n\r\nAdditionally, when reloading output configs are now applied after the entire config is read and before the deferred commands. This ensures that all workspace command bindings are read and the output does not incorrectly get assigned an automatic workspace name. This simulates the behavior that sway would have on a fresh start. ": {
        "include/sway/config.h": 1,
        "sway/commands/output.c": 1,
        "sway/config.c": 1,
        "sway/config/output.c": 1
    },
    "Reset signal mask after forkTo test: run i3status as swaybar status_command and/or from a terminal launched from sway, `killall -USR1 i3status`. i3status should refresh.": {
        "sway/commands/exec_always.c": 1,
        "sway/config/bar.c": 1
    },
    "Respect border settings when rendering lone tabbed/stacked childIn i3, when a child of a tabbed or stacked container has no siblings, its border settings are respected.\r\n\r\nThis patch achieves the same effect by rendering a lone tabbed/stacked child as if it's a linear container. This makes the border settings be respected.\r\n\r\nOver in `view_autoconfigure`, we compensate for this by only adjusting `y_offset` if there's multiple children.\r\n\r\nWhen the lone child is itself a split container, I'm taking a guess that rendering the tab title (containing the tree representation) is the ideal thing to do here.\r\n\r\nTested with `hide_edge_borders smart`, `hide_edge_borders none`, and with the lone child being a split container.\r\n\r\nFixes #2912.": {
        "sway/desktop/render.c": 1,
        "sway/tree/view.c": 1
    },
    "Restore focus correctly when closing a fullscreen viewWe weren't calling `seat_send_focus`. I think this was previously called by `seat_set_focus_warp`.\r\n\r\nFixes #2534.": {
        "sway/input/seat.c": 1
    },
    "Restore previous tabbed layout behaviorAs discussed in issue #3002 \r\nFixes #3002": {
        "sway/desktop/render.c": 1,
        "sway/tree/view.c": 1
    },
    "Return an error when resizing is a no opSee https://github.com/swaywm/sway/issues/1737#issuecomment-425583060": {
        "include/sway/commands.h": 1,
        "sway/commands/resize.c": 1
    },
    "Revert \"Refactor surface iterators\"Reverts swaywm/sway#2367": {
        "include/sway/output.h": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1
    },
    "Revert \"Work around swayidle never triggering on SIGUSR1\"Reverts swaywm/sway#3073": {
        "swayidle/main.c": 1
    },
    "Reword message about Nvidia drivers to be less snarkyMostly an opinionated request (so feel free to close), but I feel like the flag 'my-next-gpu-wont-be-nvidia' is unnecessarily snarky and a bit antagonistic towards those users, especially since the flag 'unsupported-gpu' already does the same thing without feeling so condescending.\r\n\r\nI haven't removed the flag for users who are already using it, but I've just changed the message about it to not mention it.": {
        "sway/main.c": 1
    },
    "Reworked fish completions and moved stuff in swaylock manpage* Added fish completions for swaynag and swayidle.\r\n* Updated completions for swaylock\r\n* Moved some sections in swaylock manpage to appearance": {
        "/dev/null": 1,
        "completions/fish/swaylock.fish": 1,
        "meson.build": 1,
        "swaylock/swaylock.1.scd": 1
    },
    "Second attempt at fixing transaction use-after-freeThe solution used in 073ac425d5bf6f6393eb91d9b5f84e3caa68f511 doesn't work in all cases because the freed instruction might be ahead in the list, not necessarily behind.\r\n\r\nThe new solution delays running the queue until after the loop has finished iterating, thus avoiding the problem completely.\r\n\r\nTo test, I opened filezilla (not firefox), floated it, then resized it violently using mod+resize. It would crash within several seconds.": {
        "sway/desktop/transaction.c": 1
    },
    "Second attempt at restoring focus when closing a fullscreen viewTo reproduce the problem this is fixing, create `H[view view view]`, fullscreen one of the views and close it. The entire workspace will be given focus rather than one of the siblings.\r\n\r\nThis happens because we emit the `destroy` event, so the seat code tries to find a new focus, but the view it finds is still believed to be hidden by the fullscreen view so it's discarded and the workspace is used instead.\r\n\r\nThis clears the workspace's fullscreen pointer prior to emitting the destroy event so that the seat code finds an appropriate new focus.": {
        "sway/tree/container.c": 1
    },
    "Send enter/leave events for floating viewsPreviously we used a reparent event to detect when a view changes parent, then sent an output enter/leave to the surfaces if needed. This worked for tiling views but not floating views, as floating views can intersect another output without changing parent.\r\n\r\nThe solution implemented for floating views also applies cleanly to tiling views, so the previous method has been completely replaced and the reparent event has been removed.\r\n\r\nThis introduces a new function `container_discover_outputs`. This function compares the container's `current` position to the outputs, sends enter and leave events as needed, and keeps track of which outputs it's intersecting in a new `container->outputs` list. If it has entered a new output with a different scale then the title and marks textures will also be recreated at the new scale.\r\n\r\nThe function is called when a transaction applies. This is convenient as it means we don't have to call it from various places.\r\n\r\nThere is imperfect rendering when a floating view overlaps two outputs with different scales. It renders correctly for the most recently entered output, but there is only one title texture so it renders incorrectly on the old output.\r\n\r\nTo test:\r\n\r\n* Move tiling containers to different outputs and check the title and marks textures scale\r\n* Move floating containers so they overlap multiple outputs and see the new output renders the title and marks texture correctly\r\n* Move a floating split container so it overlaps multiple outputs\r\n* Hotplug outputs and make sure it doesn't crash - I haven't tested this\r\n\r\nDebug log messages are printed when an enter or leave event occurs.\r\n\r\nFixes #2482 \r\nFixes #2485": {
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands/move.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1
    },
    "Separate root-related codeThis creates a `sway/tree/root.c` and moves bits and pieces from elsewhere into it.\r\n\r\n* `layout_init` has been renamed to `root_create` and moved into `root.c`\r\n* `root_destroy` has been created and is called on shutdown\r\n* scratchpad code has been moved into `root.c`, because hidden scratchpad containers are stored in the root struct. `scratchpad.c` no longer exists.\r\n\r\nI considered making `root_create` return the root container and making `root_destroy` accept the container as an argument, but if I did that then I'd want to make `root_container` a pointer and that involves updating all references to it. Opinions are welcome regarding this.\r\n\r\nI was going to move the workspace_pid tracking code into `root.c` as well, but realised that the workspace_pids are not stored in the root container. So I figured I'd leave that out and get feedback.": {
        "/dev/null": 1,
        "include/sway/scratchpad.h": 1,
        "include/sway/tree/layout.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands/exec_always.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/scratchpad.c": 1,
        "sway/main.c": 1,
        "sway/meson.build": 1,
        "sway/scratchpad.c": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Set focus_inactive on a sibling when a container closes in an inactive workspaceTo reproduce the problem, create layout `H[view V[view view view-focused]]`, then switch to another workspace and have the previously focused view in the vsplit close (eg. using criteria, or an mpv video finishing). Return to the workspace using `$mod+<num>` and the entire vsplit would be focused. This happens because `handle_seat_node_destroy` would only set a new focus if the currently focused view or a parent was being destroyed. To fix it, it needs to set a sibling of the destroying container to `focus_inactive` regardless of the current focus, then restore current focus if needed.\r\n\r\nThis patch changes the function accordingly. Additionally:\r\n\r\n* The function now makes an early return if the node being destroyed is a workspace.\r\n* `set_focus` has been renamed to `needs_new_focus`. This variable is true if the head focus needs to be changed.\r\n\r\nFixes #2625": {
        "sway/input/seat.c": 1
    },
    "Shim client.background and client.placeholderThese are not supported by sway, but are valid i3 commands and should not\r\ncause config errors.\r\n\r\nAlso includes a couple of minor touch-ups.": {
        "include/sway/commands.h": 1,
        "sway/commands.c": 1,
        "sway/commands/client.c": 1
    },
    "Show swaynag on config errorsCloses #545 \r\n\r\nThis PR spawns `swaynag` when there are errors in the config. When reloading, the spawned instance is killed and if needed, a new instance is spawned.\r\n\r\n~Additionally, this PR changes the allocation for the `error` field of `cmd_results` to get the size from `vsnprintf` instead of using a hard coded 256 bytes. This is to allow for the config error log for an included config to be passed as the error for the `include` command in the calling config.~\r\n\r\nI also added a `swaynag_command` command so that a custom path for swaynag or additional arguments can be given.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "sway/commands.c": 1,
        "sway/commands/include.c": 1,
        "sway/commands/reload.c": 1,
        "sway/config.c": 1,
        "sway/main.c": 1,
        "sway/meson.build": 1,
        "sway/sway.5.scd": 1
    },
    "Simplify runtime variable substitutionI've looked at #2084, and think that the difficulties in the current solution for runtime variable substitution (RVS) lie in that commands evaluated at runtime via `bindsym`, `bindcode`, and `for_window`, are preprocessed twice. By ensuring that the nested commands are kept unprocessed until runtime, RVS follows more intuitively.\r\n\r\nUnder this change, a config file might include this\r\n\r\n    set $term program\r\n    bindsym $mod+Return exec $term\r\n    exec $term\r\n    set $term other-program\r\n\r\nWhen the config file is read, `exec $term`  is preprocessed to `exec program` and is run. When `$mod+Return`, the asssociated command  `exec $term` is preprocessed to be `exec other-program`, \r\nand run.\r\n\r\nThis change rolls back the new syntax ($$var) introduced by #2084, but as that PR is recent and not yet in any stable releases, it shouldn't break any config files for people who should not already have been expecting it :-). It also ensures that the same level of string escaping is required for top-level commands\r\ninvocations as for nested command invocations.\r\n\r\n": {},
    "Simplify transactionsCommit 4b8e3a885be74c588291c51f798de80bd81a92db makes it so only one transaction is committed (ie. configures sent) at a time. This commit removes the now-unnecessary code which was used to support concurrent committed transactions.\r\n\r\n* Instead of containers storing a list of instructions which they've been sent, it now stores a single instruction.\r\n* Containers now have an `ntxnrefs` property. Previously we knew how many references there were by the length of the instruction list.\r\n* Instructions no longer need a `ready` property. It was used to avoid marking an instruction ready twice when they were in a list, but this is now avoided because there is only one instruction and we nullify the `container->instruction` pointer when it's ready.\r\n* When a transaction applies, we no longer need to consider releasing and resaving the surface, as we know there are no other committed transactions.\r\n* `transaction_notify_view_ready` has been renamed to `view_notify_view_ready_by_serial` to make it consistent with `transaction_notify_view_ready_by_size`.\r\n* Out-of-memory checks have been added when creating transactions and instructions.\r\n\r\nBTW, we should consider doing some testing while out of memory to see if/where sway crashes and make sure the user can recover from that situation.": {
        "include/sway/desktop/transaction.h": 1,
        "include/sway/tree/container.h": 1,
        "sway/desktop/transaction.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/root.c": 1
    },
    "Standardise debug variablesThis makes all debug options stored in a single struct rather than in various places, changes/fixes the behaviour of existing options, and introduces some new options.\r\n\r\n* Fixes damage issues with `-Drender-tree` texture (by removing scissor)\r\n* Offsets the render tree overlay's `y` position for those who have swaybar at the top\r\n* Replaces `-Ddamage=rerender` with `-Dnodamage`\r\n* Replaces `-Ddamage=highlight` with `-Dhighlight-damage`\r\n* Replaces `-Dtxn-debug` with `-Dtxn-wait`\r\n* Introduces `-Dnoatomic`\r\n* Removes the `create_time` and `ms_arranging` figures from transactions and the log message. Transactions are created after arranging and the create time is of no significance.\r\n* Fixes `-Dtxn-debug` (now `-Dtxn-wait`) not working.": {
        "include/sway/debug.h": 1,
        "include/sway/server.h": 1,
        "sway/debug-tree.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/main.c": 1,
        "sway/server.c": 1
    },
    "Stop floaters from snapping on move to new outputWhen moving a floating view/container to a new output using the mouse, the floating view/container would snap back to the center of the original output as soon as the center point crossed over.\r\n\r\nThis PR skips the `container_floating_move_to_center` call in `arrange_workspace` when the container is being operated on by the current seat. This makes it so the floater does not snap to the center of any workspace while being moved.": {
        "sway/tree/arrange.c": 1
    },
    "Sway clients: Exit gracefully when compositor is unavailableThe previous behaviour was to show an error and then crash. The new behaviour is to show a more helpful error then exit.": {
        "swaybar/bar.c": 1,
        "swaybg/main.c": 1,
        "swayidle/main.c": 1,
        "swaylock/main.c": 1,
        "swaynag/swaynag.c": 1
    },
    "Swayidle fixes": {
        "swayidle/main.c": 1
    },
    "Switch to using a function to parse booleansRelated to #2336.\r\n\r\nThis PR adds a function (`parse_boolean`) similar to i3's `eval_boolstr`. The only `true` value that I added was `enabled` since that was in use for various commands. The rest are identical to i3's.\r\n\r\nI also added support for toggling values. Currently, toggling is not supported for `input` or `output` commands (since it would require a change to the way their configs work, which is out of scope for this PR), but should work for anything else that takes a boolean value. For `input` and `output` commands, `toggle` is interpreted as a non-true value.": {
        "common/util.c": 1,
        "include/util.h": 1,
        "sway/commands/focus_follows_mouse.c": 1,
        "sway/commands/focus_wrapping.c": 1,
        "sway/commands/force_focus_wrapping.c": 1,
        "sway/commands/fullscreen.c": 1,
        "sway/commands/input/drag_lock.c": 1,
        "sway/commands/input/dwt.c": 1,
        "sway/commands/input/left_handed.c": 1,
        "sway/commands/input/middle_emulation.c": 1,
        "sway/commands/input/natural_scroll.c": 1,
        "sway/commands/input/tap.c": 1,
        "sway/commands/output/dpms.c": 1,
        "sway/commands/show_marks.c": 1,
        "sway/commands/urgent.c": 1
    },
    "Translate floating containers when a workspace is movedWhen a workspace is moved to another output, or the output it's on changes its global layout position, the floating containers on that workspace should be translated by the same amount as the workspace. This keeps the floating containers in the same position relative to the workspace.\r\n\r\nA check is done to make sure the floating container's center point isn't being moved off screen (eg. when moving the workspace to a smaller output). If it is, it is centered within the workspace.\r\n\r\nFixes part of #2500.": {
        "sway/tree/arrange.c": 1
    },
    "Update documentation for focus_follows_mouse.In PR #3081, I forgot to update the documentation for the `focus_follows_mouse` option. Sorry about that.": {
        "sway/sway.5.scd": 1
    },
    "Update for swaywm/wlroots#1148See swaywm/wlroots#1148": {
        "sway/desktop/transaction.c": 1,
        "sway/server.c": 1
    },
    "Update for swaywm/wlroots#1216See swaywm/wlroots#1216": {
        "sway/server.c": 1
    },
    "Update for swaywm/wlroots#1243See swaywm/wlroots#1243": {
        "include/sway/input/seat.h": 1,
        "include/sway/layers.h": 1,
        "include/sway/server.h": 1,
        "protocols/wlr-layer-shell-unstable-v1.xml": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/server.c": 1
    },
    "Update for swaywm/wlroots#1387See swaywm/wlroots#1387": {
        "sway/server.c": 1
    },
    "Update for swaywm/wlroots#1403See swaywm/wlroots#1403": {
        "sway/desktop/render.c": 1
    },
    "Update man pages - dynamic vars and generic blocksApparently, I forgot to update the man pages for a couple of my PRs. This PR updates the man pages to\r\n- Move `set` to the section of commands that can be in the config file or at runtime\r\n- Mention `$$` in the `set` command description\r\n- Add a section on generic command blocks\r\n- Alter commands and descriptions for previous block only commands (`bar`, `input`, `mode`, `seat`) to make it so it does not say that blocks are required": {
        "sway/sway-bar.5.scd": 1,
        "sway/sway-input.5.scd": 1,
        "sway/sway.5.scd": 1
    },
    "Update textures for cmd_client_* commandsSince the `client.{focused,focused_inactive,unfocused,urgent}` commands change colors, the textures need to be updated otherwise the textures and the rest of the title bar may utilize different colors.": {
        "sway/commands/client.c": 1
    },
    "Update workspace.c#2975 added an output requirement to the workspace command. This PR removes this requirement as this broke assigning workspaces to outputs in the config file and using the workspace command in the config file to autostart programs on specific workspaces on startup.\r\nFixes #2978 ": {
        "sway/commands/workspace.c": 1
    },
    "Use #if instead of #ifdef for WLR_HAS_*Also removes a weird `setenv` declaration and a unused function.": {
        "include/stringop.h": 1,
        "meson.build": 1,
        "sway/commands/create_output.c": 1,
        "sway/desktop/output.c": 1
    },
    "Use #if instead of #ifdefMakes it easier to find bugs when we forget to `#include \"config.h\"`.": {
        "common/background-image.c": 1,
        "common/cairo.c": 1,
        "include/cairo.h": 1,
        "include/sway/criteria.h": 1,
        "include/sway/output.h": 1,
        "include/sway/server.h": 1,
        "include/sway/tree/root.h": 1,
        "include/sway/tree/view.h": 1,
        "meson.build": 1,
        "sway/commands/swap.c": 1,
        "sway/criteria.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/server.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/root.c": 1,
        "sway/tree/view.c": 1,
        "swayidle/main.c": 1,
        "swayidle/meson.build": 1
    },
    "Use _C11_SOURCE feature test macro on FreeBSD (fixes #2616)This PR will add the `_C11_SOURCE` feature macro to meson.build on FreeBSD, thus narrows down the default namespace set (POSIX 2008 + XSI extensions, C11 + EXT1 extensions, BSD specific stuff) to only the C11 standard. This fixes #2616, and also prevents any future name clashes with FreeBSD-specific symbols.\r\n\r\nThis change would require to either define `__BSD_VISIBLE` or undefine `_C11_SOURCE` on sway/ipc-server.c because of the non-standatd `SOCK_NONBLOCK` and `SOCK_CLOEXEC` flags. I have replaced the usage of these flags with two `fcntl` calls instead, which makes the file POSIX 2001 compliant.": {
        "meson.build": 1,
        "sway/ipc-server.c": 1
    },
    "Use assigned workspace name for outputInstead of relying on bindings being configured, primarily source\r\nnew workspace names from workspace-output assignments.\r\n\r\nFixes #2435": {
        "sway/tree/workspace.c": 1
    },
    "Use list_find in more places and refactor/fix workspace prev_next functionsThe original purpose of this commit is to replace some `for` loops with `list_find`. But while doing this I found the `workspace_prev_next_impl` functions to be difficult to read and also contained a bug, so I refactored them and fixed the bug.\r\n\r\nTo reproduce the bug:\r\n\r\n* Have two outputs, where the left output has workspaces 1, 2, 3 and the right output has workspaces 4, 5, 6. Make workspace 2 focused_inactive and workspace 4 focused.\r\n* Run `workspace prev`.\r\n* Previously it would visit the left output, then apply `workspace prev` to workspace 2, which focuses workspace 1.\r\n* Now it will focus the rightmost workspace on the left output (workspace 3).\r\n\r\nThe refactoring I made to the workspace functions are:\r\n\r\n* Added the `static` keyword.\r\n* They now accept an `int dir` rather than bool, to avoid an unnecessary conversion.\r\n* Rather than preparing `start` and `end` variables for the purpose of iterating, just iterate everything.\r\n* Replace `for` loops with `list_find`.\r\n* Don't call `workspace_output_prev_next_impl` (this fixes the bug).": {
        "common/list.c": 1,
        "include/list.h": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/root.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Use output identifier for workspace configThis adds the ability to address outputs by their identifier when using the workspace command.\r\n\r\nA config for this could look something like this:\r\n```\r\nworkspace 1 output 'Dell Inc. DELL U2415 08DXD49E5DUL'\r\n```\r\n\r\nCloses #2991 \r\n\r\n@emersion could you review these changes?": {
        "include/sway/output.h": 1,
        "sway/desktop/output.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Use parse_boolean where possible.Whilst working on #3083, I noticed some opportunities to refactor the commands arg parsing. ": {
        "sway/commands/bar/binding_mode_indicator.c": 1,
        "sway/commands/bar/pango_markup.c": 1,
        "sway/commands/bar/workspace_buttons.c": 1,
        "sway/commands/bar/wrap_scroll.c": 1,
        "sway/commands/floating.c": 1,
        "sway/commands/input/xkb_capslock.c": 1,
        "sway/commands/input/xkb_numlock.c": 1,
        "sway/commands/seat/fallback.c": 1,
        "sway/commands/smart_gaps.c": 1,
        "sway/commands/sticky.c": 1,
        "sway/commands/ws_auto_back_and_forth.c": 1
    },
    "Use the env var for finding a socket.This allows one to specify the wayland socket to use, as recommended by https://github.com/wayland-project/wayland/commit/c7dbaa1cfda68185b3b0d3665efdf4620c66531e": {
        "sway/server.c": 1
    },
    "Use wlr_surface_get_effective_damageRequired after https://github.com/swaywm/wlroots/pull/1261": {
        "sway/desktop/output.c": 1
    },
    "When scrolling on a tab titlebar, set focus_inactive if not focusedFor example, create layout `H[view T[view view view]]`, focus the view in the hsplit and scroll the mouse wheel over the tab title bars. Prior to this patch, focus would be given to a descendant of the tabbed container. This patch keeps the focus on the hsplit view.\r\n\r\nThis also renames some of the variables used in this part of the code to make it be easier to follow.\r\n\r\nTested with regular view children, as well as split container children, and tested while focus is on the tabbed container as well as off the tabbed container.": {
        "sway/input/cursor.c": 1
    },
    "Work around swayidle never triggering on SIGUSR1SIGUSR1 is supposed to trigger swayidle; however, in my experience this never happens.\r\n\r\nI suspect there might be some kind of a race condition between setting a 0-timeout timer and the actual signal handling, so here's a PR that kind of papers over the problem by making the timeout 50ms instead. This makes it work for me consistently\r\n\r\nFeel free to reject this PR if this workaround is not acceptable, but I'm not sure how to actually fix the timer logic so that 0-timeout timers work.": {
        "swayidle/main.c": 1
    },
    "Workspace move cycleOn move workspace to direction: Try the farthest on the opposite direction if no workspace is found at given direction. \r\n\r\nThis new behavior is closer to the i3 one now. I'd prefer it, because I'm using most of the time only one display connected to my notebook. With this addition I only need one shortcut to toggle a workspace between the two displays. I couldn't test this with more displays.\r\n\r\nDepends on https://github.com/swaywm/wlroots/pull/1199": {
        "sway/commands/move.c": 1
    },
    "Wrap to fartherest output when running focus outputAlso moves the `opposite_direction` function into `util.c` as it's used in two places now.\r\n\r\nFixes #3030.": {
        "common/util.c": 1,
        "include/util.h": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/move.c": 1
    },
    "XCursor is not configured if no pointer device is availableSmall change that stops the cursor from being displayed if there is no pointer input device. Created this to address the floating cursor in the middle of my screen, even though I am a keyboard-only user.": {
        "sway/input/seat.c": 1
    },
    "[DO NOT MERGE] config: allow for inline to end of line comments**THIS IS BRANCHED FROM #2979 SO THAT NEEDS TO BE MERGED FIRST**\r\n\r\nCloses #3044 \r\n\r\nAllows for the following syntax in the config: `command <arguments...> # the rest of this line is a comment`\r\nExample: `input * repeat_delay 200 # milliseconds`\r\n\r\nNote: The space before and after the `#` is mandatory otherwise the `#` will be seen as part of an argument (such as colors). If a `#` is needed as it's own argument, then it can be enclosed in quotes. For example, `bar bar-0 separator_symbol \"#\"`.": {
        "sway/commands.c": 1
    },
    "[RFC] Fix segv when sway is terminatingI've got the following SIGSEGV when terminating sway:\r\nProgram terminated with signal SIGSEGV, Segmentation fault.\r\n```\r\n0x00005607dc603af5 in view_unmap (view=0x5607dcb3d350) at ../sway/tree/view.c:599\r\n599\t\tif (surviving_ancestor->type >= C_WORKSPACE) {\r\n```\r\nWhen I was printing the surviving_ancestor, it was NULL at that time\r\n": {
        "sway/tree/view.c": 1
    },
    "[RFC] Refactor seat_get_focusThe story here is I want to add a `seat_get_focus_inactive_floating` function to supplement `seat_get_focus_inactive_tiling`, but I don't want to add yet another argument to `seat_get_focus_by_type` and add more logic to that function.\r\n\r\nThere's two ways this can be refactored, and I can't decide which is best. The first is a callback approach, where each of the `seat_get_focus_inactive*` functions pass a callback function to `seat_get_focus_inactive_callback`. The second ditches the callback approach and puts the loop and conditional logic directly in the `seat_get_focus_inactive*` functions. Both commits are exactly the same number of lines of code.\r\n\r\nPlease refer to both commits separately and provide feedback.": {
        "include/sway/input/seat.h": 1,
        "sway/commands/focus.c": 1,
        "sway/input/seat.c": 1
    },
    "[WIP?] Fix zsh completionsThis should be fixed, but there are also a bunch of completions that are missing and could be added, so I don't know whether to do so now or closer to 1.0 release in case there are more changes.": {
        "completions/zsh/_swaylock": 1
    },
    "[WIP] Add CSD to border modesI need some help with this one. Currently implementing #2429 but the client doesn't seem to respect the new decoration mode. See `view_set_csd`. For example, run `border toggle` several times on an `xdg_shell` view.\r\n\r\nDepends on https://github.com/swaywm/wlroots/pull/1259": {
        "include/sway/decoration.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands/border.c": 1,
        "sway/decoration.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/input/cursor.c": 1,
        "sway/ipc-json.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "[WIP] Address new_output == NULL in seat_set_focus_warpThis addresses the specific crash in https://github.com/swaywm/sway/issues/2598, but now I'm facing another, more difficult crash:\r\n\r\n```\r\n#0  0x000055735007e356 in container_for_each_child (container=0x5573510e3730, f=0x557350060e8b <send_unfocus>, data=0x557350e422c0) at ../sway/tree/container.c:402\r\n        i = 0\r\n#1  0x0000557350060f39 in seat_send_unfocus (node=0x557351079640, seat=0x557350e422c0) at ../sway/input/seat.c:559\r\n#2  0x0000557350061159 in seat_set_focus_warp (seat=0x557350e422c0, node=0x5573510876c0, warp=true, notify=true) at ../sway/input/seat.c:620\r\n        parent = 0x55735008adc2 <list_add+28>\r\n        last_focus = 0x557351079640\r\n        last_workspace = 0x0\r\n        new_workspace = 0x5573511dd720\r\n        container = 0x5573510876c0\r\n        last_output = 0x0\r\n        new_output = 0x557350e81830\r\n        new_output_last_ws = 0x5573510e3e60\r\n#3  0x0000557350061786 in seat_set_focus_container (seat=0x557350e422c0, con=0x5573510876c0) at ../sway/input/seat.c:744\r\n#4  0x000055735008316b in view_execute_criteria (view=0x55735117f650) at ../sway/tree/view.c:407\r\n        criteria = 0x557350e473f0\r\n        res = 0x5573510876c0\r\n        i = 0\r\n        seat = 0x557350e422c0\r\n        prior_focus = 0x557351079640\r\n        criterias = 0x5573510e2ef0\r\n#5  0x00005573500837c7 in view_map (view=0x55735117f650, wlr_surface=0x5573511b4610) at ../sway/tree/view.c:558\r\n        __func__ = \"view_map\"\r\n        seat = 0x557350e422c0\r\n        ws = 0x5573511dd720\r\n        node = 0x5573511dd720\r\n        target_sibling = 0x0\r\n#6  0x00005573500893da in handle_map (listener=0x55735117f898, data=0x557350f88020) at ../sway/desktop/xwayland.c:389\r\n        xwayland_view = 0x55735117f650\r\n        xsurface = 0x557350f88020\r\n        view = 0x55735117f650\r\n#7  0x00007fee4da9c26e in wlr_signal_emit_safe (signal=signal@entry=0x557350f88188, data=data@entry=0x557350f88020) at ../util/signal.c:29\r\n        pos = 0x55735117f898\r\n        l = 0x55735117f898\r\n        cursor = {link = {prev = 0x55735117f898, next = 0x7ffef88d8430}, notify = 0x7fee4da9c1e0 <handle_noop>}\r\n        end = {link = {prev = 0x7ffef88d8410, next = 0x557350f88188}, notify = 0x7fee4da9c1e0 <handle_noop>}\r\n#8  0x00007fee4da655f6 in xwayland_surface_role_commit (wlr_surface=<optimized out>) at ../xwayland/xwm.c:686\r\n        surface = 0x557350f88020\r\n        __PRETTY_FUNCTION__ = \"xwayland_surface_role_commit\"\r\n#9  0x00007fee4da94402 in surface_commit_pending (surface=0x5573511b4610) at ../types/wlr_surface.c:398\r\n        invalid_buffer = true\r\n        subsurface = 0x5573511b47e0\r\n#10 0x00007fee4da947f5 in surface_commit (client=<optimized out>, resource=<optimized out>) at ../types/wlr_surface.c:470\r\n        surface = 0x5573511b4610\r\n        subsurface = <optimized out>\r\n#11 0x00007fee4bf631c8 in ffi_call_unix64 () at /home/sircmpwn/sources/sway/build/sway/../../../../../../lib64/libffi.so.6\r\n#12 0x00007fee4bf62c2a in ffi_call () at /home/sircmpwn/sources/sway/build/sway/../../../../../../lib64/libffi.so.6\r\n#13 0x00007fee4dad56ff in  () at /home/sircmpwn/sources/sway/build/sway/../../../../../../lib64/libwayland-server.so.0\r\n#14 0x00007fee4dad20a3 in  () at /home/sircmpwn/sources/sway/build/sway/../../../../../../lib64/libwayland-server.so.0\r\n#15 0x00007fee4dad3702 in wl_event_loop_dispatch () at /home/sircmpwn/sources/sway/build/sway/../../../../../../lib64/libwayland-server.so.0\r\n#16 0x00007fee4dad22ac in wl_display_run () at /home/sircmpwn/sources/sway/build/sway/../../../../../../lib64/libwayland-server.so.0\r\n#17 0x0000557350053e6f in server_run (server=0x5573500a6a40 <server>) at ../sway/server.c:165\r\n#18 0x00005573500535ea in main (argc=3, argv=0x7ffef88d8c38) at ../sway/main.c:446\r\n        verbose = 0\r\n        debug = 1\r\n        validate = 0\r\n        long_options = \r\n            {{name = 0x557350090a4c \"help\", has_arg = 0, flag = 0x0, val = 104}, {name = 0x557350090a51 \"config\", has_arg = 1, flag = 0x0, val = 99}, {name = 0x557350090a58 \"validate\", has_arg = 0, flag = 0x0, val = 67}, {name = 0x557350090a61 \"debug\", has_arg = 0, flag = 0x0, val = 100}, {name = 0x557350090a67 \"version\", has_arg = 0, flag = 0x0, val = 118}, {name = 0x557350090a6f \"verbose\", has_arg = 0, flag = 0x0, val = 86}, {name = 0x557350090a77 \"get-socketpath\", has_arg = 0, flag = 0x0, val = 112}, {name = 0x0, has_arg = 0, flag = 0x0, val = 0}}\r\n        config_path = 0x0\r\n        usage = 0x5573500905d0 \"Usage: sway [options] [command]\\n\\n  -h, --help\", ' ' <repeats 13 times>, \"Show help message and quit.\\n  -c, --config <config>  Specify a config file.\\n  -C, --validate         Check the validity of the config file, th\"...\r\n        c = -1\r\n        suid = false\r\n```\r\n\r\nDigging into this a little, it seems that `last_focus` is an invalid pointer at `sway/input/seat.c:620`": {
        "sway/input/seat.c": 1
    },
    "[WIP] Don't schedule unnecessary output frames, and simplify damage functionsThe `whole` argument has been removed from `damage_surface_iterator` because it was never used. As this function now only deals with partial damaging, it's been changed to return early if there is no damage and avoids scheduling a frame unnecessarily.\r\n\r\nWith the removal of the `whole` argument, `output_damage_from_view` just called `output_damage_view` with the same arguments, so I've combined these into the one function and renamed it to `output_damage_view_surfaces`.\r\n\r\nLastly, `output_damage_whole_container_iterator` is now removed as it was never used. `output_damage_whole_container` just damages the container including decorations and doesn't care about surfaces.\r\n\r\nProbably closes #2748, but I'd like to see before and after metrics...": {
        "include/sway/output.h": 1,
        "sway/desktop/output.c": 1,
        "sway/tree/view.c": 1
    },
    "[WIP] Free unfreed resources.Hunting down some unfreed resources.": {
        "sway/config.c": 1,
        "sway/config/bar.c": 1,
        "sway/config/output.c": 1,
        "sway/criteria.c": 1,
        "sway/decoration.c": 1,
        "swaybar/config.c": 1,
        "swaybar/status_line.c": 1,
        "swaynag/swaynag.c": 1
    },
    "[WIP] add support for cursor themes- uses environment variables `SWAY_CURSOR_THEME` and `SWAY_CURSOR_SIZE`\r\n\r\nFirst commit adds support in sway. Second commit adds support in swaybar\r\nCurrently, the code is also not very good (`getenv()` scattered everywhere).\r\nFeedback is appreciated.\r\n\r\nThanks!": {
        "sway/input/seat.c": 1,
        "sway/server.c": 1,
        "swaybar/bar.c": 1
    },
    "[pt_BR] Update README.pt to include noticeSigned-off-by: Matheus Horstmann <mch15@inf.ufpr.br>\r\n\r\nUpdate README.pt to include notice\r\n\r\nSigned-off-by: Matheus Horstmann <mch15@inf.ufpr.br>\r\n\r\nUpdate README.pt to include notice\r\n\r\nSigned-off-by: Matheus Horstmann <mch15@inf.ufpr.br>": {
        "README.pt.md": 1
    },
    "add libinput config for keyboardadd send_events support\r\n\r\nI found that in master branch I can't disable keyboard anymore. this pr will add support of setting sent_events mode for keyboards.": {
        "sway/input/input-manager.c": 1
    },
    "advertize dependency on gitsway depends on git for version information": {},
    "bar: remove i3bar_block_free in favour of i3bar_block_unrefRef https://github.com/swaywm/sway/pull/2622#issuecomment-421467458": {
        "swaybar/i3bar.c": 1
    },
    "bash completionSimilar to the existing shell completion for zsh, this adds support for completion in bash": {
        "/dev/null": 1,
        "meson.build": 1,
        "meson_options.txt": 1
    },
    "binding: match single-key bindings if no multi-key binding matchedThis makes bindings more snappy when the user is typing faster than\r\nhis keycaps are releasing.\r\n\r\nSigned-off-by: Franklin \"Snaipe\" Mathieu <me@snai.pe>": {
        "include/sway/input/keyboard.h": 1,
        "sway/input/keyboard.c": 1
    },
    "cmd_bind{sym,code}: Implement per-device bindingsCloses #2378 \r\nCloses #2141 \r\n\r\nImplements the syntax `bind{sym,code} --input-device=<identifier> <...>` for both keyboard and mouse bindings.\r\n\r\nSince I don't have multiple physical keyboards, I found this easiest to test by launching sway on DRM, on the Wayland backend, and on the X11 backend.\r\n\r\nMy test config:\r\n```\r\nset $mod Mod4\r\nset $keyboard <keyboard-id>\r\nset $wl_keyboard 0:0:wayland\r\nset $mouse <mouse-id>\r\nset $wl_mouse 0:0:wayland\r\n\r\nbindsym $mod+x exec urxvt -e python\r\nbindsym --input-device=$keyboard $mod+x exec urxvt -e bash\r\nbindsym --input-device=$wl_keyboard $mod+x exec urxvt -e zsh\r\n\r\nbindsym --whole-window button3 floating toggle\r\nbindsym --input-device=$mouse --whole-window button3 fullscreen toggle\r\nbindsym --input-device=$wl_mouse --whole-window button3 border toggle\r\n```\r\n\r\nFor the config above:\r\n- `urxvt -e python` and `floating toggle` should get triggered on the X11 backend\r\n- `urxvt -e bash` and `fullscreen toggle` should get triggered on DRM\r\n- `urxvt -e zsh` and `border toggle` should get triggered on the Wayland backend": {
        "include/sway/config.h": 1,
        "include/sway/input/cursor.h": 1,
        "include/sway/input/input-manager.h": 1,
        "sway/commands/bind.c": 1,
        "sway/commands/seat/cursor.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/sway.5.scd": 1
    },
    "cmd_reload: recalc font sizing + rebuild texturesFixes #2905 \r\n\r\nWhen the config gets reloaded, the font height and baseline get reset to 0. If the config does not have a font command in it, the variables will remain at 0 causing a transparent area where the title would be rendered.\r\n\r\nThis makes it so the font height and baseline are recalculated. Additionally, since the font height and baseline may have changed due to the reload, the title and marks textures are rebuilt.": {
        "sway/commands/reload.c": 1
    },
    "cmd_swaynag_command: fix typo in variableThe custom `swaynag_command` was being stored as `config->swaybg_command` instead of `config->swaynag_command`.": {
        "sway/commands/swaynag_command.c": 1
    },
    "cmd_ws_auto_back_and_forth: fix negationIn the conversion to `parse_boolean` for `cmd_ws_auto_back_and_forth` (#3098), the `!` was never removed (was previously using `strcasecmp`) causing the setting to be the opposite of what it should be.": {
        "sway/commands/ws_auto_back_and_forth.c": 1
    },
    "commands/resize: fix grow vars uninitializedI'm not sure I understand why the PPT/PX codepaths are different and thus why these would be uninitialized. Hopefully zero is a sane default.\r\n\r\nThis fixes a build error and my packaging treats it as an error. Thanks.": {
        "sway/commands/resize.c": 1
    },
    "commands: clean up checkargs function +other small changesFirst commit is a required fix, the rest are more subjective aesthetic changes, so you may disagree with them.": {
        "include/sway/commands.h": 1,
        "sway/commands.c": 1,
        "sway/commands/bar/bindsym.c": 1,
        "sway/commands/bar/hidden_state.c": 1,
        "sway/commands/bar/mode.c": 1,
        "sway/commands/bind.c": 1,
        "sway/commands/exec_always.c": 1,
        "sway/commands/fullscreen.c": 1,
        "sway/commands/layout.c": 1,
        "sway/commands/opacity.c": 1
    },
    "commands: fix exec quotingThe way I implemented it before was really a stop-gap measure, furthermore, there was a bug since it was comparing `argc > 0` rather than `argc > 1` so even fully-quoted commands were rejected.\r\n\r\nNow, it allows partially-quoted commands, but does not strip quotes and split the command, only if it is fully quoted.": {
        "sway/commands/exec_always.c": 1
    },
    "commands: implement move absoluteThis allows floating containers to be moved to the centre of all outputs.\r\n\r\nAlso changes the default behaviour of `move position <pos_x> <pos_y>` to be relative to the workspace, requiring `absolute` to be used for the old behaviour.\r\n\r\nAlso allows `move position mouse` to also use `cursor` and `pointer`, which is present (but undocumented) in i3.": {
        "sway/commands/move.c": 1,
        "sway/sway.5.scd": 1
    },
    "commands: remove obselete code for sticky windows when switching workspaceFixes crash when switching workspace when the only window present is the sticky window, since it tries to destroy the old workspace twice. IPC events seem fine.\r\n\r\nI think the bug was introduced when typesafety was.": {
        "sway/tree/workspace.c": 1
    },
    "commands: when moving a container, restore focus properlyFixes 2 bugs:\r\n1. when the moved container was the last child of a container, a new focus would not be found, causing problems if that focus was required later. This was fixed by getting a new focus from the workspace if getting a new focus from the old parent failed;\r\n2. when a container was moved from an inactive workspace, such as by using criteria, focus would be returned to the inactive workspace rather than the active workspace. This fixes that by saving the current before moving the container, then, when restoring the focus, compares the focus with the container being moved. If the container was focused, then it finds the new focus from its parents as before, otherwise, it returns to the old focus. This further necessitated checking if the inactive workspace was then made empty and being destroyed before arranging it.\r\n\r\nAlso adjusted a few comments here and there.": {
        "sway/commands/move.c": 1
    },
    "commands: when setting urgency, check container is not null": {
        "sway/commands/urgent.c": 1
    },
    "common/loop.c: add _POSIX_C_SOURCE for clock_gettime and CLOCK_MONOTONICI was getting build errors on my system/toolchain due to an implicit declaration for `clock_gettime` and `CLOCK_MONOTONIC`.\r\n\r\nGoogling indicated that defining `_POSIX_C_SOURCE` should resolve it. I've used the same value that are used in other source files in the sway source.\r\n\r\nThis seems to resolve the problem.": {
        "common/loop.c": 1
    },
    "compat: add window_properties object to json output of viewsSome existing tools that rely on i3's json output, like the i3ipc\r\npython module and scripts using it, break when they can't find the\r\nwindow_properties object in a view.\r\n\r\nTo achieve a better drop-in replacement compatibility with i3 and\r\nexisting tools for it, we add the window_properties object to\r\nthe output of get_tree, along with the \"class\", \"instance\", and \"title\"\r\nsub-fields. These three values are set to the view's class, app_id,\r\nand title respectively.\r\n\r\nIn addition, if the view does not have a class, window_properties.class\r\nis set to the app_id, to avoid breaking tools that expect all windows\r\nto have a class in the X world.\r\n\r\nSigned-off-by: Franklin \"Snaipe\" Mathieu <me@snai.pe>": {
        "sway/ipc-json.c": 1
    },
    "config: free strings fields when freeing input configFixes memory leaks, since they are duplicated from the command to the config, then duplicated again when merged, but only freed once.": {
        "sway/config/input.c": 1
    },
    "config: remove double free of config->swaynag_commandFixes #2796": {
        "sway/config.c": 1
    },
    "config: remove peeked + expanded line log entriesThe peeked and expanded line log entries were useful during the switch to generic code blocks and subcommands. However, it has been a while since those were introduced and the log entries are no longer helpful. Instead of keeping them as clutter in the log, they can just be removed.": {
        "sway/config.c": 1
    },
    "cursor: fix uninitialized pointer in cursor_rebaseThe missing initialization of the pointer `struct wlr_surface *surface`  can lead to the following problem: If the next function call\r\n```\r\ncursor->previous.node = node_at_coords(cursor->seat,\r\n\t\t\tcursor->cursor->x, cursor->cursor->y, &surface, &sx, &sy);\r\n```\r\ndoesn't set `surface`, then the following function call\r\n```\r\ncursor_do_rebase(cursor, time_msec, cursor->previous.node, surface, sx, sy);\r\n```\r\nuses this uninitialized pointer (which is possibly not `NULL`). By looking at the definition of this function\r\n```\r\nstatic void cursor_do_rebase(struct sway_cursor *cursor, uint32_t time_msec,\r\n \t\tstruct sway_node *node, struct wlr_surface *surface,\r\n \t\tdouble sx, double sy) {\r\n \t// Handle cursor image\r\n \tif (surface) {\r\n \t\t// Reset cursor if switching between clients\r\n \t\tstruct wl_client *client = wl_resource_get_client(surface->resource);\r\n                ...\r\n```\r\none can see that this could lead to a segfault in `wl_resource_get_client(surface->resource)`.\r\nThis patch fixes the problem by initializing the pointer to `NULL`\r\n\r\nI think the described problem could be the cause of the **2nd** crash @emersion mentioned in #3015.\r\n": {
        "sway/input/cursor.c": 1
    },
    "delete references to swaygrab": {
        "README.de.md": 1,
        "README.el.md": 1,
        "README.fr.md": 1,
        "README.it.md": 1,
        "README.ja.md": 1,
        "README.md": 1,
        "README.pt.md": 1,
        "README.ru.md": 1,
        "README.uk.md": 1,
        "completions/zsh/_swaygrab": 1,
        "include/swaygrab/json.h": 1,
        "meson.build": 1,
        "security.d/00-defaults.in": 1,
        "sway/sway.1.scd": 1,
        "swayidle/swayidle.1.scd": 1
    },
    "dependency on git - english and french readmegit is used to determine the current version": {},
    "do not create uninitialized sway_keyboardIt's not good to create a uninitialized struct, because it might become\r\na possible error in future. I actually got hit by this while working on\r\nhttps://github.com/swaywm/sway/pull/3155": {
        "include/sway/input/keyboard.h": 1,
        "sway/input/keyboard.c": 1,
        "sway/input/seat.c": 1
    },
    "fix #2355: \"move workspace to output up\" crasheswhen using 2 display, if scaling is different\r\n`container_update_textures_recursive` is called when moving workspace on\r\ndifferent display.\r\nWe need to call `container_update_title_textures` only for container of type\r\n\"CONTAINER\" or \"VIEW\" in order to be consistent with the assert in\r\n`update_title_texture`.": {
        "sway/tree/container.c": 1
    },
    "fix crash on new output while swaylock is runningattempt to fix #2324": {
        "sway/desktop/render.c": 1
    },
    "fix misaligned integer stores/loadssilences releated warnings from the undefined behavior sanitizer. ": {
        "common/ipc-client.c": 1,
        "sway/ipc-server.c": 1
    },
    "fix typo in config.in": {
        "config.in": 1
    },
    "fix typo in config.inI think there's a typo in config.in and this commit fixes it.\r\nFrom experimantation I think that the example timeouts given in config.in don't add to another (like currently described in the comment block) but are timeouts on its own.\r\nThis typo is misleading and can be dangerous, e.g. I set the second (DPMS) timeout to a lower value than the first one (I thought from the comments they add to each other) and then typed my password into an open shell (I thought the screen locked).\r\n\r\nPlease tell me if the commit message is too short - but actually it's just a typo I think.\r\n\r\nAlthough I DID NOT CONFIRM in the source code that it's actually two independent timeouts (I don't know where that is.) Please, someone else should do this.": {
        "config.in": 1
    },
    "fix typo in swayidle(1)See https://github.com/swaywm/sway/pull/3160#issuecomment-440804037": {
        "swayidle/swayidle.1.scd": 1
    },
    "fix: cmd_sticky crash sway with empty containerWhen I used my sticky shortcut on an empty workspace (mouse pointer over wallpaper), sway crash with stack trace:\r\n\r\n```\r\nStack trace of thread 11312:\r\n#0  0x000055e2f1e07b20 container_is_floating (sway)\r\n#1  0x000055e2f1dfd67d cmd_sticky (sway)\r\n#2  0x000055e2f1dcd63a execute_command (sway)\r\n#3  0x000055e2f1df255d seat_execute_command (sway)\r\n#4  0x000055e2f1dedab7 handle_keyboard_key (sway)\r\n#5  0x00007feee8f021c5 wlr_signal_emit_safe (libwlroots.so.0)\r\n#6  0x00007feee8eec544 wlr_keyboard_notify_key (libwlroots.so.0)\r\n#7  0x00007feee8ec131c handle_keyboard_key (libwlroots.so.0)\r\n#8  0x00007feee8ec0f56 handle_libinput_event (libwlroots.so.0)\r\n#9  0x00007feee8ebfe88 handle_libinput_readable (libwlroots.so.0)\r\n#10 0x00007feee8f40702 wl_event_loop_dispatch (libwayland-server.so.0)\r\n#11 0x00007feee8f3f2ac wl_display_run (libwayland-server.so.0)\r\n#12 0x000055e2f1dd97c5 server_run (sway)\r\n#13 0x000055e2f1dd8eda main (sway)\r\n#14 0x00007feee8a70223 __libc_start_main (libc.so.6)\r\n#15 0x000055e2f1dccb2e _start (sway)\r\n\r\nStack trace of thread 11314:\r\n#0  0x00007feee8a38afc pthread_cond_wait@@GLIBC_2.3.2 (libpthread.so.0)\r\n#1  0x00007feee4d5d17c n/a (i965_dri.so)\r\n#2  0x00007feee4d5ceb8 n/a (i965_dri.so)\r\n#3  0x00007feee8a32a9d start_thread (libpthread.so.0)\r\n#4  0x00007feee8b47a43 __clone (libc.so.6)\r\n```\r\n\r\nChecking if the container is null solve this.\r\nBut this fix will mislead the cmd_sticky to think that the container is a tiled container.\r\n\r\nIf this is a bug, do you prefer testing if the container is null in cmd_sticky function ?": {
        "sway/commands/sticky.c": 1
    },
    "fixes pango_markup support with title_formatThe support for pango_markup was broken in title_format because the\r\nformated title was escaped. I think only the payload should be escaped.\r\n\r\nThis commit fixes 789a877b379cd35c350610be62b971ae00feb542\r\n\r\nThe pango_markup looks like:\r\n```\r\nfont pango:\"DejaVu Sans Mono 10\"\r\nfor_window [class=\".*\"] title_format \"<span background='#ff0000'>%title</span>\"\r\n```": {
        "sway/tree/view.c": 1
    },
    "gaps: remove duplicate inner gapsRemoves duplicate inner gaps between two containers. See https://github.com/swaywm/sway/issues/307#issuecomment-165437419.\r\n\r\nInstead of dividing the gaps by two between two containers as suggested, I decided to do the following:\r\n1) Inner gaps are always added to the right and bottom sides\r\n2) Inner gaps are only added to the top side when the container's y location matches the workspace's y location without inner gaps applied\r\n3) Inner gaps are only added to the left side when the container's x location matches the workspace's x location without inner gaps applied\r\n\r\nI think this solution is better since the inner gaps are guaranteed to be integer values instead of having to deal with half pixel values when dividing an odd inner gap by two.": {
        "include/sway/tree/container.h": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "handle_layer_shell_surface: Do not crash if seat doesn't have focusSway crashed with this backtrace when I was afk.\r\n\r\n```\r\n0  0x0000556e7e904ec7 in handle_layer_shell_surface (listener=0x556e7e956aa8 <server+104>, data=0x556e7f316490) at ../../sway/desktop/layer_shell.c:340\r\n#1  0x00007f7d8a0fb636 in wlr_signal_emit_safe (signal=0x556e7ed80c60, data=0x556e7f316490)\r\n    at ../../util/signal.c:29\r\n#2  0x00007f7d8a0e4b3c in layer_surface_role_commit (wlr_surface=0x556e7f316190)\r\n    at ../../types/wlr_layer_shell.c:293\r\n#3  0x00007f7d8a0ef4db in surface_commit_pending (surface=0x556e7f316190)\r\n    at ../../types/wlr_surface.c:398\r\n#4  0x00007f7d8a0ef742 in surface_commit (client=0x556e7f13ca10, resource=0x556e7f1b5c10)\r\n    at ../../types/wlr_surface.c:470\r\n#5  0x00007f7d885aa1c8 in ffi_call_unix64 () at /usr/lib/libffi.so.6\r\n#6  0x00007f7d885a9c2a in ffi_call () at /usr/lib/libffi.so.6\r\n#7  0x00007f7d8a13a6ff in  () at /usr/lib/libwayland-server.so.0\r\n#8  0x00007f7d8a1370a3 in  () at /usr/lib/libwayland-server.so.0\r\n#9  0x00007f7d8a138702 in wl_event_loop_dispatch () at /usr/lib/libwayland-server.so.0\r\n#10 0x00007f7d8a1372ac in wl_display_run () at /usr/lib/libwayland-server.so.0\r\n#11 0x0000556e7e9035bc in server_run (server=0x556e7e956a40 <server>) at ../../sway/server.c:165\r\n#12 0x0000556e7e902d37 in main (argc=1, argv=0x7ffe45f083d8) at ../../sway/main.c:446\r\n```\r\n\r\nThis check tries to avoid this.": {
        "sway/desktop/layer_shell.c": 1
    },
    "i3bar: count references to blocksThis prevents blocks from being destroyed before their hotspots are destroyed,\r\nin case it is used for a pending click event that fires between the bar\r\nreceiving a new status, which destroys the block, and the bar rendering the new\r\nstatus, which destroys the hotspot.\r\n\r\nThis problem can be easily produced by\r\nscrolling on a block that immediately causes a new status to be sent, with\r\nmultiple outputs.\r\n\r\nWhether this is the best way to fix this problem I'm not sure.": {
        "include/swaybar/status_line.h": 1,
        "swaybar/i3bar.c": 1,
        "swaybar/render.c": 1,
        "swaybar/status_line.c": 1
    },
    "improved swaymsg completions for fishI Improved the swaymsg completions for fish to include completions for all message types as documented in the man page.": {
        "completions/fish/swaymsg.fish": 1
    },
    "input config: merge left_handed optionI guess this just got missed.": {
        "sway/config/input.c": 1
    },
    "input-manager: consider cursor warping on input_manager_set_focusinput_manager_set_focus is used to set the focus after mapping the view in\r\nview_map. This needs to consider to warp the cursor as well, since for\r\nWARP_CONTAINER, the cursor should warp to the newly created view.\r\n\r\nOT:\r\nThe only place where `input_manager_set_focus` is used is inside the `view_map`function. We could remove the function and open code it into `view_map`.": {
        "sway/input/input-manager.c": 1
    },
    "input: enable configuring tablets with libinputThis allows, for example, setting left handed mode for tablets.": {
        "sway/input/input-manager.c": 1
    },
    "ipc: add focus information to root nodeFixes #2632 ": {
        "sway/ipc-json.c": 1,
        "sway/tree/node.c": 1
    },
    "ipc: add pid information for views in layout treeResolves #1973": {
        "include/sway/tree/view.h": 1,
        "sway/ipc-json.c": 1,
        "sway/tree/view.c": 1
    },
    "ipc: fix focused in get_outputs replyIt's set even if a child of the output is focused.": {
        "sway/ipc-server.c": 1
    },
    "ipc: make json for view match i3's output more closelyIt turns out that i3 does not have a `class` key in the json description\r\nof a view, but provides it through `window_properties.class`. Since\r\n`window_properties` has been added by 8fc9328, we can remove `class`\r\naltogether.\r\n\r\nIn addition, all of the entries in `window_properties`, save for `transient_for`, are apparently omitted when null.": {
        "sway/ipc-json.c": 1
    },
    "ipc: move refresh to current_modeIn responding to feedback during #3052, I accidentally removed the `refresh` field from each `mode` entry. This corrects that mistake. Sorry for the churn.\r\n\r\ncc: @emersion ": {
        "sway/ipc-json.c": 1,
        "swaymsg/main.c": 1
    },
    "ipc: set \"type\" of floating containers to \"floating_con\"Only just noticed this detail in i3:\r\n\r\n> type (string)\r\n>    Type of this container. Can be one of \"root\", \"output\", \"con\", \"floating_con\", \"workspace\" or \"dockarea\".": {
        "sway/ipc-json.c": 1
    },
    "meson.build: remove obsolete definition of swayidle_depsIt is redefined in swayidle/meson.build": {
        "meson.build": 1
    },
    "missing headers for swaybar/input.cAdded missing #include for swaybar/input.c.": {
        "swaybar/input.c": 1
    },
    "move to workspace: fix moving floating container to non-empty workspacemoving a container to a non-empty workspace will find a container to move\r\nto in the destination workspace and call container_move_to_container,\r\nwhich must not just skip floating containers": {
        "sway/commands/move.c": 1
    },
    "output: clean up output_damage_viewSince it was only used once, its logic was moved to output_damage_from_view,\r\nand the iterator changed since the variable 'whole' is now always false.\r\nAlso removed unused function output_damage_whole_container_iterator.\r\n\r\nCloses https://github.com/swaywm/sway/issues/1883 though not sure if this was what it was going for.\r\n\r\nMaybe `output_damage_from_view` should now be renamed to `output_damage_view`?": {
        "sway/desktop/output.c": 1
    },
    "output: initialize layers before usage in apply_configThe previous pull request #2993 tried to fix this by moving the function which\r\nused the layers after the initilization.\r\nSince this initialization is done unconditionally only depending on the struct\r\ndefinition, move the layer initialization to the beginning of the function.\r\n\r\nFixes #2992": {
        "sway/tree/output.c": 1
    },
    "protect newlineThe two lines were collapsed in the generated man page": {
        "sway/sway.5.scd": 1
    },
    "raise floatingAdds a configuration option to raise/not raise floating containers on gaining focus (see also https://github.com/i3/i3/issues/2990).": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "include/sway/input/cursor.h": 1,
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/meson.build": 1,
        "sway/sway.5.scd": 1,
        "sway/tree/container.c": 1
    },
    "resize set: convert ppt to px for floating containersFixes #3125": {
        "sway/commands/resize.c": 1
    },
    "resize set: fix units for floating containersThe behavior of `resize set <width> <height>` for floating containers has changed recently. According to the documentation, floating containers should be resized in px if the units are omitted, but now ppt are used for both tiled and floating containers.": {
        "sway/commands/resize.c": 1
    },
    "resize set: implement width and height keywordsRelated to #3082\r\ni3 documentation: https://i3wm.org/docs/userguide.html#resizingconfig\r\n\r\nThis implements the following syntaxes from `i3 4.16`:\r\n* `resize set [width] <width> [px|ppt]`\r\n* `resize set height <height> [px|ppt]`\r\n* `resize set [width] <width> [px|ppt] [height] <height> [px|ppt]`\r\n\r\nAdditionally, a bug was fixed that caused setting the height of a tiled container to change the width instead due to a typo.": {
        "sway/commands/resize.c": 1,
        "sway/sway.5.scd": 1
    },
    "resize: Determine if anything changed using before/after checkReturning a boolean from `container_resize_tiled` and `resize_tiled` doesn't work in all cases. This patch changes it back to void and does a before/after check to see if the container was resized.\r\n\r\nSee https://github.com/swaywm/sway/pull/2729#issuecomment-428155420": {
        "include/sway/commands.h": 1,
        "sway/commands/resize.c": 1
    },
    "seat.c: clean-up seat_set_focus_warp functionMain changes:\r\n1. Check if container is the child of a floating container to bring to the front\r\n2. Check if container is NULL early, allowing some later checks to be removed. Though I'm wondering whether in this case, it makes sense to destroy the last workspace, so maybe that block can be removed? (or even whether popups should be closed?)\r\n3. Removed `new_output_last_ws` because I'm not sure if it's doing anything. If it is, can someone provide an example?\r\n\r\nOther than that, I just moved a few things around to makes things a bit cleaner, hopefully.": {
        "sway/input/seat.c": 1
    },
    "seat: don't traverse the list to check if it's emptyFound by introspection.\r\n\r\nSigned-off-by: Konstantin Kharlamov <Hi-Angel@yandex.ru>": {
        "sway/input/seat.c": 1
    },
    "stability\u306b\u95a2\u3059\u308b\u6ce8\u8a18\u3092\u66f4\u65b0": {
        "README.ja.md": 1
    },
    "start adding missing ipc propertiesI started to work on the get_tree command to complete #2334 \r\n\r\n- [x] border\r\n- [x] current_border_width\r\n- [x] urgent\r\n- [x] deco_rect\r\n- [x] floating_nodes\r\n- [x] geometry\r\n- [x] orientation\r\n- [x] percent\r\n- [x] window\r\n- [x] window_rect\r\n\r\n\r\nNot finalized in i3 according to [docs](https://i3wm.org/docs/ipc.html#_tree_reply)\r\n\r\n- [ ] floating\r\n- [ ] fullscreen_mode\r\n- [ ] last_split_layout\r\n- [ ] output\r\n- [ ] scratchpad_state\r\n- [x] sticky\r\n- [ ] swallows\r\n- [ ] window_properties\r\n- [ ] workspace_layout": {
        "sway/ipc-json.c": 1
    },
    "sway-ipc: don't log errno if unneeded and add more descriptive errorsAs discussed in #2967.\r\n\r\nThe error paths in the handling of the SUBSCRIBE message used `wlr_log_errno()`, which appends the textual representation of `errno`.\r\n\r\nIn the first case, after failing to parse the message with Json-C, \"Failed to read request\" is printed.\r\nThis is misleading, since it was read correctly, it just wasn't valid JSON. Also, Json-C doesn't set `errno`, so either we use `wlr_log()` or also switch on `json_tokener_get_error()` and build a more detailed error message. The latter is not worth the boilerplate IMO.\r\n\r\nSecondly, if an unsupported event name is encountered, the message was \"Failed to parse request\". I changed this to \"Unsupported event type in subscribe request\". I changed to `wlr_log()` as above.": {
        "sway/ipc-server.c": 1
    },
    "swaybar: Fix scroll handling on workspace buttonsAs well as ignoring scroll events on status elements when click_events\r\nis enabled.\r\nPreviously, using the scroll wheel on a workspace button would switch to\r\nthat workspace instead of scrolling through them. Clicks and scrolling\r\non status elements would always be processed by swaybar, too. So in case\r\nyou were using scrolling as volume control on a status item, swaybar\r\nwould additionally scroll through your workspaces.\r\n\r\nNote: I'm unsure about the enum naming. It doesn't seem to express the intent well enough, open to suggestions.": {
        "include/swaybar/bar.h": 1,
        "include/swaybar/status_line.h": 1,
        "swaybar/bar.c": 1,
        "swaybar/i3bar.c": 1,
        "swaybar/render.c": 1
    },
    "swaybar: absorb bar_init function into bar_setup": {
        "swaybar/bar.c": 1
    },
    "swaybar: add leading comma to click event JSONFixes #2747": {
        "include/swaybar/status_line.h": 1,
        "swaybar/i3bar.c": 1
    },
    "swaybar: allow null status_commandSway sets a default `status_command` which runs `date` every second. This patch removes this behaviour so the user can have a `NULL` status bar if desired.\r\n\r\nI had to swap swaybar's `event_loop_poll` and `wl_display_flush` so that it would map the initial surface.": {
        "config.in": 1,
        "sway/commands/bar.c": 1,
        "sway/commands/bar/status_command.c": 1,
        "sway/config/bar.c": 1,
        "sway/ipc-json.c": 1,
        "sway/sway-bar.5.scd": 1,
        "swaybar/bar.c": 1
    },
    "swaybar: disallow left and right position and print error on defaultThe positions \"left\" and \"right\" are not allowed by the man page, remove them\r\nfrom the allowed positions. Also print an error to stderr if we default to the\r\nbottom position.\r\n\r\nFixes #2878": {
        "sway/commands/bar/position.c": 1,
        "swaybar/config.c": 1
    },
    "swaybar: explicitly check return value of getdelimThis prevents an signed-to-unsigned conversion error on buffer_index if\r\ngetdelim fails and returns -1, which caused swaybar to try to search the\r\nheader for the array and immediately failing": {
        "swaybar/status_line.c": 1
    },
    "swaybar: fix binding to wl_pointer multiple timesTo reproduce, suspend multiple times your computer and try using your mouse wheel on swaybar to switch between workspaces. It switches multiple times.\r\n\r\nFixes #2741": {
        "swaybar/bar.c": 1
    },
    "swaybar: fix hotplugswaybar doesn't handle hotplug correctly. On hotplug, a `wl_surface` is created and nothing else happens. This patch fixes this.\r\n\r\nTo test:\r\n1. Run sway with the Wayland backend\r\n2. `swaymsg create_output`\r\n3. The bar should appear on the newly created virtual output": {
        "swaybar/bar.c": 1
    },
    "swaybar: fix parsing errors when json is sent in partsFixes #2664 @cnt0 @Ogromny please check\r\n\r\nThis issue occurs when there is still input to be read, which did not arise when I was testing it before.": {
        "swaybar/i3bar.c": 1
    },
    "swaybar: fix scrolling behaviour1. wrap_scroll has been fixed\r\n2. release bindings are checked when returning early": {
        "swaybar/input.c": 1,
        "swaybar/ipc.c": 1,
        "swaybar/render.c": 1
    },
    "swaybar: handle hotpluggingDon't kill and respawn swaybars on hotplug.": {
        "include/sway/config.h": 1,
        "sway/config/bar.c": 1,
        "sway/main.c": 1,
        "sway/tree/output.c": 1,
        "swaybar/bar.c": 1,
        "swaybar/render.c": 1
    },
    "swaybar: remove cursor codeFixes scaling issue in https://github.com/swaywm/sway/issues/1750\r\n\r\nSomeone tell me why this is a stupid thing to do :P": {
        "include/swaybar/input.h": 1,
        "swaybar/bar.c": 1,
        "swaybar/input.c": 1,
        "swaybar/meson.build": 1
    },
    "swaybar: separate input code to new fileThis will allow for easier extensibility in the future without bloating bar.c any more.": {
        "/dev/null": 1,
        "include/swaybar/bar.h": 1,
        "include/swaybar/i3bar.h": 1,
        "swaybar/bar.c": 1,
        "swaybar/i3bar.c": 1,
        "swaybar/meson.build": 1
    },
    "swaybar: small fixes and clean-upsThe only real fix is setting the binding mode indicator, the others are mostly aesthetic changes.": {
        "/dev/null": 1,
        "include/swaybar/bar.h": 1,
        "include/swaybar/ipc.h": 1,
        "include/swaybar/status_line.h": 1,
        "sway/commands/bar/binding_mode_indicator.c": 1,
        "swaybar/bar.c": 1,
        "swaybar/i3bar.c": 1,
        "swaybar/ipc.c": 1,
        "swaybar/main.c": 1,
        "swaybar/render.c": 1,
        "swaybar/status_line.c": 1
    },
    "swaybar: synchronize rendering to output framesFixes #2692 ": {
        "include/swaybar/bar.h": 1,
        "include/swaybar/render.h": 1,
        "swaybar/bar.c": 1,
        "swaybar/render.c": 1
    },
    "swaybar: use output names instead of output indexes": {
        "include/swaybar/bar.h": 1,
        "swaybar/bar.c": 1
    },
    "swaybg: don't abort when output doesn't existThis can happen because of race conditions. It's better to just\r\nexit instead of aborting and generating a coredump.": {
        "swaybg/main.c": 1
    },
    "swaybg: fix increasingly smaller bg on hotplugFixes #2667 \r\n\r\nrender_background_image alters the scale that cairo uses. Depending on the image mode, resolution, and image size, this may cause the surface to be rendered increasingly smaller. By calling cairo_save and\r\ncairo_restore, any changes to the cairo settings by the function are not kept as a side effect.\r\n\r\nThe surface that swaybg uses is also now cleared before rendering a frame. This is needed to avoid artifacts  with certain combinations of image modes, resolutions, and image sizes. This was also part of the increasingly smaller background visual since it made it so it was not obvious the region being rendered to was smaller and caused an increasing number of smaller images to be appear for each hotplug.": {
        "common/background-image.c": 1,
        "swaybg/main.c": 1
    },
    "swayidle: enter idle state on SIGUSR1This allows to e.g. turn off screens when starting `swaylock`.\r\n\r\nAlso fixes a few things:\r\n* Removes generic idle callback infrastructure\r\n* Only connect to systemd system bus once if needed\r\n* Allow zero timeouts to mean no timeout in swayidle CLI\r\n* Fixes event loop\r\n* Use `wl_event_loop_add_signal` instead of `signal`\r\n\r\nDepends on https://github.com/swaywm/wlroots/pull/1337\r\n\r\nFixes #2914": {
        "swayidle/main.c": 1,
        "swayidle/swayidle.1.scd": 1
    },
    "swayidle: fix busy loop on writable FDThe wl_event_source_fd_update docs say:\r\n\r\n> File descriptors are usually writable to begin with, so they do not need to\r\n> be polled for writable until a write actually fails. When a write fails,\r\n> the event mask can be changed to poll for readable and writable, delivering\r\n> a dispatch callback when it is possible to write more. Once all data has\r\n> been written, the mask can be changed to poll only for readable to avoid\r\n> busy-looping on dispatch.\r\n\r\nSo we should only poll for WL_EVENT_WRITABLE if a write fails. I'm not yet sure\r\nhow to do this properly and Weston doesn't do it, so in the meantime I'll just\r\nfix the busy loop. I'll ask them too.\r\n\r\nFixes https://github.com/swaywm/sway/issues/3190": {
        "swayidle/main.c": 1
    },
    "swaylock: Support keyboard and pointer disconnects and reconnects* Lock the screen with swaylock\r\n* Do something that triggers the seat to update its capabilities (unplug/replug the keyboard, switch TTYs, sleep/suspend...)\r\n* Keys you then type into swaylock would be handled multiple times\r\n\r\nThis stores the keyboard and pointer in the swaylock state so they can be released when new capabilities are given.\r\n\r\nI had to bump the seat version up to 3 because `wl_pointer_remove` isn't supported on anything earlier.": {
        "include/swaylock/swaylock.h": 1,
        "swaylock/main.c": 1,
        "swaylock/seat.c": 1
    },
    "swaylock: exit early if unable to get input inhibitorThis stops the program from going into a spinlock without exiting\r\n\r\nSteps to reproduce problem: run `swaylock` twice.\r\nThe second swaylock will display an error, go into a loop and never exit.\r\n\r\nNote: not sure whether it is the right call to return an error. Thoughts?\r\n\r\nI don't know if this is the error causing https://github.com/swaywm/sway/issues/2898, but it seems related. Maybe if someone could check?": {
        "swaybar/bar.c": 1,
        "swaylock/main.c": 1,
        "swaylock/password.c": 1
    },
    "swaylock: fix build with musl libcTo use POLL_IN, signal.h must be included and _XOPEN_SOURCE [must be defined](https://git.musl-libc.org/cgit/musl/tree/include/signal.h#n223).": {
        "swaylock/main.c": 1
    },
    "swaymsg: fix get_outputs status codeFixes #3019": {
        "swaymsg/main.c": 1
    },
    "swaymsg: parse success of single objectRelated to #3218\r\n\r\nAllows swaymsg to parse the success attribute of a single object response. This is needed for the subscribe event.": {
        "swaymsg/main.c": 1
    },
    "swaynag: Truncate message to 2048 chars.This PR fixes #2842. I think this should work since `vsnprintf` truncates the `va_list` to the size specified in the second parameter. I'm probably wrong on this, so please let me know. Thanks.": {
        "common/pango.c": 1
    },
    "swaynag: fix use-after-free in wl_display_dispatchWhen destroying swaynag from within wl_display_dispatch (e.g. destroy output), we cannot disconnect the display as that will free the queue's event_list.\r\nFree it after running the loop instead.\r\n\r\nFixes this use-after-free:\r\n```\r\n==7312==ERROR: AddressSanitizer: heap-use-after-free on address 0x612000000110 at pc 0x000000412a9f bp 0x7ffd4e811760 sp 0x7ffd4e811750\r\nREAD of size 8 at 0x612000000110 thread T0\r\n    #0 0x412a9e in wl_list_empty ../common/list.c:206\r\n    #1 0x7f5b58f0d42f in dispatch_queue src/wayland-client.c:1572\r\n    #2 0x7f5b58f0d42f in wl_display_dispatch_queue_pending src/wayland-client.c:1815\r\n    #3 0x40f465 in swaynag_run ../swaynag/swaynag.c:390\r\n    #4 0x407576 in main ../swaynag/main.c:123\r\n    #5 0x7f5b58bb9412 in __libc_start_main ../csu/libc-start.c:308\r\n    #6 0x404a3d in _start (/opt/wayland/bin/swaynag+0x404a3d)\r\n\r\n0x612000000110 is located 208 bytes inside of 320-byte region [0x612000000040,0x612000000180)\r\nfreed by thread T0 here:\r\n    #0 0x7f5b594ab480 in free (/lib64/libasan.so.5+0xef480)\r\n    #1 0x40faff in swaynag_destroy ../swaynag/swaynag.c:454\r\n    #2 0x40cbb4 in layer_surface_closed ../swaynag/swaynag.c:82\r\n    #3 0x7f5b583e1acd in ffi_call_unix64 (/lib64/libffi.so.6+0x6acd)\r\n\r\npreviously allocated by thread T0 here:\r\n    #0 0x7f5b594aba50 in __interceptor_calloc (/lib64/libasan.so.5+0xefa50)\r\n    #1 0x7f5b58f0c902 in wl_display_connect_to_fd src/wayland-private.h:236\r\n```\r\n\r\n(you need a wayland compiled with asan, my wl_list hack, or running\r\nwith valgrind to see this trace)": {
        "swaynag/swaynag.c": 1
    },
    "tree/container: fix null pointer dereferencingfix issue #2614 ": {
        "sway/tree/container.c": 1
    },
    "tree/view.c: fix uninitialized variables warningI don't know if it's the project settings or the way the meson infra works in `nixpkgs`, but my package is broken without this change. (my toolchain is treating warnings as errors.) Plus, I figure this can only help.\r\n\r\nThanks.\r\n\r\ncc: @RyanDwyer the change came from (https://github.com/colemickens/sway/commit/65328ef60c9468ae44b4b1d6316d604c47293ec3#diff-819010104a02bd78a3801147b06a4d57)": {
        "sway/tree/view.c": 1
    },
    "use standard ARRAY_SIZE() macroReplace all the custom `sizeof(array)/sizeof(element)` and `sizeof(array)/sizeof(type)` with the standard macro `ARRAY_SIZE()`.\r\n\r\nThis reduces the risk of passing the wrong type, especially when code gets refactored and things change type.": {
        "common/unicode.c": 1,
        "common/util.c": 1,
        "include/util.h": 1,
        "sway/commands.c": 1,
        "sway/commands/bar/position.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/output/background.c": 1,
        "sway/config.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/main.c": 1,
        "swaybar/i3bar.c": 1,
        "swaylock/main.c": 1,
        "swaymsg/main.c": 1
    },
    "util.h: add missing include`parse_boolean()` takes and returns a `bool`": {
        "include/util.h": 1
    },
    "xwayland: fix unmanaged surfaces orderFixes #2349": {
        "sway/desktop/xwayland.c": 1
    },
    "xwayland: populate window_properties in json for viewswindow_properties is documented to contain a subset of the X11 properties\r\nof a window (its title, class, instance, role, and transient ID). This\r\ncommit adds the missing json object from the get_tree output for\r\nxwayland windows only.\r\n\r\nThis is a follow-up of #2911.\r\n\r\nSigned-off-by: Franklin \"Snaipe\" Mathieu <me@snai.pe>": {
        "include/sway/tree/view.h": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/ipc-json.c": 1,
        "sway/tree/view.c": 1
    },
    "zsh: fix sway completion`-v` is for `--version`": {
        "completions/zsh/_sway": 1
    }
}
