{
    " Fix segfault when switching back to workspace with osu! Also do not let tiled xwayland views do what they want.\r\n\r\nFixes #1841": {
        "sway/desktop/xwayland.c": 1,
        "sway/input/seat.c": 1
    },
    " fix accidently removing borders on XCB_CONFIGURE_REQUEST The view was configured with the container coordinates.\r\nAlthough they were right on the first configure, they\r\nchanged after a XCB_CONFIGURE_REQUEST, when the\r\nborder was already drawn.\r\n\r\nMay fix #1925 ": {
        "sway/desktop/xwayland.c": 1
    },
    "<sway/man: Fix path typo for sway-security(7) default path>Update the path provided in the documentation that refer to the\r\ndefault security value provided by swaywm project.": {
        "sway/sway-security.7.txt": 1
    },
    "<sway/man: In sway(5) treat scale as keyword for output command>Signed-off-by: Quentin Bourgeois <quentin@bourgeois.eu>": {
        "sway/sway.5.txt": 1
    },
    "Add %app_id to title_formatIf we have `%class` and `%instance` we should probably have `%app_id` too. Makes it easier to write criteria.": {
        "sway/tree/view.c": 1
    },
    "Add Address Sanitized build type - Add `-DCMAKE_BUILD_TYPE=ASAN` to possible build types\r\n\r\nI've found address sanitized builds to be super helpful for finding leaks etc.": {
        ".travis.yml": 1,
        "CMakeLists.txt": 1
    },
    "Add IPC get_outputs": {
        "include/sway/ipc-json.h": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1
    },
    "Add SWAY_DAMAGE_DEBUGSetting it to \"rerender\" will always re-render everything\r\nregardless of the damaged region. Setting it to \"highlight\" will\r\nclear the screen and render only damaged regions.\r\n\r\n- [x] Damage the whole output when highlighting": {
        "sway/desktop/output.c": 1
    },
    "Add config parser for workspace_layoutAdds config parser for `workspace_layout default|stacking|tabbed`. The rest of the parts are already in master.\r\n\r\nTests:\r\n1. Horizontal layout\r\n    - Have `workspace_layout default` and `default_orientation horizontal` in the config\r\n       - Having just `default_orientation horizontal` or neither should be the same\r\n    - Open two views and observe a horizontal split\r\n2. Vertical layout\r\n    - Have `workspace_layout default` and `default_orientation vertical` in the config\r\n        - Having just `default_orientation vertical` should be the same\r\n    - Open two views and observe a vertical split\r\n3. Tabbed layout\r\n    - Have `workspace_layout tabbed` in the config\r\n    - Open two views and observe a tabbed container\r\n4. Stacking layout\r\n    - Have `workspace_layout stacking` in the config\r\n    - Open two views and observe a stacked container": {
        "/dev/null": 1,
        "sway/commands.c": 1,
        "sway/meson.build": 1
    },
    "Add default_orientation command": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "sway/commands.c": 1,
        "sway/meson.build": 1,
        "sway/tree/layout.c": 1
    },
    "Add description of clipboard command to man page": {
        "sway/sway.5.txt": 1
    },
    "Add exec and exec_always commandsRemaining TODOs to add to wlroots issue:\r\n- [ ] Add `exec` PIDs to active workspace\r\n\r\nTest plan: `swaymsg exec gnome-dictionary`": {
        "/dev/null": 1,
        "sway/commands.c": 1,
        "sway/meson.build": 1
    },
    "Add extended debugging flagsWe currently have several ways of setting debug flags, including command\r\nline arguments, environment variables, and compile-time macros. This\r\nreplaces the lot with command line flags.": {
        "include/sway/debug.h": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/main.c": 1
    },
    "Add hidpi support to swaybarFixes https://github.com/swaywm/sway/issues/1137\r\n\r\nRef https://github.com/swaywm/sway/issues/797": {
        "include/swaybar/bar.h": 1,
        "swaybar/bar.c": 1,
        "swaybar/render.c": 1
    },
    "Add include command": {
        "/dev/null": 1,
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/meson.build": 1
    },
    "Add input \"identifier\" map_to_output \"identifier\"": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "sway/commands.c": 1,
        "sway/config/input.c": 1,
        "sway/input/seat.c": 1,
        "sway/meson.build": 1,
        "sway/sway-input.5.txt": 1
    },
    "Add lite damage trackingThis skips the renderer if nothing has changed, and renders\r\neverything otherwise.": {
        "include/sway/output.h": 1,
        "include/sway/server.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/output.c": 1,
        "sway/tree/view.c": 1
    },
    "Add map_from_region commandThis allows to map from a region of tablet tool.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "sway/commands.c": 1,
        "sway/commands/input/map_to_output.c": 1,
        "sway/config/input.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/seat.c": 1,
        "sway/meson.build": 1,
        "sway/sway-input.5.txt": 1
    },
    "Add minimal config subsystem": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "meson.build": 1,
        "sway/commands.c": 1,
        "sway/commands/exec.c": 1,
        "sway/commands/exec_always.c": 1,
        "sway/commands/exit.c": 1,
        "sway/main.c": 1,
        "sway/meson.build": 1
    },
    "Add option to select geometry on swaygrabThis fixes #1421 and I use it as `swaygrab -g $(slop)` as slop works fine on Wayland.\r\n\r\nI had to shift other options padding a bit to fit the geometry model (`width x height +- x +- y`).\r\n\r\nI could make it work with slop directly like maim does, but I don't feel it's necessary.": {
        "swaygrab/main.c": 1
    },
    "Add output config- [x] Merge new output config params\r\n- [x] Init new output config params\r\n- [x] wlr_output_layout_add\r\n\r\nTest plan:\r\n- [x] Configure each property (resolution, refresh rate, position, scale, transform)\r\n- [x] Test hotplugging\r\n- [x] Test IPC": {
        "/dev/null": 1,
        "include/sway/config.h": 1,
        "include/sway/container.h": 1,
        "include/sway/layout.h": 1,
        "include/sway/output.h": 1,
        "sway/commands.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/main.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1
    },
    "Add shell criteria tokenCloses #2044.": {
        "include/sway/criteria.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/criteria.c": 1,
        "sway/sway.5.scd": 1,
        "sway/tree/view.c": 1
    },
    "Add some missing ipc message types from i3Namely get_binding_modes and get_config, though I'm not sure how well the latter has been implemented, would appreciate feedback on it.\r\n\r\nNote: the config also doesn't expand includes, and I'm not sure whether that would be wanted, but it would definitely be a bit more work to add.": {
        "include/ipc.h": 1,
        "include/sway/config.h": 1,
        "sway/commands/output/background.c": 1,
        "sway/commands/reload.c": 1,
        "sway/config.c": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1,
        "swaymsg/main.c": 1,
        "swaymsg/swaymsg.1.scd": 1
    },
    "Add support for fractional output scale": {
        "include/sway/config.h": 1,
        "sway/commands/output.c": 1,
        "sway/config/output.c": 1
    },
    "Add tree representation to IPC workspace descriptionThis adds the tree representation to the IPC workspace description, which will make it easier for us to describe layouts to each other.\r\n\r\nRun `swaymsg -t get_tree`. See something like:\r\n\r\n    \"type\": \"workspace\",\r\n    \"representation\": \"H[URxvt V[URxvt URxvt]]\",\r\n\r\nRun `swaymsg -t get_workspaces`. See something like:\r\n\r\n    Workspace 1 (focused)\r\n      Output: X11-1\r\n      Layout: splith\r\n      Representation: H[URxvt V[URxvt URxvt]]": {
        "sway/ipc-json.c": 1,
        "sway/tree/container.c": 1,
        "swaymsg/main.c": 1
    },
    "Add wlc version": {},
    "Add workspace_auto_back_and_forth commandThis is the only missing piece - other code regarding this functionality has\r\nalready been ported from pre-wlroots source.": {
        "/dev/null": 1,
        "sway/commands.c": 1,
        "sway/meson.build": 1
    },
    "Add workspace_auto_back_and_forth for move cmdRelated tests: https://github.com/swaywm/sway-tests/pull/6": {
        "sway/commands/move.c": 1
    },
    "Add xdg-positioner supportTest plan: open right-click menus in Gedit, make sure they don't show up outside the current output.": {
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1
    },
    "Add xdg-shell stable supportNot having `default` cases in `switch` statements definitely helped.": {
        "/dev/null": 1,
        "include/sway/server.h": 1,
        "include/sway/tree/view.h": 1,
        "protocols/meson.build": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Add xwayland views to focused containerTest plan:\r\n\r\n1. Run sway, open a window on ws 1\r\n2. Switch to ws 2\r\n3. Open a xwayland window, observe it being added to ws 2": {
        "sway/desktop/xwayland.c": 1
    },
    "Added BUILDPKG for Arch (sway-wlroots)To bring the sway repo in-line with the wlroots repo I have created a BUILDPKG to build sway against wlroots. This should obviously only be used for the development branch of sway but can be used to build the final package once sway 1.0 goes live.\r\n\r\nFeedback welcome!": {},
    "Allow outputs to be re-enabledFixes #1887\r\n\r\nWhen an output is:\r\n- _connected_ - the sway_output stored in a `list_t` in `struct sway_root`\r\n- _disabled_ - the container is destroyed\r\n- _enabled_ - the container is (re-)created\r\n- _disconnected_ - the sway_output is removed from the `list_t` in `struct sway_root` and freed\r\n\r\nAdditionally, I added disabled outputs to the output of `swaymsg -t get_outputs`.": {
        "include/sway/ipc-json.h": 1,
        "include/sway/output.h": 1,
        "include/sway/tree/layout.h": 1,
        "sway/commands/output.c": 1,
        "sway/config/output.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "swaymsg/main.c": 1
    },
    "Allow setting border widths for normal borders using default_border.In Sway 0.15, `default_border normal 1` would set 1px wide borders. This recreates that behavior.\r\n": {
        "sway/commands/default_border.c": 1
    },
    "Allow to configure outputs by their identifierTest plan:\r\n\r\n```\r\noutput \"wayland wayland \" scale 2\r\n```": {
        "include/sway/config.h": 1,
        "sway/commands/output.c": 1,
        "sway/config/output.c": 1,
        "sway/tree/container.c": 1
    },
    "Allow xwayland views to become urgent when on a non-visible workspaceDepends on https://github.com/swaywm/wlroots/pull/1147\r\n\r\nThis removes the urgency stuff from the commit handler and puts it in a new `set_hints` handler instead. This allows the xwayland surface to become urgent without having to commit (which doesn't happen if it's on a non-visible workspace).\r\n\r\nTo test, open an xwayland terminal, ensure it allows urgent on bell, then run something like `sleep 2 && echo -en '\\a'`, then switch to a different workspace on the same output before the sleep finishes.": {
        "include/sway/tree/view.h": 1,
        "sway/desktop/xwayland.c": 1
    },
    "Also extract first workspace name from bindcodesThis PR resolves an open TODO in `src/tree/workspace.c`, so that in cases like\r\n\r\n         bindcode $mod+49 workspace 0\r\n         bindcode $mod+10 workspace 1\r\n\r\nthe first workspace name is correctly identified.": {},
    "Another version of idle and lock handlng by doing it in the compositorBased on the discussions in https://github.com/swaywm/sway/pull/1824 I created another version where everything is handled by the compositor directly. \r\nSo this does the same thing, namely adding dpms handling and lockscreen handling, but done within the compositor it self. \r\n\r\nFixes https://github.com/swaywm/sway/issues/541\r\n\r\nDepends on wlroots pull request:\r\nhttps://github.com/swaywm/wlroots/pull/879": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "include/sway/server.h": 1,
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/input/seat.c": 1,
        "sway/main.c": 1,
        "sway/meson.build": 1
    },
    "Arrange views after flattening the parentFixes #2029.\r\n\r\nTo test:\r\n\r\n* Created a tabbed layout with some views\r\n* Focus a view and run `splitv` or `splith` (tree should be something like `T[view, view, V[view]]`)\r\n* Run `move left` (tree should be `T[view, view, view]`)\r\n\r\nBefore the PR, the view would be offset from the title bar until the tabbed container is next arranged. After the PR, it shows correctly as a regular tab.": {
        "sway/tree/layout.c": 1
    },
    "Atomic layout updatesThis is a very early concept/WIP of atomic layout updates. It's so early that my code won't even compile. You should consider it a proposal with some example code attached. I'm submitting it here so everyone can see the direction I'm going in and give feedback as the feature is developed.\r\n\r\nThe new data structures I'm proposing are:\r\n\r\n* `struct sway_transaction`\r\n* `struct sway_transaction_instruction`\r\n* `struct sway_container_state`\r\n\r\nThe basic idea here is that when we want to arrange layout, we create a `struct sway_transaction`. We add instructions to the transaction - one instruction per container involved in the arrangement. Then we commit the transaction which sends all the configure events. Then when all the configures are done, or a time has passed, we apply the transaction which updates the tree accordingly.\r\n\r\nEach instruction has a pointer to a container, a pending state which it'll apply to the container, and the configure serial.\r\n\r\nI was originally going to have a `current` and `pending` state in each container, but realised that would be tedious to update the codebase to change `container->x` to `container->current.x`, so at the moment there's just `pending` and the current stuff uses the normal properties.\r\n\r\nWhen arranging layout, it builds the new pending state from the container's existing pending state. This is so a second transaction running at the same time won't revert what the first transaction is trying to change. This means if no transactions are in progress, every container's pending state must be an accurate reflection of the current state.\r\n\r\nAs for how windows are arranged by commands and so on, if you only want to do one arrange, you'll be able to call `arrange_and_commit(container)`. This creates a new transaction and commits it for you. If you need to do two arranges in the one transaction, such as moving a view from one visible workspace to another visible workspace, you can take the more manual approach:\r\n\r\n    struct sway_transaction *transaction = transaction_create();\r\n    arrange_windows(old_workspace, transaction);\r\n    arrange_windows(new_workspace, transaction);\r\n    transaction_commit(transaction);\r\n\r\nYou may notice this means there's only two entry points for the arrange functions, rather than one for each container type as we had before.\r\n\r\nFixes #1650\r\n\r\nFixes #220": {
        "/dev/null": 1,
        "include/sway/input/seat.h": 1,
        "include/sway/output.h": 1,
        "include/sway/server.h": 1,
        "include/sway/tree/arrange.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands/border.c": 1,
        "sway/commands/floating.c": 1,
        "sway/commands/fullscreen.c": 1,
        "sway/commands/gaps.c": 1,
        "sway/commands/layout.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/reload.c": 1,
        "sway/commands/resize.c": 1,
        "sway/commands/smart_gaps.c": 1,
        "sway/commands/split.c": 1,
        "sway/commands/swap.c": 1,
        "sway/config.c": 1,
        "sway/desktop/desktop.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/seat.c": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/output.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Attach destroy handler earlier for input devicesThis prevents it from being bypassed when the device has no seat configuration, which resulted in segfaults when trying to access the removed input.": {
        "sway/input/input-manager.c": 1
    },
    "Automatically float xwayland windowsThis PR makes the compositor connect to xwayland to get fetch atoms. These atoms are then used to automatically float xwayland windows.\r\n\r\nReference: https://github.com/i3/i3/blob/05a1dc0f6e1b2c963b10ff5d69789f6eb54b1b68/src/manage.c#L441\r\n\r\nUpdates #2063": {
        "/dev/null": 1,
        "include/sway/server.h": 1,
        "meson.build": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/seat.c": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1
    },
    "Basic split containersTodo:\r\n\r\n* [x] basic split containers\r\n* [x] move focus around in the split tree\r\n* [x] kill split containers\r\n* [x] handle container destruction in the seat\r\n* [x] arrange windows properly on container destruction\r\n* [ ] implement organization plan\r\n* [ ] flatten the tree correctly on tree structure changes\r\n* [ ] don't destroy view containers until their surface goes away\r\n* [ ] unify container destroy functions\r\n\r\nOrganization plan:\r\n\r\n* confine all tree structure (attach/move/remove) changes to tree.h\r\n* confine all layout changes (width/height/x/y) changes to layout.h\r\n* confine all traversals, queries, create, and destroy to container.h\r\n* move view and workspaces out of the tree folder\r\n\r\nKnown bugs: (will be fixed in the next effort)\r\n\r\n* Some places in the code destroy the container immediately instead of waiting for the view to close.\r\n\r\nTests:\r\n\r\n1. Open two windows and split the right one. Open a new window and you should see it split. Do that for `splith` and `splitv`.\r\n2. Test `focus <direction>` descends into the focus stack. Also test `focus parent` and `focus child` works.\r\n3. Split a container and try to kill it and sway should not crash.\r\n4. destroy a split container with focus and focus should revert to the focus inactive of the first nonempty parent up to the workspace level\r\n5. Open two windows and split the one on the right. Then close the window on the right. The windows should be arranged normally, with the left one taking up the whole screen.": {
        "/dev/null": 1,
        "include/sway/input/seat.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "sway/commands.c": 1,
        "sway/commands/kill.c": 1,
        "sway/input/seat.c": 1,
        "sway/main.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1
    },
    "BindingsMake bindings work.\r\n\r\nTODO\r\n\r\n* [x] parse binding command\r\n* [x] overwrite old bindings\r\n* [x] translate keysyms\r\n* [x] compositor bindings\r\n* [x] user keysym bindings\r\n* [x] user keycode bindings\r\n* [x] bindings with `--release`\r\n\r\n**Tests**\r\n\r\nExample config:\r\n\r\nThese are not valid commands, so you'll have to check the logs to see if they run.\r\n\r\n```\r\n# bindsym translated\r\nbindsym Alt+at pressed shift-alt-2\r\n\r\n# bindsym raw\r\nbindsym Alt+Shift+1 pressed shift-alt-1\r\n\r\n# bindsym release\r\nbindsym --release a do-it-on-release\r\n\r\n# make sure these get overwritten and only cmd3 runs when you press \"s\"\r\nbindsym s cmd1\r\nbindsym s cmd2\r\nbindsym s cmd3\r\n\r\n# Check bindcode with and without modifiers (use xev or similar to check keycodes)\r\nbindcode 39 bindcode no modifier\r\nbindcode Alt+39 bindcode one modifier\r\nbindcode Alt+Shift+39 bindcode two modifiers\r\nbindcode --release 40 bindcode-release\r\n```\r\n\r\n**Open questions**\r\n\r\nGetting the keysym from the name during parsing the bindings is currently done in a case insensitive way. So `bindsym A <cmd>` is equivalent to `bindsym a <cmd>` in that the keysym that is returned from the parsing is `a` and neither will respond to the raw `Shift+a`.\r\n\r\nWhat order should bindings run in if they are equivalent? Before, when there was only one keyboard layout during the lifetime of the wm, we could do this test when we parse the config, but now there is the possibility that many keyboards can have many layouts so the check is no longer possible until the key is pressed. Right now, we prioritize `bindcode` bindings (because that was the easiest to do), but we could also run them in the order they were applied in the config with just a little more complexity.\r\n\r\nShould hardcoded compositor bindings (currently only VT switching, but there will be more) run before or after? Current thinking is no, but an interesting case that will come up is that i3 has a hardcoded binding to Esc which cancels an interactive resize. If this feature is implemented, then the consequence will be that you can't bind to Esc.\r\n": {
        "/dev/null": 1,
        "include/sway/config.h": 1,
        "include/sway/input/keyboard.h": 1,
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/meson.build": 1
    },
    "Break everything^W^WUse wlr_box for sway_container": {
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "sway/commands/layout.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/resize.c": 1,
        "sway/desktop/desktop.c": 1,
        "sway/desktop/output.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Calculate positions of empty blocks in swaybarSkipping the rendering step altogether for empty blocks can result in those blocks having an x-position of 0, which causes all mouse events left of the status line to be sent to the leftmost block instead of the workspace buttons. This was happening with i3blocks (vivien/i3blocks#274), which for whatever reason always puts an empty block at the beginning of its status line.": {
        "swaybar/render.c": 1
    },
    "Call view_set_tiled for mapping non-floating viewsFixes #2209.": {
        "sway/tree/view.c": 1
    },
    "Change scale from int32_t to double for pangoSince `pango_attr_scale_new` takes a `double`, this PR changes the pango-related function signatures from `int32_t scale` to `double scale` to allow for fractional scaling of text.\r\n\r\nFixes #1985 ": {
        "common/pango.c": 1,
        "include/pango.h": 1
    },
    "Check for NULL in container_update_titleFixes crash when opening Firefox developer tools:\r\n\r\n```\r\n#0  0x00007fd007912a2e in __strcmp_sse2_unaligned () at /usr/lib/libc.so.6\r\n#1  0x000056519c27b023 in container_update_title (container=0x56519dc11ff0, new_title=0x0) at ../sway/sway/tree/container.c:663\r\n#2  0x00007fd0080dd87c in wlr_signal_emit_safe (signal=signal@entry=0x56519dbc5288, data=data@entry=0x56519dbc5210) at ../util/signal.c:29\r\n#3  0x00007fd0080d1176 in surface_commit_pending (surface=surface@entry=0x56519dbc5210) at ../types/wlr_surface.c:434\r\n#4  0x00007fd0080d1881 in surface_commit (client=<optimized out>, resource=<optimized out>) at ../types/wlr_surface.c:514\r\n#5  0x00007fd0052af1c8 in ffi_call_unix64 () at /usr/lib/libffi.so.6\r\n#6  0x00007fd0052aec2a in ffi_call () at /usr/lib/libffi.so.6\r\n#7  0x00007fd00830d7fd in  () at /usr/lib/libwayland-server.so.0\r\n#8  0x00007fd008309f79 in  () at /usr/lib/libwayland-server.so.0\r\n#9  0x00007fd00830b9b2 in wl_event_loop_dispatch () at /usr/lib/libwayland-server.so.0\r\n#10 0x00007fd00830a14c in wl_display_run () at /usr/lib/libwayland-server.so.0\r\n#11 0x000056519c25d8f0 in main (argc=<optimized out>, argv=<optimized out>) at ../sway/sway/main.c:418\r\n```": {
        "sway/tree/container.c": 1
    },
    "Check if command input has at least 2 argumentsUsing `swaymsg \"input identifier\"`, was making sway crashing, no matter the validity or not of the input identifier. According to `sway-input(5)`, all input commands have the following format : `input identifier subcmd arg1 [args]`, so at least 3 arguments are expected (identifier, subcmd, and arg1).": {},
    "Clean up container title functionsThis is mostly a code cleanup PR. The only functional change is fixing a minor bug (5th bullet point).\r\n\r\n* Add and use `lenient_strcat` and `lenient_strncat` functions\r\n* Rename `concatenate_child_titles` function as that's no longer what it does\r\n* Rename `container_notify_child_title_changed` because we only need to notify that the tree structure has changed, not titles\r\n* Don't notify parents when a child changes its title\r\n* Update ancestor titles when changing a container's layout\r\n    * Eg. create nested tabs and change the inner container to stacking\r\n* No need to store tree presentation in both `container->name` and `container->formatted_title`": {
        "common/stringop.c": 1,
        "include/stringop.h": 1,
        "include/sway/tree/container.h": 1,
        "sway/commands/layout.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1
    },
    "Clean up keyboard handling codeTo quote the commit messages:\r\n* Sort the list comprising the set of keys for the binding in ascending order. (Keyboard shortcuts depend only on the set of simultaneously pressed keys, not their order, so this change should have no external effect.) This simplifies comparisons between bindings.\r\n* Ensure that modifier keys are identified even when the next key does  not produce a keysym. This requires that modifier change tracking  be done for each sway_shortcut_state.\r\n* Permit regular and --release shortcuts on the same key combination. Distinct bindings are identified for press and release cases; note that the release binding needs to be identified for both key press and key release events.\r\n* Maintain ascending sort order for the shortcut state list, and keep track of the number of pressed key ids, for simpler (and hence faster) searching of the list of key bindings.\r\n* Move binding duplicate detection into get_active_binding to avoid duplicating error messages.\r\n\r\n----\r\n\r\nCode which may be useful to verify how this works:\r\n\r\n\t// Debug. Print pressed keysyms\r\n\tfprintf(stderr, \"%s Trl %04x %02d:\", event->state==WLR_KEY_PRESSED ? \"press\" : \"rel. \", translated_modifiers, keyboard->state_keysyms_translated.npressed);\r\n\tfor (int i=0;i<keyboard->state_keysyms_translated.npressed;i++) {\r\n\t\tchar buf[256];\r\n\t\txkb_keysym_get_name(keyboard->state_keysyms_translated.pressed_keys[i], buf, 255);\r\n\t\tfprintf(stderr, \" %s\", buf);\r\n\t}\r\n\tfprintf(stderr, \"\\n\");\r\n\tfprintf(stderr, \"%s Raw %04x %02d:\", event->state==WLR_KEY_PRESSED ? \"press\" : \"rel. \", raw_modifiers, keyboard->state_keysyms_raw.npressed);\r\n\tfor (int i=0;i<keyboard->state_keysyms_raw.npressed;i++) {\r\n\t\tchar buf[256];\r\n\t\txkb_keysym_get_name(keyboard->state_keysyms_raw.pressed_keys[i], buf, 255);\r\n\t\tfprintf(stderr, \" %s\", buf);\r\n\t}\r\n\tfprintf(stderr, \"\\n\");\r\n\tfprintf(stderr, \"%s Kcd %04x %02d:\", event->state==WLR_KEY_PRESSED ? \"press\" : \"rel. \", raw_modifiers, keyboard->state_keysyms_raw.npressed);\r\n\tfor (int i=0;i<keyboard->state_keycodes.npressed;i++) {\r\n\t\tfprintf(stderr, \" %d\", keyboard->state_keycodes.pressed_keys[i]);\r\n\t}\r\n\tfprintf(stderr, \"\\n\");\r\n\r\n----\r\n\r\nThis does not change dead/compose key behavior,  i.e.  `Ctrl+Multi_Key+1+2`,  `Alt+dead_acute+a`, are still usable translated shortcut specifications. Latching modifiers still do not work, precisely as described by #1451. Distinct press and release bindings were tested with\r\n\r\n    bindsym Ctrl+a exec echo \"Press\"\r\n    bindsym --release Ctrl+a exec echo \"Release\"\r\n\r\nThe changes in this pull request make it easier to order bindings and hence to switch to a more appropriate data structure to store them (such as an rbtree map) which can load/query shortcuts faster than `\u03f4(n^2)`/`O(n)`.\r\n\r\nIf changes are necessary and there are style fix commits, please remind me to rebase at the end.\r\n\r\n": {},
    "Cleanup loggingThis finishes cleaning up all sway_log that are currently compiled.\r\n\r\nIt's the first time I'm actually looking at wlroots logging, I'm not sure I like the way we call _strip_path in the macro because this calls _strip_path all the time even if log level isn't verbose enough or if condition doesn't match in sway_assert.\r\nI guess ultimately it doesn't matter much, but was that a conscious decision when wlr_log was implemented? I'd be happy to transform it back like sway's by adding file/line as separate arguments to callback if there are afterthoughts.": {
        "common/ipc-client.c": 1,
        "common/log.c": 1,
        "common/readline.c": 1,
        "common/util.c": 1,
        "include/log.h": 1,
        "sway/commands.c": 1,
        "sway/commands/bind.c": 1,
        "sway/commands/exec.c": 1,
        "sway/commands/exec_always.c": 1,
        "sway/commands/input.c": 1,
        "sway/commands/input/click_method.c": 1,
        "sway/commands/input/events.c": 1,
        "sway/commands/input/tap.c": 1,
        "sway/commands/input/xkb_layout.c": 1,
        "sway/commands/input/xkb_model.c": 1,
        "sway/commands/input/xkb_options.c": 1,
        "sway/commands/input/xkb_rules.c": 1,
        "sway/commands/input/xkb_variant.c": 1,
        "sway/commands/output.c": 1,
        "sway/commands/seat.c": 1,
        "sway/commands/set.c": 1,
        "sway/config.c": 1,
        "sway/config/input.c": 1,
        "sway/config/output.c": 1,
        "sway/config/seat.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-server.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/workspace.c": 1,
        "swaymsg/main.c": 1,
        "swaymsg/meson.build": 1
    },
    "Clear buffer after beginning renderer": {
        "sway/desktop/output.c": 1
    },
    "Command criteriaMake command criteria work.\r\n\r\nAdd a `kill` command, demonstrates new conventions for running bindings and includes general config refactoring.\r\n\r\nConfig refactor:\r\n\r\n* Remove globals `current_input_config` and `current_seat_config` and be more careful about how these are managed.\r\n* Set config handler context for the seat of the keyboard that executes the command\r\n* When criteria matches, run each command with `current_container` config context for each container that matches.\r\n\r\nImplemented criteria:\r\n\r\n* class\r\n* con_id\r\n* app_id\r\n* instance\r\n* title\r\n\r\nTest:\r\n\r\nKill the currently focused window.\r\n\r\n```\r\nbindsym Alt+w kill\r\n```\r\n\r\nKill *only* the gnome-terminals.\r\n\r\n```\r\nbindsym Alt+w [app_id=\"gnome-terminal-server\"] kill\r\n```\r\n\r\nTest the other criteria listed above similarly.": {
        "/dev/null": 1,
        "include/sway/config.h": 1,
        "include/sway/container.h": 1,
        "include/sway/input/input-manager.h": 1,
        "include/sway/view.h": 1,
        "sway/commands.c": 1,
        "sway/commands/input.c": 1,
        "sway/commands/input/accel_profile.c": 1,
        "sway/commands/input/click_method.c": 1,
        "sway/commands/input/drag_lock.c": 1,
        "sway/commands/input/dwt.c": 1,
        "sway/commands/input/events.c": 1,
        "sway/commands/input/left_handed.c": 1,
        "sway/commands/input/middle_emulation.c": 1,
        "sway/commands/input/natural_scroll.c": 1,
        "sway/commands/input/pointer_accel.c": 1,
        "sway/commands/input/scroll_method.c": 1,
        "sway/commands/input/tap.c": 1,
        "sway/commands/input/xkb_layout.c": 1,
        "sway/commands/input/xkb_model.c": 1,
        "sway/commands/input/xkb_options.c": 1,
        "sway/commands/input/xkb_rules.c": 1,
        "sway/commands/input/xkb_variant.c": 1,
        "sway/commands/seat.c": 1,
        "sway/commands/seat/attach.c": 1,
        "sway/commands/seat/fallback.c": 1,
        "sway/config.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-server.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1
    },
    "Comment floating_modifier to avoid run time warningSway cannot parse config option floating_modifier.\r\n\r\nIt appears that this config option has existed before, and is currently\r\nwaiting to be reimplemented.\r\n\r\nIn the meantime commment the config option, so that the user does not\r\nget confused if the config parsing gets halted half-way though or not.": {
        "config.in": 1
    },
    "Consolidate WLR and Sway loggingSee #1390 and swaywm/wlroots#546": {
        "sway/main.c": 1,
        "sway/server.c": 1
    },
    "Convert FindLibcap.cmake to modern cmakeI was looking for a FindLibcap.cmake to use in icecream, and yours was the only one I found.  I notice it doesn't support modern cmake so I added that for you.": {
        "CMake/FindLibcap.cmake": 1
    },
    "Copy input config referencesDon't hang onto copies of config pointers in the input manager or the seat.\r\n\r\nFor #1555.": {
        "include/sway/config.h": 1,
        "sway/config.c": 1,
        "sway/config/input.c": 1,
        "sway/config/seat.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/seat.c": 1
    },
    "Correctly clip title texture if necessaryTest plan: set output config to `scale 1.5 transform 90`, check that the texture stops right before the border.\r\n\r\nFixes #1983": {
        "sway/desktop/output.c": 1
    },
    "Criteria improvementsAdds support for the following criteria tokens: `id` (X11 window ID), `instance`, `tiling`, `workspace`.\r\n\r\nEnsures each view will only execute a criteria once, by storing a list of executed criteria in the view. This is the same strategy used by i3.\r\n\r\nThis also adds a check for criteria when an xwayland view changes its title, class, instance or window type.\r\n\r\nSome implementation notes:\r\n\r\n* `get_prop` has been split into `get_string_prop` and `get_int_prop` because some properties like the X11 window ID, window type and role are numeric.\r\n* I started implementing the window_type and window_role tokens, but I think modifications are needed to wlroots to complete it. I've left some supporting code in place for this (event listeners and `view_get_window_{type,role}` functions).\r\n* I discovered xwayland views trigger the `set_title` event when they change their title, so I've moved the call to `view_update_title` out of `handle_commit` and into there. xdg_shell_v6 still does it in `handle_commit` though.": {
        "include/sway/tree/view.h": 1,
        "sway/criteria.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/tree/view.c": 1
    },
    "Cursor input simulation with sway commands.Implements the cursor simulation part of #1779\r\n\r\nCursor simulation with `seat ... cursor` set of commands is implemented and works as intended.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/input/cursor.h": 1,
        "sway/commands.c": 1,
        "sway/commands/seat.c": 1,
        "sway/input/cursor.c": 1,
        "sway/meson.build": 1,
        "sway/sway.5.txt": 1
    },
    "DPMS and lock handlingThis pull request adds DPMS and lock handling and requires some wlroots changes also, that is in a separate pullrequest for wlroots. \r\nThis pullrequest have the following parts:\r\n* idle notifications on mouse and keyhandling\r\n* swayidle daemon that recieves idle notifications sends dpms commands and locks screen\r\n* modifications to output command, adding dpms\r\n\r\nFixes #541 ": {
        "/dev/null": 1,
        "config.in": 1,
        "include/sway/config.h": 1,
        "include/sway/server.h": 1,
        "meson.build": 1,
        "protocols/meson.build": 1,
        "sway/commands/output.c": 1,
        "sway/config.c": 1,
        "sway/config/output.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/server.c": 1
    },
    "Damage tracking for view childrenTest plan: make sure damage is accumulated when view children commit.\r\n\r\n* Add `wlr_log(L_DEBUG, \"child damaged\");` in `view.c` on line 231\r\n* Add `wlr_log(L_DEBUG, \"unmanaged surface damaged\");` in `xwayland.c` on line 32\r\n\r\nCheck that these appear in the log when opening a popup and a combo in `gnome-calculator`, under xdg-shell and xwayland.": {
        "/dev/null": 1,
        "include/sway/output.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Default to backend-wise input device mapping, if anyTest plan: rotate the output on the Wayland or X11 backend.": {
        "sway/input/seat.c": 1
    },
    "Default to current time when triggering cursor events": {
        "include/sway/input/cursor.h": 1,
        "sway/commands/seat/cursor.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1
    },
    "Delete old asciidoc man pagesNo idea why they're still here.": {
        "swaylock/swaylock.1.scd": 1,
        "swaylock/swaylock.1.txt": 1,
        "swaymsg/swaymsg.1.txt": 1
    },
    "Destroy display in server_finiThis fixes an issue with direct sessions not shutting down properly, reported by ponky on IRC.": {
        "sway/server.c": 1
    },
    "Destroy empty workspace when destroying its outputI discovered a crash that can be triggered with the following steps:\r\n- Start a fresh sway in a two-output configuration\r\n- Create at least one view on the first output\r\n- Move the workspace from the first output to the second\r\n    - Note that the original second output workspace sticks around even though it's empty, this is another bug\r\n- Disconnect the second output\r\n- :boom:\r\n\r\nThis appears to be due to the empty workspace on the second display. Because it is empty, `container_output_destroy` calls `container_destroy` on it instead of moving it to another output. However, at this point, the workspace has already been removed from its current output, leaving it without a parent. This causes the subsequent `container_workspace_destroy` to return NULL, as there is no parent output to look for another workspace on. This NULL is interpreted by `container_destroy_noreaping` as a refusal to be destroyed, which is not what was intended. That then also returns NULL, which causes `container_destroy` to not reap the workspace out of its output. Because it has been removed from its parent output, it is also not affected by that container's recursive reaping that occurs shortly after.\r\n\r\nThe ultimate effect of this is that there's a magical detached workspace sitting around somewhere, and the next time something tries to figure out where it is, it explodes.\r\n\r\nThe fix is to simply return some parent container instead of NULL when the workspace discovers that it no longer belongs to an output. I chose the root container. The value is never actually used.\r\n\r\nPinging @acrisci because I think he may have more insight into why the destroy functions return the parent container and whether this is a good idea.": {
        "sway/tree/container.c": 1
    },
    "Destroy empty workspaces when moving away": {
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "sway/input/seat.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1
    },
    "Disable -WerrorFixes^W ignores various errors with new dumb GCC warnings.": {
        "CMakeLists.txt": 1
    },
    "Do not call the map handler when an xwayland surface is createdUpdate for https://github.com/swaywm/wlroots/pull/866": {
        "sway/desktop/xwayland.c": 1
    },
    "Don't call view_set_fullscreen on unmapped xwayland viewsFixes a segfault when running Highway Blossoms.": {
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1
    },
    "Don't destroy view child on xdg-popup unmapThe current code prevents an unmapped xdg-popup from being re-mapped again.\r\n\r\nThis PR also removes an extraneous `if (surface is unmapped)` check on destroy: unmap is guaranteed to always be triggered before destroy.": {
        "include/sway/tree/view.h": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1
    },
    "Don't disable borders for xwayland floating views": {
        "include/sway/tree/view.h": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/tree/view.c": 1
    },
    "Don't focus tabbed and stacked containers on mouseoverFixes #2024.": {
        "sway/input/cursor.c": 1
    },
    "Don't move empty workspaces when output is destroyed": {
        "sway/tree/container.c": 1
    },
    "Don't return pending children in seat_get_active_current_childFixes #2192.\r\n\r\n`seat_get_active_current_child` is intended to return a **current** child of the given container (ie. a child which has finished its mapping transaction and is able to be rendered on screen). The previous implementation was capable of returning a pending child, which caused a child of a tabbed or stacked view to be rendered prematurely while it was mapping.": {
        "sway/input/seat.c": 1
    },
    "Don't send frame done immediately when rendering Depends on #1756": {
        "sway/desktop/output.c": 1
    },
    "Don't send frame done to surfaces behind lockscreenAlso, when rendering, don't descend into the tree if the lockscreen is active. Just render the lockscreen's surfaces.\r\n\r\nThis makes an assumption that an `exclusive_client` will always be a lockscreen. This assumption is also made when handling `bindsym --locked` so I think it's a safe assumption.\r\n\r\nThis PR paints black behind the lockscreen, so if your lockscreen uses transparency or doesn't cover the whole layout for some reason then you'll just see black there. I know some people like to have their lock shortcut take a screenshot, blur it and apply it as the lockscreen background, and this is still possible.\r\n\r\nMaybe my fans will spin down when my computer is locked now.": {
        "include/sway/output.h": 1,
        "sway/desktop/output.c": 1,
        "swaylock/main.c": 1
    },
    "Don't steal focus when a view changes its titleFixes #1989\r\n\r\nWhen a view changes its title, it executes its criteria and must focus the view in question temporarily. It would then incorrectly restore focus to whatever view was focused_inactive on that workspace. I'm not sure why the code does anything with the workspace - it was copied from sway 0.15.": {
        "sway/tree/view.c": 1
    },
    "Don't unmap on destroy, this is already guaranteed by wlroots": {
        "sway/desktop/xwayland.c": 1
    },
    "Drop Travis in favor of builds.sr.ht": {
        ".travis.yml": 1,
        "README.de.md": 1,
        "README.el.md": 1,
        "README.fr.md": 1,
        "README.it.md": 1,
        "README.ja.md": 1,
        "README.md": 1,
        "README.pt.md": 1,
        "README.ru.md": 1,
        "README.uk.md": 1
    },
    "Enable borders on floating SSD xdg-shell views- [x] View is created after decoration mode is sent": {
        "/dev/null": 1,
        "include/sway/server.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1
    },
    "Enable docker service in travisAdds the docker service in travis which is now required by arch-travis.\n\nSee: https://github.com/mikkeloscar/arch-travis/pull/40": {
        ".travis.yml": 1
    },
    "Enable docker service in travisAdds the docker service in travis which is now required by arch-travis.\r\n\r\nSee: https://github.com/mikkeloscar/arch-travis/pull/40": {
        ".travis.yml": 1
    },
    "Escape underscore in sway-input(5) man page to avoid invalid colors": {},
    "Explicitly setting the version of json-c required to 0.12.1. This is needed because the development\r\n\r\n version breaks the existing API of json_object_array_length()\r\n\r\n by moving the return from int to size_t.\r\n\r\nThis would fix #1355": {
        "CMake/FindJsonC.cmake": 1,
        "CMakeLists.txt": 1,
        "README.de.md": 1,
        "README.el.md": 1,
        "README.fr.md": 1,
        "README.it.md": 1,
        "README.ja.md": 1,
        "README.md": 1,
        "README.pt.md": 1,
        "README.ru.md": 1,
        "README.uk.md": 1
    },
    "Fine-grained damage trackingThe last part is still missing: rendering only damaged regions": {
        "include/sway/desktop.h": 1,
        "include/sway/output.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands/opacity.c": 1,
        "sway/desktop/desktop.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/tree/view.c": 1
    },
    "Fix #1857 -> transparency in swaylockFixes #1857 ": {
        "swaylock/render.c": 1
    },
    "Fix #1975Fixes #1975 \r\n- Window titles are not hidden by hide_edge_borders anymore\r\n- Only borders on the screen edge are hidden now": {
        "include/sway/tree/view.h": 1,
        "sway/desktop/output.c": 1,
        "sway/tree/view.c": 1
    },
    "Fix #2018 - Moving containers out of tabs/stacksFixes #2018 \r\n\r\nMoving a container out of a tabbed or stacked parent container creates a new split with the container and it's former parent as siblings": {
        "sway/ipc-json.c": 1,
        "sway/tree/layout.c": 1
    },
    "Fix PATH setenv() in exec_always`setenv` returns 0 on success, -1 on failure.": {
        "sway/commands/exec_always.c": 1
    },
    "Fix `swaylock -f`This commit makes swaylock poll the registry the first time in its\r\nfork in order for sway to recognize it and grant it lock privileges": {
        "swaylock/main.c": 1
    },
    "Fix a bunch of leaksThis PR depends on #2203 as it touches the same function.\r\n\r\nI'm pretty sure I'm still missing some here, I got a couple of crashes while trying to \"produce activity\" so I got annoyed and very likely missing some as I didn't check various patterns. This should still be a good start.\r\n\r\nThere also is tons of fontconfig stuff that seems to be alloc'd by cairo but I have no idea where that comes from, hopefully it's really just fontconfig's cache and won't grow endlessly.\r\n\r\nwrt. what I said on IRC earlier for swaybar (bar leaking ~250 bytes every 5s) it would seem that this only happens with ASAN, so I guess that's just how much memory ASAN needs to keep track of the... 913 (!) indirect alloc/malloc calls that swaybar does every 5 seconds according to perf record. I guess I'll live with that for now but that means I won't be able to keep ASAN if I seriously start to use sway...": {
        "include/sway/commands.h": 1,
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/config/bar.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Fix a bunch of swaybar memory leaksThere are more leaks from fontconfig and cairo. I guess we can't do anything about it.": {
        "include/swaybar/bar.h": 1,
        "include/swaybar/config.h": 1,
        "include/swaybar/status_line.h": 1,
        "swaybar/bar.c": 1,
        "swaybar/config.c": 1,
        "swaybar/i3bar.c": 1,
        "swaybar/ipc.c": 1,
        "swaybar/status_line.c": 1
    },
    "Fix ancestor typoss/anscestor/ancestor": {
        "include/sway/tree/container.h": 1,
        "sway/commands/swap.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1
    },
    "Fix back-and-forth workspace name saving for non-empty workspaces# Summary\r\nDue to a missing assignment, the name of the active container is saved for workspace back-and-forth instead of the name of the workspace. For an empty workspace, the active container is the workspace. However, for a non-empty workspace, it will be a descendant of the workspace.\r\n\r\nThis PR makes a single line fix to add that missing assignment so that the name of the workspace is stored in both cases.\r\n\r\n# Test Plan\r\n0. Recommended Prerequisite\r\n    - Add a binding for `workspace back-and-forth` to the sway config\r\n\r\n1. Switching from an empty workspace\r\n    - Switch to workspace 2\r\n    - Switch to workspace 1\r\n    - Switch to workspace back-and-forth\r\n    - Look at either swaybar and/or the output of `swaymsg -t get_workspaces` and verify that the active workspace is `2`\r\n\r\n2. Switching from a non-empty workspace\r\n    - Switch to workspace 2\r\n    - Open a terminal (or any other window)\r\n    - Switch to workspace 1\r\n    - Switch to workspace back-and-forth\r\n    - Look at either swaybar and/or the output of `swaymsg -t get_workspaces` and verify that the active workspace is `2`": {
        "sway/tree/workspace.c": 1
    },
    "Fix border commands from changing focusFixes #1951 \r\n\r\nThis allows the border commands to update the cursor without having the side effect of `focus_follows_mouse` changing the focus. All other calls to `cursor_send_pointer_motion` currently allow refocusing (no change) so `focus_follows_mouse` should continue to work as expected.": {
        "include/sway/input/cursor.h": 1,
        "sway/commands/border.c": 1,
        "sway/commands/seat/cursor.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1
    },
    "Fix border weirdnessI don't know why that line is there, but it effectively forces `B_NORMAL` for all tiled views, even if I run `border toggle`. It also disables borders for floating views.": {
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Fix buffer issues in swaybar status lineThis PR fixes a null termination issue and two dangling pointers.\r\n\r\n# Null termination issue\r\n\r\nThe string that read() returns is not null terminated, so the `while (*cur)` loop could run into garbage data. In all my testing this has sometimes resulted in a \"failed to parse i3bar json\" message, and sometimes an infinite loop where swaybar pegs the CPU and nothing is displayed (or updated) in the status line part of the bar.\r\n\r\nTo prevent this I'm setting the null byte manually.\r\n\r\nTo test, run swaybar with a status command several times. Without my PR one of the above symptoms occurs about once in every 5 launches. With my PR it should not display the parse error message nor become unresponsive at all.\r\n\r\n# Dangling pointers\r\n\r\nWhen increasing the buffer size, `cur` and `state->current_node` need to be updated accordingly as these point into the old buffer.\r\n\r\nTo test this, you can make Conky return a JSON element over 4096 bytes long, but it's easier to temporarily change the default buffer_size from 4096 to something small like 16 in swaybar/status_line.c line 74.": {
        "swaybar/i3bar.c": 1
    },
    "Fix build with recent wlrootsA couple of trivial fix ; this should build with wlroots/master and remove the last need for wlc includes that I didn't have in a standard path.": {
        "common/util.c": 1,
        "include/sway/server.h": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/server.c": 1
    },
    "Fix cmd_workspace crash when a surface has focusFixes #1976 \r\nFixes #1957 \r\n\r\nSwitching workspaces would cause a crash when a layer surface has focus, such as swaylock. This is due to the seat not having focus so `seat_get_focus` returns `NULL`, which fails the assert in `container_parent` on the following line.\r\n\r\nThe only reason why `seat_get_focus` was called was to handle mouse warping. This is already handled by the `seat_set_focus` call in `workspace_switch` though so it can be removed entirely": {
        "sway/commands/workspace.c": 1
    },
    "Fix compilation errors related to disabled outputs```\r\nFAILED: sway/sway@@sway@exe/desktop_output.c.o \r\nclang -Isway/sway@@sway@exe -Isway -I../sway -Iinclude -I../include -Isubprojects/wlroots/include -I../subprojects/wlroots/include -I/usr/include/cairo -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/harfbuzz -I/usr/include/uuid -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/json-c -I/usr/include/pango-1.0 -I/usr/include/fribidi -I/usr/include/libdrm -Xclang -fcolor-diagnostics -pipe -D_FILE_OFFSET_BITS=64 -Wall -Winvalid-pch -Wextra -Werror -std=c11 -O0 -g -Wno-unused-parameter -Wno-unused-function -Wno-unused-result '-DSYSCONFDIR=\"/etc\"' '-DSWAY_VERSION=\"1.0-alpha.2-266-g22c1c4be (\" __DATE__ \", branch '\"'\"'master'\"'\"')\"' -pthread  -MD -MQ 'sway/sway@@sway@exe/desktop_output.c.o' -MF 'sway/sway@@sway@exe/desktop_output.c.o.d' -o 'sway/sway@@sway@exe/desktop_output.c.o' -c ../sway/desktop/output.c\r\n../sway/desktop/output.c:1172:15: error: address of 'output->link' will always evaluate to 'true' [-Werror,-Wpointer-bool-conversion]\r\n        if (&output->link) {\r\n        ~~   ~~~~~~~~^~~~\r\n1 error generated.\r\n[3/131] Compiling C object 'sway/sway@@sway@exe/ipc-json.c.o'.\r\nFAILED: sway/sway@@sway@exe/ipc-json.c.o \r\nclang -Isway/sway@@sway@exe -Isway -I../sway -Iinclude -I../include -Isubprojects/wlroots/include -I../subprojects/wlroots/include -I/usr/include/cairo -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/harfbuzz -I/usr/include/uuid -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/json-c -I/usr/include/pango-1.0 -I/usr/include/fribidi -I/usr/include/libdrm -Xclang -fcolor-diagnostics -pipe -D_FILE_OFFSET_BITS=64 -Wall -Winvalid-pch -Wextra -Werror -std=c11 -O0 -g -Wno-unused-parameter -Wno-unused-function -Wno-unused-result '-DSYSCONFDIR=\"/etc\"' '-DSWAY_VERSION=\"1.0-alpha.2-266-g22c1c4be (\" __DATE__ \", branch '\"'\"'master'\"'\"')\"' -pthread  -MD -MQ 'sway/sway@@sway@exe/ipc-json.c.o' -MF 'sway/sway@@sway@exe/ipc-json.c.o.d' -o 'sway/sway@@sway@exe/ipc-json.c.o' -c ../sway/ipc-json.c\r\n../sway/ipc-json.c:149:16: error: address of array 'wlr_output->name' will always evaluate to 'true' [-Werror,-Wpointer-bool-conversion]\r\n                        wlr_output->name ? json_object_new_string(wlr_output->name) : NULL);\r\n                        ~~~~~~~~~~~~^~~~ ~\r\n1 error generated.\r\n```": {
        "sway/desktop/output.c": 1,
        "sway/ipc-json.c": 1
    },
    "Fix compilation on Debianjson-c 0.13 isn't required.\r\nThe size_t -> int changes are more correct as that's what the json functions return.": {
        "meson.build": 1,
        "sway/ipc-server.c": 1,
        "swaybar/i3bar.c": 1,
        "swaybar/ipc.c": 1,
        "swaymsg/main.c": 1
    },
    "Fix config buffer overflow and logicWhen I originally wrote the code to read the config file, I set the struct variable early and used the null check to see whether it was reading the main config or an included config. Later on, I changed my mind so that it would attach it late, which negated the null check without me realising, leading to a whole bunch of problems.\r\n\r\nHopefully, this fixes that, as well as making the logic a bit better. I also added in a check so that if somehow, improbably, it reads in more than it thought it needed, it just aborts. I thought about resizing the buffer but was still a bit paranoid about race conditions.\r\n\r\nWould appreciate feedback.": {
        "sway/config.c": 1
    },
    "Fix crash and render issues involving cursor_send_pointer_motionFixes #2302, as well as a crash.\r\n\r\nTo replicate the crash:\r\n\r\n* Have multiple outputs\r\n* In config: `for_window [<criteria>] workspace foo`\r\n* Also in config: `workspace foo output <left-output-name>`\r\n* Focus the right output, and ensure workspace foo doesn't exist\r\n* Launch the app that triggers the criteria\r\n\r\nWhen the view maps, it calls `workspace_switch` which calls `send_set_focus` which calls `cursor_send_pointer_motion` which calls `transaction_commit_dirty`. This call to `transaction_commit_dirty` is not meant to happen at this time because the tree isn't guaranteed to be in a consistent state, but I'm not sure how exactly this leads to the crash or render issues.\r\n\r\nIn this case the transaction is already committed by the view implementation's `handle_map` function. So the solution is to remove it from `cursor_send_pointer_motion` and add it to the other functions in cursor.c which call `cursor_send_pointer_motion`.": {
        "sway/input/cursor.c": 1
    },
    "Fix crash in container_descendants()If root is a C_VIEW, the children property is a null pointer.\r\n\r\nWhile at a glance it doesn't make sense to call container_descendants() on a C_VIEW, it can still happen.\r\n\r\nTo test, spawn a terminal and run `swaymsg opacity 0.9`.": {
        "sway/tree/container.c": 1
    },
    "Fix crash in move workspace to output commandFixes #2026.\r\n\r\nTo test, run something like `move workspace to output left`.": {
        "sway/tree/layout.c": 1
    },
    "Fix crash when launching swaylock`container` will be `NULL` if launching swaylock.": {
        "sway/input/seat.c": 1
    },
    "Fix crash when moving workspace to outputTo test, run something like `move workspace to output right`.": {
        "sway/tree/layout.c": 1
    },
    "Fix crash when using pango markup fontThe characters & < > ' \" needs to be escaped when using pango markup\r\n\r\nSigned-off-by: Heghedus Razvan <heghedus.razvan@protonmail.com>": {
        "common/pango.c": 1,
        "include/pango.h": 1,
        "sway/tree/view.c": 1
    },
    "Fix crash with stacking layout after f42bf0ad4The \"simple\" rendering function only applies to tiled views.": {
        "sway/desktop/output.c": 1
    },
    "Fix crashesI'm not 100% sure about last commit but I can't seem to reproduce any problem with that, and removing the other container's parent looks wrong to me.\r\nRest should be ok.\r\n\r\nI get one more crash with container_move doing random moves (`[sway/desktop/xwayland.c:154] configure:view must be within tree to set position`) that I don't have time to look at, should I open an issue? (you asked not to open issues for this branch, but this part already has been reworked?)": {
        "sway/input/seat.c": 1,
        "sway/tree/container.c": 1
    },
    "Fix cursor motion issuesUse only one canonical cursor x/y position and send cursor enter when\r\nmouse is warped.\r\n\r\nTangentally related to #1714": {
        "include/sway/input/cursor.h": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1
    },
    "Fix damage on swaybar when view requests to exit fullscreenFixes #2191": {
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1
    },
    "Fix deferred command handlingFixes #2298 \r\n\r\nDeferred commands were being run before the backend was started. This meant that there were no globals available yet. Since all deferred commands require globals (either directly or indirectly), this was causing deferred commands to fail.\r\n\r\nThis PR splits the `server_run` function in two: `server_start_backend` and `server_run`. The first starts the backend, which allows for the globals to be processed. The second does the call to `wl_display_run`. The deferred commands are being run between the two calls.\r\n\r\nI also fixed a minor issue that was adding the raw line to the command queue instead of the expanded one. Off the top of my head, I'm not sure of anything used in a block that would be deferred, but that does not mean that one does not exist or will not exist in the future.": {
        "include/sway/server.h": 1,
        "sway/config.c": 1,
        "sway/main.c": 1,
        "sway/server.c": 1
    },
    "Fix display of the \"verifying\" message in swaylock.": {
        "swaylock/password.c": 1
    },
    "Fix double free in criteriaThis restores the criteria implementation (after SirCmpwn's revert) and fixes the issue described in #1966. The fix is in a separate commit from the reverts for easy reviewing.\r\n\r\nThe config used in that issue uses string values for `id` which triggers errors. The caller frees the error, and when the criteria is parsed a second time it attempted to free the error again, causing the crash.": {
        "include/sway/criteria.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands.c": 1,
        "sway/commands/assign.c": 1,
        "sway/commands/for_window.c": 1,
        "sway/criteria.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/tree/view.c": 1
    },
    "Fix dynamic output disablingAdds missing `wlr_output_destroy`, which emits output destroy signal. The change makes swaybg correctly shut down on output destroy, while swaybar now doesn't cause a segfault by arranging windows on nonexistent container.\r\n\r\nFixes #1877": {
        "sway/config/output.c": 1
    },
    "Fix floating views not receiving frame eventsThat happened when they were in tabbed or stacked containers.\r\n\r\nFixes #2161": {
        "sway/tree/view.c": 1
    },
    "Fix focus bug when moving between outputsWhen moving focus left or right to an adjacent output, only select the first or last child in the new workspace if the workspace's layout is horizontalish. If it's a verticalish layout, use the last focused container.\r\n\r\nTo test:\r\n\r\n* Have two outputs.\r\n* On the left output, create two or more views in a vertical layout. Ensure the views are direct children of the workspace (eg. by creating two views then moving one of them down).\r\n* Focus the topmost view.\r\n* `focus right` to move focus to the right output (it doesn't matter if the right output is empty or has views).\r\n* `focus left` to move back to the left output.\r\n* Prior to the fix, sway would focus the bottom child in the left output. Because the layout is perpendicular to the movement direction, It should focus the last active child instead.": {
        "sway/tree/layout.c": 1
    },
    "Fix focus related damageWhen you have an unfocused container (so one view is focused_inactive), and you focus any other view in that container, the view with focused_inactive was not damaged. This is because we damaged the\r\nprevious focus and new focus, but needed to damage the parent of the new focus.\r\n\r\nFor example, create layout `H[view 1, V[view 2, view 3]]` and set focus to view 2. `focus left` to focus view 1, so view 2 becomes focused_inactive. Then use the mouse to focus view 3. Do this a couple of times and you'll see damage issues.": {
        "sway/input/seat.c": 1
    },
    "Fix focus_follows_mouse over swaybarIf you moved your mouse over swaybar (e.g. to scroll between\r\nworkspaces), focus would move to the workspace. This is not the right\r\nthing to do. The solution is complicated by the fact that if you move\r\nyour mouse into a new output with an empty workspace, that workspace\r\n_should_ receive focus.": {
        "sway/input/cursor.c": 1
    },
    "Fix focusing after splitting tabs/stacksFixes #2113 \r\n\r\nThis fixes focusing issues after splitting a child of a tabbed or stacked container.": {
        "sway/tree/layout.c": 1
    },
    "Fix gcc warningsSimilar to wlroots as well, some string truncations\r\n * the -1s are harmless since we manually force the final \\0 all the time;\r\n * the strncpy->strcpy is because we based the strncpy on the source length and gcc complained that we never wrote the final \\0 then when adding 1 that `strncpy(dst, src, strlen(str)+1)` is useless..........\r\n\r\nand another maybe-uninitialized variable": {
        "common/ipc-client.c": 1,
        "sway/commands.c": 1,
        "sway/commands/exec_always.c": 1,
        "sway/ipc-server.c": 1,
        "sway/tree/layout.c": 1
    },
    "Fix hide_edge_borders constraintsIf the user had a swaybar docked at the bottom, the view's bottom border would always be shown. The check needs to be based on the workspace height rather than the output height.\r\n\r\nTo test:\r\n\r\n* Have `hide_edge_borders both` in config, a swaybar with `position bottom`, then start sway and open a view\r\n* Repeat the above but with the swaybar set to `position top` to ensure I didn't break anything there": {
        "sway/tree/view.c": 1
    },
    "Fix hide_edge_borders smart for tabs and stacksThis fixes `hide_edge_borders smart` to handle tabbed and stacked containers.": {
        "sway/tree/view.c": 1
    },
    "Fix init_tray function declarationThis fixes compilation failure:\r\nerror: call to function 'init_tray' without a real prototype": {},
    "Fix initial workspace orientation on a rotated outputWhen launching on DRM with an output rotated 90 or 270 (ie. portrait), the first workspace on that output would incorrectly have an `L_HORIZ` layout. This is because the workspace was being created before the output's dimensions were assigned, and the workspace's layout is chosen when it is created.\r\n\r\nThe PR assigns the output's dimensions before creating the workspace.": {
        "sway/tree/output.c": 1
    },
    "Fix inverted assertion": {
        "sway/desktop/output.c": 1
    },
    "Fix issues with json-c v0.13 (Fixes #1355)This superseeds #1439 and fixes #1355.": {
        "/dev/null": 1,
        "CMakeLists.txt": 1,
        "README.de.md": 1,
        "README.el.md": 1,
        "README.fr.md": 1,
        "README.it.md": 1,
        "README.ja.md": 1,
        "README.md": 1,
        "README.pt.md": 1,
        "README.ru.md": 1,
        "README.uk.md": 1,
        "include/swaygrab/json.h": 1,
        "sway/ipc-server.c": 1,
        "swaybar/status_line.c": 1,
        "swaygrab/json.c": 1,
        "swaylock/main.c": 1,
        "swaymsg/main.c": 1
    },
    "Fix json-c version dependency": {
        "README.de.md": 1,
        "README.el.md": 1,
        "README.fr.md": 1,
        "README.it.md": 1,
        "README.ja.md": 1,
        "README.md": 1,
        "README.pt.md": 1,
        "README.ru.md": 1,
        "README.uk.md": 1
    },
    "Fix json_object ref_count underflow in ipc_event_binding:1175.json_object *str is added to the symbols array in line 1174.\r\njson-c documentation states that the ref count is not incremented\r\nby json_object_array_add so the ownership to str is lost.\r\nUnfortunately str gets re-added to sb_obj in line 1184 and\r\nleads to segfault when json_object_put is called in ipc_event_binding.\r\nEither find a way to increment ref count or dup string as implemented\r\nin this bugfix.": {
        "sway/ipc-server.c": 1
    },
    "Fix layer surface segfault on output destroyBefore freeing sway_output, NULL the wlr_output reference to it. Check for that\r\nNULL in layer_shell handle_destroy. Don't damage null container in unmap.\r\nAdditionaly, terminate swaybg if its output is being disabled.\r\n\r\nFixes #1877 segfaults, but reenabling output still doesn't work.": {
        "sway/config/output.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/tree/container.c": 1
    },
    "Fix memory errors - `read_line`: OOB write when a line in `/proc/modules` contains a\r\n   terminating character at `size` position.\r\n - `handle_view_created`: Ensure that the `list_t` returned by `criteria_for`\r\n   is `free`'d after use\r\n - `ipc_event_binding_keyboard`/`ipc_event_binding`: Properly handle\r\n   `json_object` reference counting and ownership.": {
        "common/readline.c": 1,
        "sway/handlers.c": 1,
        "sway/ipc-server.c": 1
    },
    "Fix memory errors - `swaylock` does not free the password buffer on ENTER\r\n - `read_line`: OOB write when a line in /proc/modules contains a\r\n   terminating character at `size` position.\r\n\r\nSome errors noted on a sanitized build.": {
        "common/readline.c": 1,
        "swaylock/main.c": 1
    },
    "Fix memory leak on swaybarCode from @NilsBrause\r\n\r\nRef #1820": {
        "swaybar/i3bar.c": 1
    },
    "Fix memory leaks and reference to uninitialized Found using Cppcheck and AddressSanitizer. (FYI, Cppcheck also indicates\r\n\r\n     [sway/common/stringop.c:150]: (error) Common realloc mistake: 'argv' nulled but not freed upon failure\r\n\r\nbut the file is full of unchecked allocations anyway.)": {},
    "Fix more leaks - `get_parent_pid`: free buffer returned from `read_line` after use.\r\n - `workspace_for_pid`: ensure `free_pid_workspace` is called when\r\n   `pid_workspace`s are removed from `config->pid_workspaces`.\r\n - `cmd_split`: return the `cmd_results` from `_do_split`, so that the\r\n   parent function may free it.": {
        "common/util.c": 1,
        "sway/commands/split.c": 1,
        "sway/workspace.c": 1
    },
    "Fix move perpendicular segfaultFixes the `SEGV on unknown address 0x000000000060` issue @martinetd found when testing #2081.\r\n\r\n```\r\n==2950==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000060 (pc 0x000000457a0d bp 0x7ffe81407ae0 sp 0x7ffe8\r\n1407ac0 T0)\r\n==2950==The signal is caused by a READ memory access.\r\n==2950==Hint: address points to the zero page.\r\n    #0 0x457a0c in container_remove_child ../sway/tree/layout.c:145\r\n    #1 0x45b06d in container_move ../sway/tree/layout.c:522\r\n    #2 0x44350b in cmd_move ../sway/commands/move.c:178\r\n    #3 0x40e414 in execute_command ../sway/commands.c:369\r\n    #4 0x435f7d in keyboard_execute_command ../sway/input/keyboard.c:100\r\n    #5 0x43636e in keyboard_execute_bindsym ../sway/input/keyboard.c:168\r\n    #6 0x437590 in handle_keyboard_key ../sway/input/keyboard.c:380\r\n    #7 0x7f48a54d8948 in wlr_signal_emit_safe ../util/signal.c:29\r\n    #8 0x7f48a54ba08f in wlr_keyboard_notify_key ../types/wlr_keyboard.c:125\r\n    #9 0x7f48a547b64a in handle_keyboard_key ../backend/libinput/keyboard.c:73\r\n    #10 0x7f48a547a0ca in handle_libinput_readable ../backend/libinput/backend.c:35\r\n    #11 0x7f48a5746f01 in wl_event_loop_dispatch src/event-loop.c:641\r\n    #12 0x7f48a5745601 in wl_display_run src/wayland-server.c:1260\r\n    #13 0x409da6 in main ../sway/main.c:428\r\n    #14 0x7f48a4c2818a in __libc_start_main (/lib64/libc.so.6+0x2318a)\r\n    #15 0x40b049 in _start (/opt/wayland/bin/sway+0x40b049)\r\n\r\nAddressSanitizer can not provide additional info.\r\nSUMMARY: AddressSanitizer: SEGV ../sway/tree/layout.c:145 in container_remove_child\r\n==2950==ABORTING\r\n```\r\n\r\nThe issue occurs in the `Reparenting container (perpendicular)` section. The `container` was being removed from it's parent (and parent set to `NULL`), then the `sibling` pointer was being changed and due to the `continue` starting back at the top. The second time around, it would segfault when attempting to remove `container` from it's parent, which is now `NULL`.\r\n\r\nI was able to reproduce with the starting representation of `H[view#1 V[view#2 V[view#3 view#4]]]`. With `view#3` focused, move left twice, and then move right twice. On the second move right, it would segfault.": {
        "sway/tree/layout.c": 1
    },
    "Fix movement crashes/issuesFixes #2105 \r\n\r\nFor the first and second issue in #2105, the issue was the `focus_inactive` loop. In both cases, `focus_inactive == sibling` so \r\n```\r\nwhile (focus_inactive->parent == sibling) {\r\n    focus_inactive = focus_inactive->parent;\r\n}\r\n```\r\nwas going until it was trying to access the `parent` of `NULL`.\r\n\r\nFor the third issue, if the movement direction was perpendicular to the workspace layout and the layout was `L_HORIZ` or `L_VERT`, it was never escalated to the output level.\r\n\r\nI also fixed a fourth issue that I noticed when making sure nothing broke. If you created the representation `H[view#1 V[view#2 view#3]]` and focused `view#2` and executed move up, the representation would be `V[view#1 view#2 V[view#3]]`. This is fixed by rejiggering the workspace with two containers instead of having the special optimized case that seemingly only works with two views.": {
        "sway/tree/layout.c": 1
    },
    "Fix moving out of tab/stack when only childFixes #2078 \r\n\r\nThis handles moving out of a tab/stack when the container is the only child.": {
        "sway/tree/layout.c": 1
    },
    "Fix name generation from workspace number commands# Summary\r\nA workspace name is generated by looking at the bindings and finding the first workspace command with an unused workspace name. When a command of the form `workspace number <name>` is found, the generated name is `number <name>`.\r\n\r\nThis PR isolates the `<name>` portion. Additionally, there is a check added to make sure that a workspace with that number does not already exist.\r\n\r\n# Test Plan\r\n1. Either use the minimal config below or add bindings for the following before any others in the sway config\r\n   - `workspace number 1:First`\r\n   - `workspace number 1:ThisShouldBeSkipped`\r\n   - `workspace number 2:Second`\r\n2. Run sway with two outputs using the command `env WLR_X11_OUTPUTS=2 sway -d -c <path-to-config>`\r\n3. Look at swaybar and/or `swaymsg -t get_workspaces` and verify that the workspace names in use are `1:First` and `2:Second`.\r\n\r\n# Minimal Config\r\n<details>\r\n<summary>Show minimal config</summary>\r\n<pre>\r\nset $mod Mod1\r\nset $term urxvt\r\nbindsym $mod+Return exec $term\r\nbindsym $mod+Shift+e exit\r\nbindsym $mod+1 workspace number 1:First\r\nbindsym $mod+2 workspace number 1:ThisShouldBeSkipped\r\nbindsym $mod+3 workspace number 2:Second\r\nbar {\r\n}\r\n</pre>\r\n</details>": {
        "sway/tree/workspace.c": 1
    },
    "Fix nested tabsFixes #2023.\r\n\r\nTo test:\r\n\r\n* Create a tabbed container with some views.\r\n* Focus one of the views and run `splith` or`splitv`.\r\n* Run `layout tabbed` (the tree should now be something like `T[view, view, T[view]]`)\r\n* The title bar of the nested view should sit below the outer tab bar, rather than on top of it.\r\n\r\nI also combined two functions which were identical.": {
        "sway/tree/arrange.c": 1
    },
    "Fix null deref in server_initIf the backend fails to be created, log an error and immidiately return\r\nfrom server_init.": {
        "sway/server.c": 1
    },
    "Fix out of focus when using mouse to change workspaceWhen you try to change the workspace with the mouse, upon mouse release event it will try focus on the OUTPUT 'WLC-1' handler for some reason, we just prevent it. Additionally it seems wlc_view_focus should be called with C_VIEW only.\r\n\r\n[debug_log.c:98] Setting focus to 0x5649148455a0:1 (OUTPUT 'WLC-1')\r\n[main.c:50] [wlc] compositor/view.c: 574 @ wlc_view_focus(): Tried to retrieve handle of wrong type (output != view)\r\n\r\n[log.txt](https://github.com/swaywm/sway/files/1619627/log.txt)\r\n": {
        "sway/focus.c": 1
    },
    "Fix output containers position": {
        "sway/tree/layout.c": 1
    },
    "Fix output_has_opaque_lockscreenThe `pixman_region32_contains_rectangle` call was using `wlr_surface->current.opaque` instead of `surface_opaque_box` (which was then unused).\r\n\r\nThe new `wlr_surface->opaque_region` is now used, fixing clients that set an infinite region and clients using a buffer without an alpha channel.": {
        "sway/desktop/output.c": 1
    },
    "Fix pango markupThe condition checking if the markup is valid was inverted.\r\n\r\nThis commit also adds better error handling: if the markup cannot\r\nbe parsed, it fallbacks to plain text.": {
        "common/pango.c": 1
    },
    "Fix pixel bar below titleThis commit changes how the left and right indents are calculated for the\r\ntitle bottom pixel bar, so that it is displayed properly in case the left or\r\nright border is hidden.": {
        "sway/desktop/output.c": 1
    },
    "Fix pointer events for hidden workspacesTo test, add this at the end of `cursor_send_pointer_motion`:\r\n\r\n```c\r\n\tstatic struct sway_container *old = NULL;\r\n\tif (old != swayc) {\r\n\t\twlr_log(L_DEBUG, \"focus change: %p\", swayc);\r\n\t}\r\n\told = swayc;\r\n```\r\n\r\nTest plan: open a window on a workspace, switch to an empty workspace. Pointer events shouldn't be sent to the window on the hidden workspace.": {
        "sway/input/cursor.c": 1,
        "sway/ipc-server.c": 1
    },
    "Fix pointer input for xdg-popupsUpdate for https://github.com/swaywm/wlroots/pull/860": {
        "sway/tree/container.c": 1
    },
    "Fix popupsThis adds proper support for popups overhanging the bounds of their swayc.\r\n\r\nAn example of the problem this solves:\r\n\r\n* Place a gedit and a terminal side by side with gedit on the left.\r\n* Right click near the right edge of gedit, so the popup overlaps the terminal.\r\n* Before this PR, the terminal would be rendered on top of the popup and you wouldn't be able to hover or click the popup's overhanging part.\r\n\r\nThe same problem is evident with floating views showing a popup outside the bounds of the floating swayc.\r\n\r\nFor locating a surface at a given coordinate, the new logic is to iterate all the floating popups first, then floating toplevels and decorations, then tiled popups, then tiled toplevels and decorations.\r\n\r\nFor rendering popups, it renders all toplevels and decorations first, then popups afterwards.\r\n\r\nSome discussion points:\r\n* If you have a tabbed container, open a popup that overhangs the tabbed container, then switch to a different tab, I've made the popup disappear until you tab back. I assume this is desired?\r\n* We might find performance gains if we store a list of mapped popups somewhere global such as `sway_server`, rather than iterating through the tree multiple times when using `container_at` and when rendering.\r\n* When a popup is unmapped, only the swayc's bounds are damaged. I'd like to make this a separate PR because it's not a result of my doing, and I'd rather work on atomic for now.": {
        "include/sway/tree/container.h": 1,
        "sway/desktop/output.c": 1,
        "sway/input/cursor.c": 1,
        "sway/tree/container.c": 1
    },
    "Fix potential crash when destroying workspace`_container_destroy` emits a `destroy` event, and any listener for this event should have access to the full container, not a half destroyed one.\r\n\r\n`_container_destroy` also destroys the swayc, so we have to grab a reference to the sway_workspace so we can free it afterwards.\r\n\r\nThis also fixes a memory leak where the floating container wasn't freed.\r\n\r\nFixes #2092.": {
        "sway/tree/container.c": 1
    },
    "Fix rendering with multiple outputs": {
        "sway/desktop/output.c": 1,
        "sway/tree/layout.c": 1
    },
    "Fix seat_get_active_child`seat_get_active_child` is used for tabbed and stacked containers to get the active child. The previous implementation used `seat_get_focus_inactive` then ascended the tree to the child of the tabbed/stacked container, but this fails when the workspace itself is stacked or tabbed and the most recently active child is floating.\r\n\r\nThe new implementation takes a more simple approach, where it directly scans the focus stack for the first immediate child which isn't the floating container.\r\n\r\nFixes #2098.": {
        "sway/input/seat.c": 1
    },
    "Fix segfault if swaybg is run without WaylandMirrors a similar check in `swaylock/main.c`": {},
    "Fix segfault in view_unmap()If the last remaining view on a workspace is unmapped and the workspace is not visible, parent will be a C_OUTPUT. Call the arrange_output() function in this case.\r\n\r\nTo test:\r\n\r\n* Launch a terminal\r\n* Within that terminal, run something like `urxvt -e sleep 5`\r\n* Move the new terminal window to a new workspace\r\n* Ensure the workspace is not visible at the time the sleep command finishes": {
        "sway/tree/view.c": 1
    },
    "Fix segfault when running the resize command without arguments": {
        "sway/commands/resize.c": 1
    },
    "Fix some memory leaksHopefully I've got my thinking correct.": {
        "sway/commands/bar/position.c": 1,
        "sway/config.c": 1,
        "sway/config/output.c": 1
    },
    "Fix some typographic characters in German READMEThis PR fixes some minor typographic character issues in the German README file.\r\n\r\nSome argumentation for these changes:\r\n* \"sway\"-Paket \u2192 \u201esway\u201c-Paket\r\n  https://de.wikipedia.org/wiki/Anf%C3%BChrungszeichen#Deutschland_und_%C3%96sterreich\r\n* e-Mail \u2192 E\u2011Mail\r\n  https://de.wikipedia.org/wiki/Gesch%C3%BCtzter_Bindestrich": {},
    "Fix sway_keyboard keysyms stateThis fixes a bug on the following keyboard input:\r\n1. press shift\r\n2. press another key (such as ;)\r\n3. release shift\r\n4. release other key\r\n\r\nIf the modifer key is not released last (as in the example above), then `keyboard->pressed_keysyms_translated` never has the translated keysym removed from it as it never sees an associated `WLR_KEY_RELEASED`. Instead it sees a `WLR_KEY_RELEASED` for the untranslated keysym.\r\n\r\n~~My fix is simple: if the modifier key is released, clear `keyboard->pressed_keysyms_translated` because there's no easy way to translate any keysyms to their unmodified counterparts. I've done some light testing and it doesn't seem to break anything obvious but please let me know if there's a better approach.~~\r\n\r\nApproach has changed - see below.\r\n\r\nCloses #2020.": {
        "sway/input/keyboard.c": 1
    },
    "Fix swaybar HiDPI rounding issueFixes #1729": {
        "swaybar/render.c": 1
    },
    "Fix swaybar axis event logicFixes #1807 \r\n\r\nUses 'visible' instead of 'focused', since we may scroll on a bar which\r\nisn't the focused output.\r\n\r\nWe can't use \"next_on_output\" or \"prev_on_output\" to implement this,\r\nbecause it only modify the focused output. So scrolling on an unfocused\r\noutput will affect the incorrect one.\r\n\r\nWe just use the \"workspace name\" command instead.\r\n\r\nTest (requires multiple outputs):\r\n- Set `focus_follows_mouse no` in sway config\r\n- Focus a window on output A\r\n- Scroll on the swaybar on output B\r\n\r\nNotice no crash and the workspace change is on output B.\r\n": {
        "swaybar/bar.c": 1
    },
    "Fix swaybar not showing all status blocksFixes #1790.\r\n\r\nWhen rendering a non-edge block, swaybar's render_status_block() was miscalculating the height needed for the separator and was returning early, expecting itself to be called again later with a new surface height.\r\n\r\nI've redone the logic here, as well as renamed _height to sep_height.\r\n\r\nIn addition to this, the separator symbol was not positioned correctly vertically.\r\n\r\nFor anyone checking my logic, my understanding is:\r\n\r\n* `height` is the bar height with scaling applied\r\n* `sep_height` and `_ideal_height` are both without scaling\r\n* The function expects the return value to be without scaling\r\n\r\nI've tested with output scales of 0.5, 1 and 2, and the pipe character as the separator symbol.": {
        "swaybar/render.c": 1
    },
    "Fix swaybar output configSwaybar would crash on launch if it wasn't configured to run on all outputs. This PR fixes that and makes swaybar respect its output config.\r\n\r\nWhat was previously happening was all outputs from the wl_registry were being added to `bar->outputs` regardless of whether the bar actually used them, and ipc_get_workspaces() would iterate these and run strcmp() on `output->name`. For the unused outputs, `output->name` was null which caused swaybar to segfault.\r\n\r\nMy PR makes it ignore the outputs given by the wl_registry if the bar doesn't use them, noting that we have to keep track of the output index to make sure the `bar->config->outputs` maps correctly. That's the handle_global() part.\r\n\r\nThe second part of the PR cleans up the logic in bar_setup(). Because `bar->outputs` now contains only used outputs, we can remove the double nested loop. However, we do need to assign the name to the output so we know what workspaces belong to it, and that requires a short loop through `bar->config->outputs`.\r\n\r\nI've tested all the following:\r\n\r\n* One bar with no outputs configured - bar appears on all outputs\r\n* One bar with `output *` - bar appears on all outputs\r\n* One bar with `output VGA-1` - bar appears on that output only\r\n* One bar with `output VGA-1` and `output VGA-2` - bar appears on both outputs\r\n* Two bars on different outputs - bars appear on their given outputs": {
        "swaybar/bar.c": 1
    },
    "Fix swaybar teardown when workspace buttons hiddenFixes #2213\r\n\r\nWhen workspace buttons are hidden, `wl_display_dispatch` was returning `-1` with `errno = 71`. Running `swaybar` with `WAYLAND_DEBUG=1` gave `wl_shm@4: error 1: invalid size (0)`. `max_height`was `0` on the first frame render due to the status line not being read yet.\r\n\r\n~This PR prevents `max_height` from being `0`.~ This PR prevents rendering the bar if the `height` is not greater than `0`": {
        "swaybar/render.c": 1
    },
    "Fix swaylock argumentsI messed up the handling of arguments in `swaylock` with 7b91712416953c25f2722fedb57b474504460a48. The issue is that I only gave `C:` to `getopt_long` when getting searching for the config path. This caused the `getopt_long` to output that every other flag was invalid. Since the swaylock itself was never aborting, the arguments should still be working (aside from `-i, --image` -- see below).\r\n\r\nI decided to alter `parse_options` to only handling options when a valid pointer is given. This makes it so the option string does not have to be updated in two places. However, it does make function longer. I think in the long run, this is still the better option.\r\n\r\nAs for `-i, --image`, only the first image for an output was used. This means if you have `image` in the config and `-i, --image` as an argument, the one in the config would be used instead of overridden. I decided to make it so the last image given is used and replaces the previous definition. This only effects the default image or images defined for the same output. Specifying on in the config and one as an argument should work fine.": {
        "swaylock/main.c": 1
    },
    "Fix swaylock crashing when plugging/unplugging output": {
        "include/swaylock/swaylock.h": 1,
        "swaylock/main.c": 1,
        "swaylock/render.c": 1
    },
    "Fix tab split focus bugFixes a bug where if you have a tab containing a split, then switch from a non-split tab to the split tab, focus is not changed properly.\r\n\r\nTo test, create layout `T[view, V[view, view focused]]` then `focus left` then `focus right`.": {
        "sway/input/seat.c": 1
    },
    "Fix title bar rendering for nested stacked containersTo reproduce, open a few views and change layouts to get a stack layout inside a tabbed layout or another stacked layout, e.g.: `T[termite S[termite termite]]`.\r\n\r\nThe code to render title bar for stacked layouts currently relies on the stacked container `swayc_y` field. However, in the example above `T[termite S[termite termite]]`, and both `termite` and `S[termite termite]` will have `swayc_y` set to the same value (the top bar height in my case). This makes the stacked container title bar be rendered over the tabbed container title bar with a gap below.\r\n\r\nThe issue does not affect tabbed containers, because they use `swayc_y` of their children. The same approach fixes the behavior for stacked ones, since both `termite` in `S[termite termite]` have `swayc_y` set to a value which takes into account the title bar of the parent container (the top bar height + the tabbed container title bar height in my case).\r\n\r\nThis commit changes the code to consistently use `swayc_x` and `swayc_y` of the children to render their title bars in stacked and tabbed containers.": {
        "sway/desktop/render.c": 1
    },
    "Fix title texture widthUse minimum of the container width or text width.\r\n\r\nAlso creates a `scale` variable in this function for convenience.\r\n\r\nTested with scaling.": {
        "sway/tree/container.c": 1
    },
    "Fix titles on rotated outputsIf the output is rotated, the scissor box needs to be transformed in the opposite rotation.\r\n\r\nTo test, launch with an output with a 90 degree rotation and open a view on that output. Before the fix, the title isn't shown.": {
        "sway/desktop/output.c": 1
    },
    "Fix titles when container titles contain UTF-8 charactersThe title and marks textures would have their height set from the config's computed max font height, but the textures were not regenerated when the config's max font height changed which made a gap appear. Rather than making it regenerate the title textures every time the config font height was changed, I've changed it to just make the textures the height of the title itself and fill any gap when rendering.\r\n\r\nAlso, the `title_width` and `marks_width` variables have been renamed to make it more obvious that they are in output-buffer-local coordinates.\r\n\r\nTo test, visit [this YouTube video](https://www.youtube.com/watch?v=kfgFcMz-VnM) or [search for \"grilled pork ginger\" in Japanese](https://duckduckgo.com/?q=%E8%B1%9A%E3%81%AE%E7%94%9F%E5%A7%9C%E7%84%BC%E3%81%8D+&t=ffab&ia=web).\r\n\r\nFixes #1936.": {
        "sway/desktop/output.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Fix top border when a view is initially floatingFixes #2085.\r\n\r\nThose properties control whether the individual borders are rendered, and only take effect if the view's border is not `B_NONE`. Therefore it's safe to set them all to true. It initialises the values if the view is initially floating, and undoes any `hide_edge_borders` effects if the view was previously tiled.": {
        "sway/tree/view.c": 1
    },
    "Fix two segfaults when destroying outputsTest plan: open two outputs on the X11 backend, close them.": {
        "sway/desktop/layer_shell.c": 1,
        "sway/tree/layout.c": 1
    },
    "Fix use after free in transaction codeIf we set an instruction as ready twice, it decreases the transaction's num_waiting a second time and applies the transaction earlier than it should. This no doubt has undesired effects, probably resulting in a use after free.\r\n\r\nHopefully fixes the first part of #2207.": {
        "sway/desktop/transaction.c": 1
    },
    "Fix various xwayland issues* Fix configure not sent when width/height are zero\r\n* Fix unmanaged views rendering on every output\r\n* Fix configure send in output-local coords in set_size\r\n\r\nFixes #1673": {
        "sway/desktop/output.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1
    },
    "Fix view title update orderThe first view renders its title text incorrectly in case any font is set in the config file.\r\n\r\nThe `font` command calls `config_update_font_height(true)`, which resets `config->font_height` to 0 before iterating through child containers, but `config->font_height` is not updated anymore, because at this point there is only the root container with empty `formatted_title`.\r\n\r\nWhen a new view is created after that, it relies on `config->font_height` to render its title, however it gets updated after the title is already rendered.\r\n\r\nThis commit changes the order, so that a newly created view uses the relevant font height.": {
        "sway/tree/view.c": 1
    },
    "Fix wl_output enter/leave eventsFixes #1739": {
        "include/sway/tree/view.h": 1,
        "sway/tree/view.c": 1
    },
    "Fix workspace deletion edge casesFixes:\r\n\r\n- Move from empty workspace to an adjacent output without destroying that workspace\r\n- Destroy empty (off-screen) workspace when last view is removed from it\r\n- Move some container functions into type-specific files": {
        "/dev/null": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Fix wrong output container coordinates": {
        "sway/config/output.c": 1,
        "sway/tree/container.c": 1
    },
    "Fix xwayland floating views unclickable, alternative version#2196 tried to fix this bug but ran into issues (that will need to be tackled at some point). This one also fixes the bug, and additionally fixes input for popups in floating views.\r\n\r\nFixes #2195": {
        "sway/tree/container.c": 1
    },
    "Fix xwayland floating views unclickableSome xwayland views are first configured with a 1x1 size, and then\r\nresized. Since the view size isn't updated, they are unclickable.\r\n\r\nFixes #2195": {
        "sway/desktop/xwayland.c": 1,
        "sway/tree/view.c": 1
    },
    "Fixed #1888 GCC cannot compile due to uninitialized variablesThis is a fix for: #1888 \r\nSway wouldn't compile on Archlinux due to uninitialized variables.\r\n\r\nFor the record, these build flags are passed automatically to GCC on Archlinux in makepkg:\r\n```\r\nCFLAGS=\"-march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong -fno-plt\"\r\nLDFLAGS=\"-Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now\"\r\nCPPFLAGS=\"-D_FORTIFY_SOURCE=2\"\r\n```\r\n\r\nNote that I don't have a lot of experience in C so please let me know if this is not the way it should be fixed.": {
        "sway/tree/view.c": 1
    },
    "Fixed missing icons bug in index.theme parsing (2)(re-submitting with rebase to 0.15 -- not sure if I did that correctly... if not I am happy to re-apply the patch cleanly against 0.15)\r\n\r\nThis PR fixes the missing scalable icons issue I reported (#1624). The issue is that the directories were parsed from `index.theme` using `getline()` without chopping the newline at the end -- so the last sub-directory on the list could not be opened (`scalable/status` in the Paper icon theme).\r\n\r\nAdditionally I noticed that the `find_inherits()` function was concatenating the 'index.theme' string onto the directory without a forward-slash so I fixed that too.": {
        "README.md": 1,
        "README.ru.md": 1,
        "swaybar/tray/icon.c": 1
    },
    "Fixed missing icons bug in index.theme parsing...This PR fixes the missing scalable icons issue I reported (#1624). The issue is that the directories were parsed from `index.theme` using `getline()` without chopping the newline at the end -- so the last sub-directory on the list could not be opened (`scalable/status` in the Paper icon theme).\r\n\r\nAdditionally I noticed that the `find_inherits()` function was concatenating the 'index.theme' string onto the directory without a forward-slash so I fixed that too.": {
        "swaybar/tray/icon.c": 1
    },
    "Focus containers only on entry.Change the behaviour of `focus_follows_mouse` to only focus the container on entry rather than on _any_ movement.\r\nThis matches the [behaviour of i3](https://i3wm.org/docs/userguide.html#_focus_follows_mouse).\r\n\r\nCloses #1946.": {
        "include/sway/input/cursor.h": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1
    },
    "Focus fixesThis PR fixes three focus related issues.\r\n\r\n1. Restore focus when unmapping unmanaged xwayland surfaces. To test:\r\n\r\n    * Open a terminal and run i3-input.\r\n    * Cancel the prompt by pressing escape.\r\n    * Focus should be returned to the terminal.\r\n\r\n2. Restore focus when unmapping layer shell surfaces. To test:\r\n\r\n    * Open a view.\r\n    * Lock the screen with swaylock.\r\n    * Unlock the screen.\r\n    * Focus should be returned to the view.\r\n\r\n3. Don't set focus to NULL when clicking a surface which has no container. To test:\r\n\r\n    * Launch chromium and configure it so the bookmarks bar is visible and it contains a bookmark.\r\n    * Right click on a bookmark.\r\n    * swaybar should show that the workspace has focus.\r\n\r\nThere is one thing I'm not sure about, and that's the `wlr_xwayland_surface_is_unmanaged` check in `unmanaged_handle_unmap`. I copied it from `unmanaged_handle_map` but it seems backwards to me. Not only does the check seem to be incorrectly negated, but wouldn't the surface always be unmanaged at that point anyway?": {
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1
    },
    "Focus inactive fixesImplement the ipc focus stack and focus-inactive bug hunting.\r\n\r\n[tests](https://github.com/swaywm/sway-tests/blob/master/test/test_focus_inactive.py) (passing)\r\n\r\nfixes #1670.": {
        "include/sway/input/seat.h": 1,
        "sway/commands/split.c": 1,
        "sway/criteria.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/tree/layout.c": 1
    },
    "Force fullscreen views to be fully opaqueThis forces fullscreen views to be fully opaque.\r\n\r\nTest:\r\n- Open a view\r\n- Set opacity (Ex: `swaymsg opacity 0.5`)\r\n- Fullscreen the view (`swaymsg fullscreen`)\r\n- Observe a fully opaque view\r\n- Unfullscreen the view (`swaymsg fullscreen`)\r\n- Opacity should return to 0.5 (or whatever it was set to above)": {
        "sway/desktop/output.c": 1
    },
    "Give keyboard focus to unmanaged xwayland surfacesThis fixes dmenu\r\n\r\nFixes #1671": {
        "include/sway/input/seat.h": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/seat.c": 1
    },
    "Give keyboard input to layer surfaces that ask for itTest plan: same as this guy https://github.com/swaywm/wlroots/pull/804": {
        "include/sway/input/seat.h": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1
    },
    "Handle forward/back mouse buttons in swaybari3bar sends forward/back mouse buttons to the status command, so swaybar should too.": {
        "swaybar/bar.c": 1
    },
    "Handle output removal on swaybarTest plan:\r\n\r\n* swaybar\r\n* output removal\r\n* handle": {
        "client/pool-buffer.c": 1,
        "include/pool-buffer.h": 1,
        "include/swaybar/bar.h": 1,
        "sway/tree/container.c": 1,
        "swaybar/bar.c": 1,
        "swaybar/ipc.c": 1,
        "swaybar/render.c": 1
    },
    "Handle set_cursor requests from clientsAllow clients to set a custom cursor if they have the seat's\r\npointer focus.": {
        "include/sway/input/cursor.h": 1,
        "sway/input/cursor.c": 1
    },
    "Handle swaybar status line errorsThe event loop API was redesigned to avoid race conditions as well.\r\nFixes #1583": {
        "include/swaybar/event_loop.h": 1,
        "include/swaybar/status_line.h": 1,
        "swaybar/bar.c": 1,
        "swaybar/event_loop.c": 1,
        "swaybar/status_line.c": 1
    },
    "Handle xwayland override_redirect flag changeThis fixes syncplay menus.\r\n\r\n~~\u2026 and breaks dmenu.~~": {
        "include/sway/input/seat.h": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/seat.c": 1
    },
    "Hide cursor on touch down": {
        "sway/input/cursor.c": 1
    },
    "Highlight all child borders when using focus parentThis adds a `bool parent_focused` argument to some of the `render_container` functions which gets passed down through the children and allows them to be rendered with focused colours.\r\n\r\nTo test, create a mix of horizontal and vertical layouts and run `focus parent`.": {
        "sway/desktop/output.c": 1,
        "sway/input/seat.c": 1
    },
    "I3bar jsonTest plan:\r\n\r\n```\r\nbar {\r\n    status_command i3status\r\n}\r\n```\r\n\r\nBonus: test click events by running the bar manually with `-d` and it'll log each block that's clicked.": {
        "/dev/null": 1,
        "common/pango.c": 1,
        "include/swaybar/ipc.h": 1,
        "include/swaybar/status_line.h": 1,
        "sway/tree/layout.c": 1,
        "swaybar/bar.c": 1,
        "swaybar/ipc.c": 1,
        "swaybar/meson.build": 1,
        "swaybar/render.c": 1,
        "swaybar/status_line.c": 1
    },
    "IPC Events (1.0)Fixes #1730 \r\n\r\n- [x] workspace\r\n    - [x] focus - not satisfied with the hack in the last commit, but also not happy with old behaviour\r\n    - [x] init\r\n    - [x] empty\r\n    - [x] urgent (added in #2276)\r\n    - [x] reload\r\n    - [x] rename (already implemented)\r\n    - [x] ~~restored~~\r\n    - [x] move (already implemented but I haven't tested them yet)\r\n- [x] output (no valid events for them currently)\r\n- [x] mode (already implemented)\r\n- [x] window\r\n    - [x] new (already implemented)\r\n    - [x] close\r\n    - [x] focus\r\n    - [x] title\r\n    - [x] fullscreen_mode (already implemented)\r\n    - [x] move\r\n    - [x] floating (already implemented)\r\n    - [x] urgent (added in #2276)\r\n    - [x] mark - ~I'm not satisfied with its implementation, but with the current api it's hard to work out the best places to add the events~ rewrote it to better conform to i3 behaviour\r\n- [x] barconfig_update\r\n    - [x] on config update\r\n- [x] binding\r\n    - [x] mouse binding\r\n- [x] shutdown - though there are some timing issues, since the server seems to shut down before it can emit the shutdown event\r\n    - [x] ~~restart~~\r\n- [x] tick": {
        "completions/bash/swaymsg": 1,
        "completions/zsh/_swaymsg": 1,
        "include/ipc.h": 1,
        "include/sway/config.h": 1,
        "include/sway/input/seat.h": 1,
        "include/sway/ipc-server.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands/bind.c": 1,
        "sway/commands/mark.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/reload.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/output.c": 1,
        "sway/tree/view.c": 1,
        "swaymsg/main.c": 1,
        "swaymsg/swaymsg.1.scd": 1
    },
    "Idle inhibitImplements idle inhibit, and make it toggle when the surface goes \"invisible\" (hooks on every transition so whenever layouts change or workspace change)\r\n\r\nIt should be easy to adjust when the idle protocol works per-output, just need to make view_is_visible return a list of outputs where the thing is visible and disable idle for these specifically.\r\n\r\n\r\nOne thing I'm not totally happy about is I'm taking a pointer to the server struct everywhere in the idle inhibit code... To end up using the global server object in transition -_-\r\nShould I just always use the global?\r\nAlso not happy storing the list of idle inhibitors directly in servers struct, I might want to encompass things in a sway_idle_inhibit_manager_v1 or something": {
        "/dev/null": 1,
        "include/sway/server.h": 1,
        "sway/desktop/transaction.c": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1
    },
    "Implement GapsThis pull request contains an implementation of gaps, something @emersion suggested I do. It's been a fun couple of hours hacking on my favorite window manager!\r\n\r\nIncluded are two things:\r\n\r\nAn implementation of the commands to implement gaps.\r\nAn implementation of gaps in sway/tree/arrange.c\r\nCommands\r\nThese commands were crafted to match their descriptions in $ man 5 sway. They implement both gaps and smart gaps. They support all permutations of the commands.\r\n\r\narrange.c implementation\r\nWhen arranging sway_containers, add gaps. It's pretty simple, except when gaps have been added to specific workspaces or containers.\r\n\r\nContainer-specific gaps are implemented via the has_gaps, gaps_inner, and gaps_outer fields of the sway_container struct. These fields are passed down from parent container to child container, unless the child container already has its own gaps. When commands apply values to these fields, it triggers a re-arrangement.\r\n\r\n(this is a redo of a previous pull request that failed building)": {
        "/dev/null": 1,
        "include/sway/tree/arrange.h": 1,
        "include/sway/tree/container.h": 1,
        "sway/commands.c": 1,
        "sway/meson.build": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1
    },
    "Implement GapsThis pull request contains an implementation of gaps, something @emersion suggested I do. It's been a fun couple of hours hacking on my favorite window manager!\r\n\r\nIncluded are two things:\r\n1. An implementation of the commands to implement gaps.\r\n2. An implementation of gaps in sway/tree/arrange.c\r\n\r\n### Commands\r\n\r\nThese commands were crafted to match their descriptions in `$ man 5 sway`. They implement both gaps and smart gaps. They support all permutations of the commands.\r\n\r\n### arrange.c implementation\r\n\r\nWhen arranging `sway_container`s, add gaps. It's pretty simple, except when gaps have been added to specific workspaces or containers.\r\n\r\nContainer-specific gaps are implemented via the `has_gaps`, `gaps_inner`, and `gaps_outer` fields of the `sway_container` struct. These fields are passed down from parent container to child container, unless the child container already has its own gaps. When commands apply values to these fields, it triggers a re-arrangement.": {
        "/dev/null": 1,
        "include/sway/tree/container.h": 1,
        "sway/commands.c": 1,
        "sway/meson.build": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1
    },
    "Implement IPC get_seats commandWe've had a few issues lately where `seat_get_focus` returns `NULL` (see #1952 and #1957), and I'm wondering if maybe we have multiple seats at play. So I ran `swaymsg -t get_seats` and discovered the `get_seats` command doesn't exist. It probably should exist, so here it is.": {
        "completions/zsh/_swaymsg": 1,
        "include/ipc.h": 1,
        "include/sway/config.h": 1,
        "include/sway/ipc-json.h": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1,
        "sway/sway-security.7.txt": 1,
        "swaymsg/main.c": 1,
        "swaymsg/swaymsg.1.txt": 1
    },
    "Implement IPC_GET_MARKSTest:\r\n- Mark some views\r\n- Run `swaymsg -t get_marks`\r\n- Verify all marks are listed": {
        "sway/ipc-server.c": 1
    },
    "Implement __focused__ criteriaMerge after #1943.\r\n\r\nThis adds support for the `__focused__` keyword in criteria values.\r\n\r\nTo avoid excessive use of `strcmp`, I've added a `criteria_token` enum.": {
        "include/sway/tree/view.h": 1,
        "sway/criteria.c": 1,
        "sway/tree/view.c": 1
    },
    "Implement `focus mode_toggle`~~This is the same as `floating toggle`.~~": {
        "sway/commands/focus.c": 1,
        "sway/sway.5.scd": 1
    },
    "Implement assign to outputEg. `assign [class=\"Firefox\"] output foo`": {
        "sway/tree/view.c": 1
    },
    "Implement basic touch supportThis required changing container_at_cursor to container_at_coords so\r\nthat we could get the appropriate surface (and sx/xy) without moving the\r\ncursor.\r\n\r\nFuture work:\r\n\r\n- Simulate a pointer for clients which have not bound to wl_touch\r\n  - With long-press to right click\r\n- Keep sending motion events when moving outside the surface (#1892)\r\n- Bind gestures to sway commands": {
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1
    },
    "Implement bindsym/bindcode --lockedAdds the --locked flag to bindsym and bindcode commands.\r\n\r\nWhen a keyboard's associated seat has an exclusive client\r\n(i.e, a screenlocker), then bindings are only executed if\r\nthey have the locked flag. When there is no such client,\r\nthis restriction is lifted.\r\n\r\n-------\r\n\r\nThis should resolve #592. As my development system only has one screen, I haven't \r\ntested e.g. how this will interact with seat or keyboard additions while a screenlocker\r\nis active, or with multiple screens. Example usage:\r\n\r\n    bindsym --locked XF86AudioMute exec amixer sset Master toggle\r\n    bindsym XF86AudioMicMute exec  amixer sset Capture toggle\r\n\r\n\r\n\r\n\r\n\r\n": {},
    "Implement bordersImplements rendering of borders. Title text is still to do.\r\n\r\nImplements the following configuration directives:\r\n\r\n* `client.focused`\r\n* `client.focused_inactive`\r\n* `client.unfocused`\r\n* `client.urgent` (parsed and stored but not used)\r\n* `border`\r\n* `default_border`\r\n\r\nInteresting things to note:\r\n\r\n* It was mentioned in IRC that we should use a `wlr_texture`, but I've done it textureless using `wlr_render_rect()`.\r\n* Colours are now stored as a `float[4]` rather than `uint32_t` so that they can be passed directly to `wlr_render_rect()`.\r\n* I've made `default_border` a runtime command (in addition to config-time). This means you can change the default border via IPC, but this is inconsistent with `default_layout` which is config-time only. We should make these consistent, one way or the other.\r\n* I've added x and y properties to sway_view. Now the sway_container's geometrical properties refer to the geometry including borders, and the sway_view's geometrical properties refer to the geometry excluding borders. If this sounds stupid and you have a better idea, let me know.\r\n* I've added the `view_autoconfigure()` function. This calls the existing `view_configure()` after calculating its geometry from its swayc and border configuration.\r\n* `view_update_position()` is now removed. I note this function previously handled damage, but I don't think this is an issue any more because it's called from the arrange functions which always damages the container.\r\n* If you set opacity on a view, the border will also use the opacity.": {
        "/dev/null": 1,
        "include/sway/config.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/meson.build": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Implement criteria commandsImplements the following commands:\r\n\r\n* `for_window [...] <cmdlist>`\r\n* `assign [...] <workspace>`\r\n\r\nPlease note this PR aims to implement the commands themselves and doesn't aim to implement any more criteria tokens than what's already implemented. The tokens that work are:\r\n\r\n* `app_id` only for xdg_shell_v6\r\n* `class` for wl_shell and xwayland surfaces only\r\n* `con_id` for all surfaces\r\n* `title` for all surfaces\r\n\r\nYou can also add criteria at runtime via swaymsg.\r\n\r\nTesting examples:\r\n\r\n* `for_window [title=\"^.*$\"] opacity 0.9`\r\n* `assign [class=\"^mpv$\"] media`\r\n\r\nThis is branched from PR #1851, so merge that one first.\r\n\r\nFor those reviewing, assign.c and for_window.c are almost direct copies from sway 0.15 so don't pay too much attention to those.": {
        "/dev/null": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands.c": 1,
        "sway/meson.build": 1,
        "sway/tree/view.c": 1
    },
    "Implement default_floating_border command and adjust CSD behaviouri3 docs: https://i3wm.org/docs/userguide.html#_default_border_style_for_new_windows\r\n\r\nTo test, you need to use something which floats by default and doesn't have CSD:\r\n\r\n* Have `default_floating_border pixel 10` in config\r\n* Open Firefox and press `Ctrl+O` to open the file open dialog\r\n\r\nThe existing code in `view_set_tiled` that set the border to `config->border` was causing issues. I've changed this so the border values are untouched, and it instead uses a `bool using_csd` in the view to determine whether the border values should be respected or not. This allows the previous border config to be reinstated easily when toggling between floating and tiling, and also means the user can't run an IPC command to mess with the borders while CSD is active.": {
        "/dev/null": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands.c": 1,
        "sway/desktop/render.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Implement floatingThis implements basic floating features. You can float views, unfloat views, make them sticky and unsticky, and click to focus/unfocus them. You cannot move or resize them.\r\n\r\nI was going to make it so you can float `C_CONTAINER`s in this PR, but there were some issues and I wanted to get this in front of everyone for review, so I blocked off that functionality. There's still bits in the code where it handles `C_CONTAINER`s being floated though.\r\n\r\nThis PR has a known issue with floating xdg_shell views when using multiple outputs. If floating the view on the left output, I'm experiencing a flickering copy of the container at the same output-local position on the right output. This does not happen for xwayland views. I can't see what I'm doing wrong, so if someone can assist me with that then that would be appreciated.\r\n\r\nI went with the approach of having a `sway_workspace->floating` property, but I made it a `struct sway_container *` rather than a `list_t`. Using a container makes it easier to pass to functions that expect to be given a container. This `floating` container is created at workspace creation, destroyed at workspace destruction, and is immune to reaping. The type of this container is `C_CONTAINER` and the layout is irrelevant and never used.\r\n\r\nEach view implementation has a new `wants_floating` function, which allows the implementation to inspect the view and determine if it should be floating or not. There's a basic/terrible implementation for xwayland already done, but there needs to be some discussion on how to do this properly. Perhaps wlroots should expose its own list of window types so we don't have to use the xcb library. At the moment I'm using magic numbers, but this is a temporary solution.\r\n\r\nTest plan:\r\n\r\n* Use as daily driver\r\n* Float and unfloat things\r\n* Make things sticky and unsticky\r\n* Use multiple outputs\r\n\r\nMy preference is to implement the move/resize commands and floating `C_CONTAINER`s as separate PRs.": {
        "/dev/null": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands.c": 1,
        "sway/commands/border.c": 1,
        "sway/commands/layout.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/split.c": 1,
        "sway/config.c": 1,
        "sway/criteria.c": 1,
        "sway/debug-tree.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/meson.build": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Implement floating_minimum_size and floating_maximum_sizeRelevant i3 docs: https://i3wm.org/docs/userguide.html#_constraining_floating_window_size": {
        "/dev/null": 1,
        "sway/commands.c": 1,
        "sway/meson.build": 1,
        "sway/tree/view.c": 1
    },
    "Implement floating_modifier and mouse operations for floating viewsThis implements the following:\r\n\r\n* `floating_modifier` configuration directive (docs: https://i3wm.org/docs/userguide.html#floating_modifier)\r\n* Drag a floating window by its title bar\r\n* Hold mod + drag a floating window from anywhere\r\n* Resize a floating view by dragging the border\r\n* Resize a floating view by holding mod and right clicking anywhere on the view\r\n* Resize a floating view and keep aspect ratio by holding shift while resizing using either method\r\n* Mouse cursor turns into resize when hovering floating border or corner\r\n\r\nResizing *tiled* containers by dragging the border is not implemented in this PR.\r\n\r\nMinimum and maximum bounds are enforced.\r\n\r\nIf the view being dragged or resized decides to unmap itself or do some other significant operation (like moving to another workspace or becoming fullscreen) then the mouse operation is cancelled via a call to `container_end_mouse_operation`. Keep an eye out for any places where I don't call this but should.\r\n\r\nUnrelated to this PR, but note that views which have CSD/geo currently have damage issues, so maybe do your testing with an xwayland view.\r\n\r\nAlso I noticed I can't manually change a border's width using swaymsg any more (in master), so maybe change your border config before launching sway.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/input/cursor.h": 1,
        "include/sway/input/seat.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1
    },
    "Implement focus output commandCloses #2297.": {
        "sway/commands.c": 1,
        "sway/commands/focus.c": 1
    },
    "Implement focus_follows_mouse, mouse_warpingSuperceeds #1680, #1683 \r\n\r\nTest plan:\r\n\r\n- `mouse_warping output` (default) should make the mouse follow the focused output.\r\n- `mouse_warping none` should not warp the mouse at all.\r\n- `focus_follows_mouse yes` (default) should move focus as the mouse moves over new views/containers\r\n- `focus_follows_mouse no` should not move focus as the mouse moves over new views/containers\r\n- Should not break when mouse is moved over popups, layers, etc": {
        "/dev/null": 1,
        "include/sway/config.h": 1,
        "include/sway/input/seat.h": 1,
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/meson.build": 1
    },
    "Implement focus_follows_mouseAlso contains two other small changes:\r\n\r\n- Clicking any button will focus the container clicked (not just left)\r\n- Remove seamless_mouse (doesn't make sense on wlroots)\r\n\r\nTest plan:\r\n\r\n- `focus_follows_mouse yes` (default) should move focus as the mouse moves over new views/containers\r\n- `focus_follows_mouse no` should not move focus as the mouse moves over new views/containers\r\n- Should not break when mouse is moved over popups, layers, etc\r\n\r\nFixes #786 ": {
        "/dev/null": 1,
        "include/sway/config.h": 1,
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/input/cursor.c": 1,
        "sway/meson.build": 1
    },
    "Implement focus_wrappingImplements `focus_wrapping yes|no|force`\r\n\r\ni3 user guide: https://i3wm.org/docs/userguide.html#_focus_wrapping\r\n\r\nDo we want to support the legacy `force_focus_wrapping yes|no` syntax and map those to `WRAP_FORCE` and `WRAP_YES`? I'm not sure what the current thoughts are on legacy commands.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/meson.build": 1,
        "sway/sway.5.scd": 1,
        "sway/tree/layout.c": 1
    },
    "Implement full damage trackingUses scissors for now, will improve this in the future.\r\n\r\n- [x] Test scaled outputs\r\n- [x] Test output transforms\r\n- [x] Layer shell surface unmap": {
        "include/sway/output.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Implement fullscreenThis implements `fullscreen enable`, `fullscreen disable`, `fullscreen toggle`, and allows views to request fullscreen.\r\n\r\nThis is my first significant PR for sway and I've had to learn a lot about how everything works, so please scrutinise this carefully.\r\n\r\nNote that sway 0.15 allows the command `fullscreen` without any arguments which acts as toggle, but this is different to the i3 user guide so I've implemented it as described above. As a result, if you're porting config from sway 0.15 you may need to update your command to be `fullscreen toggle`.\r\n\r\nwl_shell seems a bit lacking with its fullscreen ability, and from what I understand wl_shell is deprecated anyway, so I've not implemented fullscreen for that. If someone could confirm then that'd be appreciated.\r\n\r\nThere is one known issue, and that is that popups don't show when the parent view is fullscreen, but I'd like to either resolve that in a separate PR or leave it for someone else to look into.\r\n\r\nTests:\r\n\r\n* Run fullscreen enable, fullscreen disable, fullscreen toggle on an xdg_v6 view\r\n* Run fullscreen enable, fullscreen disable, fullscreen toggle on an xwayland view\r\n* Attempt to fullscreen a container - should be ignored \r\n* Fullscreen a view, then kill it\r\n* Open two views on one workspace, fullscreen one, then attempt to focus the other - focus should remain on fullscreen view\r\n* Open two views on different workspaces, fullscreen one, then attempt to focus the other and back again - workspaces should focus correctly\r\n* Fullscreen view, then move view to another workspace - view should be unfullscreened\r\n* Make an xwayland view request fullscreen, eg. launch firefox and press F11\r\n* Make an xdg_v6 view request fullscreen, eg. launch `mpv --opengl-backend=wayland` and press f": {
        "/dev/null": 1,
        "include/sway/ipc-server.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Implement hide_edge_bordersImplements `hide_edge_borders <none|vertical|horizontal|both|smart>`\r\n- `hide_edge_borders none` shows all borders\r\n- `hide_edge_borders vertical` shows only horizontal borders\r\n- `hide_edge_borders horizontal` show only vertical borders\r\n- `hide_edge_borders both` hides all borders\r\n- `hide_edge_borders smart` hides borders if the view is an only child, otherwise shows all borders": {
        "/dev/null": 1,
        "include/sway/tree/container.h": 1,
        "sway/commands.c": 1,
        "sway/desktop/output.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Implement layer shell (rendering)": {
        "/dev/null": 1,
        "include/sway/output.h": 1,
        "include/sway/server.h": 1,
        "protocols/meson.build": 1,
        "sway/commands/output.c": 1,
        "sway/config/output.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "swaybg/meson.build": 1
    },
    "Implement marksThis implements the `mark` and `unmark` commands, including the `--add`, `--replace` and `--toggle` arguments for the `mark` command, and also implements mark matching in criteria.\r\n\r\nTo test, run a variety of these commands:\r\n\r\n* `swaymsg mark foo` (replaces any existing marks on this view with `foo`)\r\n* `swaymsg 'mark --add bar'` (will append `bar` to view's marks list)\r\n* `swaymsg [con_mark=\"foo\"] opacity 0.9`\r\n* `swaymsg [con_mark=\"foo\"] mark bar`\r\n* `swaymsg 'mark --add --toggle bar'` (keep existing marks list and toggle `bar`)\r\n\r\nTry to break it:\r\n\r\n* `swaymsg mark`\r\n* `swaymsg 'mark --add'`\r\n* `swaymsg 'mark --asdf'`\r\n\r\nNote that single quotes are required when using `--add` and friends, otherwise your shell may interpret them.\r\n\r\nThere's no easy well to get a view's marks (`show_marks` is not yet implemented), so my method is to test using the opacity example.": {
        "/dev/null": 1,
        "include/sway/config.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands.c": 1,
        "sway/criteria.c": 1,
        "sway/meson.build": 1,
        "sway/tree/view.c": 1
    },
    "Implement mode --pango_markupFixes #663\r\n\r\nThis implements the `--pango_markup` flag for the `mode` command. For anything listening for IPC events, `mode::pango_markup` is sent along with `mode::change`.": {
        "include/sway/config.h": 1,
        "include/sway/ipc-server.h": 1,
        "sway/commands/mode.c": 1,
        "sway/ipc-server.c": 1,
        "sway/sway.5.scd": 1,
        "swaybar/render.c": 1
    },
    "Implement mouse bindings~This set of changes is based on and requires #2296 ; I'm not entirely sure how best to to express this with Github's UI -- it seems I'll need to rebase a bit once #2296 is set, and clean up the resulting merge conflicts.~ (Done.)\r\n\r\nI've recently tested the code using\r\n\r\n    bindsym Ctrl+button3 floating toggle\r\n    bindsym button1+button3 kill\r\n    bindsym --release Shift+button2 floating toggle\r\n\r\nbut not with much else. I'm currently minimizing changes to the cursor code so as to avoid rebase conflicts, but there's significant refactoring of the binding code, and consequent keyboard code adjustments.": {},
    "Implement mouse warpingTest plan:\r\n\r\n- `mouse_warping output` (default) should make the mouse follow the focused output.\r\n- `mouse_warping none` should not warp the mouse at all.": {
        "/dev/null": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/meson.build": 1
    },
    "Implement move [left|right|up|down]The exact semantics of this command are complicated. I'll describe each\r\ntest scenario as s-expressions. Everything assumes L_HORIZ if not\r\nspecified, but if you rotate everything 90 degrees the same test cases\r\nhold.\r\n\r\n```\r\n(container (view a) (view b focus) (view c))\r\n-> move left\r\n(container (view b focus) (view a) (view c))\r\n\r\n(container (view a) (view b focus) (view c))\r\n-> move right\r\n(container (view a) (view c) (view b focus))\r\n\r\n(container L_VERT (view a))\r\n(container L_HORIZ\r\n  (view b) (view c focus))\r\n-> move up\r\n(container L_VERT\r\n  (view a) (view c focus))\r\n(container L_HORIZ (view b))\r\n\r\n(workspace\r\n  (view a) (view b focus) (view c))\r\n-> move up\r\n(workspace [split direction flipped]\r\n  (view b focus)\r\n  (container (view a) (view c)))\r\n\r\n(workspace\r\n  (view a) (view b focus) (view c))\r\n-> move down\r\n(workspace [split direction flipped]\r\n  (container (view a) (view c))\r\n  (view b focus)))\r\n\r\nNote: outputs use wlr_output_layout instead of assuming that i+/-1 is\r\nthe next output in the move direction.\r\n\r\n(root\r\n  (output X11-1\r\n    (workspace 1))\r\n  (output X11-2\r\n    (workspace 1 (view a focus) (view b)))))\r\n-> move left\r\n(root\r\n  (output X11-1\r\n    (workspace 1 (view a focus)))\r\n  (output X11-2\r\n    (workspace 1 (view b)))))\r\n\r\n(root\r\n  (output X11-1\r\n    (workspace 1\r\n      (container (view a) (view b)))\r\n  (output X11-2\r\n    (workspace 1 (view c focus)))))\r\n-> move left\r\n(root\r\n  (output X11-1\r\n    (workspace 1\r\n      (container (view a) (view b))\r\n      (view c focus)))\r\n  (output X11-2\r\n    (workspace 1)))\r\n```": {
        "/dev/null": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "sway/commands/move.c": 1,
        "sway/desktop/output.c": 1,
        "sway/input/seat.c": 1,
        "sway/main.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "swaybar/ipc.c": 1
    },
    "Implement no_focus commandi3 docs: https://i3wm.org/docs/userguide.html#no_focus\r\n\r\nExample config: `no_focus [class=\"Firefox\"]`\r\n\r\nNote that if you've focused an empty workspace when the view maps, the view should receive focus regardless of any `no_focus` directive.": {
        "/dev/null": 1,
        "include/sway/criteria.h": 1,
        "sway/commands.c": 1,
        "sway/meson.build": 1,
        "sway/tree/view.c": 1
    },
    "Implement opacity commandTest: `swaymsg transparency 0.25`.\r\n\r\nfixes #1558": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/tree/container.h": 1,
        "sway/commands.c": 1,
        "sway/desktop/output.c": 1,
        "sway/meson.build": 1,
        "sway/sway.5.txt": 1,
        "sway/tree/container.c": 1
    },
    "Implement pango supportImplements support for the `pango:` prefix in the font command.\r\n\r\nAlso fixes a missing `free()` in the font command.\r\n\r\nCloses #1903.\r\n\r\nMerge after #1915 (Implement title_format).\r\n\r\nExample config:\r\n\r\n    font pango:DejaVu Sans 10\r\n    for_window [title=\".*\"] title_format <b>%title</b>": {
        "include/sway/config.h": 1,
        "sway/commands/font.c": 1,
        "sway/tree/container.c": 1
    },
    "Implement pid->workspace trackingWhen you spawn a process with the exec command, sway now notes the\r\nworkspace you had focused and the pid of the child process, then assigns\r\nthat workspace to the child when its window appears.\r\n\r\nSome of this is carried over from sway 0.15, but with some major\r\nrefactoring and centralization of state.": {
        "config.in": 1,
        "include/sway/config.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands/exec_always.c": 1,
        "sway/config.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Implement rename workspace commandThis implements the following commands:\r\n\r\n* `rename workspace to new_name`\r\n* `rename workspace old_name to new_name`\r\n* `rename workspace number n to new_name`\r\n\r\nGeneral tests:\r\n\r\n* `swaymsg rename workspace to foo`\r\n* `swaymsg rename workspace to foo bar`\r\n* `swaymsg rename workspace foo to bar`\r\n* `swaymsg rename workspace foo bar to bar`\r\n* `swaymsg rename workspace number 1 to foo`\r\n* `swaymsg rename workspace number 1: foo to bar`\r\n\r\nFailure handling tests:\r\n\r\n* `swaymsg rename workspace`\r\n* `swaymsg rename workspace to`\r\n* `swaymsg rename workspace foo to`\r\n* `swaymsg rename workspace foo to foo` (same name)\r\n* `swaymsg rename workspace foo to bar` (where bar already exists)": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "sway/commands.c": 1,
        "sway/meson.build": 1
    },
    "Implement resize command for floating viewsImplements the following for floating views:\r\n\r\n* `resize set <width> <height>`\r\n* `resize <grow|shrink> <width|height|up|down|left|right> <amount>`": {
        "sway/commands/resize.c": 1
    },
    "Implement resize command* [x] `resize grow|shrink width|height [<amt>] [px | ppt]`\r\n\r\nFuture patches:\r\n\r\n* [ ] `resize grow|shrink left|right|up|down`\r\n* [ ] `resize set <width> [px | ppt] <height> [px | ppt]`": {
        "/dev/null": 1,
        "config.in": 1,
        "include/sway/tree/layout.h": 1,
        "sway/commands.c": 1,
        "sway/meson.build": 1,
        "sway/tree/layout.c": 1
    },
    "Implement shell viewsThis removes per-shell `sway_*_surface` and replaces them with `sway_*_view` which are more in line with the impl pattern. I believe this also fixes #1738.": {
        "include/sway/tree/view.h": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/tree/view.c": 1
    },
    "Implement show_marksThe implementation is similar to titles: store a texture for each focus class.\r\n\r\nTests:\r\n\r\n* Run `show_marks yes` and `show_marks no` in both config and swaymsg\r\n* `swaymsg mark foo`\r\n* Test with scaled outputs (I've already done this but doesn't hurt to double check)\r\n\r\nIf the title is long enough to intersect the mark then the mark is drawn on top. However, I've noticed an unrelated bug where the title isn't scissored properly and renders into the right side border if it's long enough. This makes a few pixels of it appear to the right of the mark which looks bad. I won't fix that as part of this PR because it's a separate issue.": {
        "/dev/null": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands.c": 1,
        "sway/commands/mark.c": 1,
        "sway/commands/unmark.c": 1,
        "sway/desktop/output.c": 1,
        "sway/meson.build": 1,
        "sway/sway.5.scd": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Implement some floating move commandsThis implements the following for floating containers:\r\n\r\n* `move <direction> <amount>`\r\n* `move [absolute] position <x> <y>`\r\n* `move [absolute] position mouse`\r\n\r\nContainers are assigned to new workspaces as needed.\r\n\r\nI moved the `strtol` parsing part out of `cmd_move` and into `move_in_direction` because it's specific to that function and was conflicting with the floating arguments.": {
        "include/sway/desktop.h": 1,
        "include/sway/tree/container.h": 1,
        "sway/commands/move.c": 1,
        "sway/desktop/desktop.c": 1,
        "sway/tree/container.c": 1
    },
    "Implement stacked layoutYou know the drill. It's mostly a copy/paste from tabbed.\r\n\r\nAt some point (probably after floating) I will try to combine some of the rendering parts to minimise the amount of duplicate/similar code.": {
        "include/sway/tree/container.h": 1,
        "sway/commands/layout.c": 1,
        "sway/desktop/output.c": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Implement swap commandImplements `swap container with id|con_id|mark <arg>`.\r\n`id` is only valid for xwayland views as it represents the X11 window ID\r\n\r\nFor reference, here is what i3's user guide says for the `swap` command: https://i3wm.org/docs/userguide.html#_swapping_containers\r\n\r\nFor the most part, this should be working. I'm just trying to fix a few things.\r\n\r\nShould be working:\r\n- [X] Selecting a container/view by id\r\n- [X] Selecting a container/view by con_id\r\n- [X] Selecting a container/view by mark\r\n- [X] Prevent swapping an anscestor and descendant\r\n- [X] Prevent swapping with an output or workspace\r\n- [X] Swapping position and geometry\r\n- [X] Swapping fullscreen state for views (containers cannot be fullscreen currently)\r\n\r\nTODO/Known Issues:\r\n- [X] ~Prevent the workspace from switching when swapping with a container/view on a hidden workspace~ Restore visible workspaces and previous_workspace_name after swap\r\n- [X] Fix tab/stack focusing when swapping the focused container/view out": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/tree/layout.h": 1,
        "sway/commands.c": 1,
        "sway/meson.build": 1,
        "sway/sway.5.scd": 1,
        "sway/tree/layout.c": 1
    },
    "Implement swaylock configuration file parsingCloses #1962 \r\n\r\nAllows for `swaylock` to be configured from file. All long options are valid using the format `long-option[=value]`. Ex. `color=111111FF` or `ignore-empty-password`. If requested, I can add support for short options, but they are currently not supported in the config file.\r\n\r\nThe default configuration file paths are `$HOME/.swaylock/config`, `$XDG_CONFIG_HOME/swaylock/config`, and `SYSCONFDIR/swaylock/config`. The configuration file can also be manually specified using `-C, --config`.\r\n\r\nI decided that instead of duplicating the code for configuring via the command line and a config file, to just reuse the same code and treat each line of the config file as a single argument for parsing. This makes it so that options do not need to be implemented/parsed in two locations and ensures that when an option is added/changed/removed, it effects both config methods.\r\n\r\nAny option set on the command line will override the option read from the config file.": {
        "swaylock/main.c": 1,
        "swaylock/swaylock.1.scd": 1
    },
    "Implement swaylock customization flagsCloses #1961 \r\n\r\nImplements the customization flags for swaylock that were in the man page and their variants for all possible states, with the requested dashes mixed in.\r\n\r\nI also implemented `i3lock`'s `-e, --ignore-empty-password`, which prevents empty passwords from being validated _(obviously this flag should not be given if for whatever reason the user's password is empty)_. \r\n\r\nAdditionally, since the list of flags has grown to be relatively large, I changed the order of them to make it easier to locate them in the code/usage/man page.": {
        "include/swaylock/swaylock.h": 1,
        "swaylock/main.c": 1,
        "swaylock/password.c": 1,
        "swaylock/render.c": 1,
        "swaylock/swaylock.1.scd": 1
    },
    "Implement tabbed layout@Dudemanguy911's PR appears to have gone stale, so I picked up where he left off. I feel a bit bad for implementing this when he already has an open PR, but I'm super keen on tabs and want to move foward with it. Sorry @Dudemanguy911.\r\n\r\nI had to change how `container_at` works because it simply iterated all the views and checked their position which won't work for tabbed, stacked or floating layouts. It now descends intelligently into the tree, calling a layout-specific function based on each ancestor's layout. This allows the tabbed layout to only descend into the active child, as well as implement tab-clicking to focus the container.\r\n\r\nI changed the `container_at` function to expect output-local coords rather than global layout coords. Because of the recursion it now does, it'd be messy to make it expect global layout coords. It was only called once, and always with a workspace, so this is safe. I realise this might have to be revisited when floating is implemented, but this is heading in the right direction for now.\r\n\r\nAll the following should work correctly:\r\n\r\n* Scaled outputs\r\n* Doing a split within a tabbed container\r\n* For splits, the tab's title is updated dynamically (eg. \"V[Foo, Bar]\") and recursively (eg. \"V[H[Foo, Bar], Baz]\")\r\n* Clicking a tab should focus it (or in the case of splits, should focus whatever nested child has focus_inactive)\r\n* `focus parent` works\r\n* Clicking a view's surface should focus it, also in child splits": {
        "include/sway/input/seat.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands/layout.c": 1,
        "sway/desktop/output.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1
    },
    "Implement tablet tool support": {
        "include/sway/input/cursor.h": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1
    },
    "Implement tap_button_map for input devicesCloses #1569 \r\n\r\nImplements `input <identifier> tap_button_map lmr|lrm`. This allows for the number of fingers used to be remapped to different buttons when using tap to click. There are only two options allowed by libinput: `lmr` (1=left, 2=middle, 3=right) and `lrm` (1=left, 2=right, 3=middle).": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "sway/commands/input.c": 1,
        "sway/config/input.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/meson.build": 1,
        "sway/sway-input.5.scd": 1
    },
    "Implement title_formatThis implements the `title_format` command, with a new placeholder `%shell` which gets substituted with the view type (xwayland, xdg_shell_v6 or wl_shell).\r\n\r\nExample config:\r\n\r\n    for_window [title=\".*\"] title_format %title (class=%class instance=%instance shell=%shell)\r\n\r\nYou can change the title using swaymsg:\r\n\r\n    $ swaymsg title_format %title\r\n\r\nSome implementation notes:\r\n* container_update_title() has been renamed to view_update_title() and moved into view.c as it only applies to views.\r\n* Because of the above, container_notify_child_title_changed() is now public.\r\n* The arguments of view_update_title() have changed. It used to have the title given to it via an argument; now it reads it from view_get_title().\r\n* Containers now have both a `name` and `formatted_title` property. The `name` is used purely for `strcmp()`, so we don't blindly recreate the title textures if the view hasn't changed its title.\r\n\r\nI've also tested it will null titles (Firefox developer tools as per #1912).": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands.c": 1,
        "sway/commands/font.c": 1,
        "sway/config.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Implement urgency base functionalityIntroduces a command to manually set urgency, as well as rendering of urgent views, sending the IPC event, removing urgency one second after focus, and matching urgent views via criteria.\r\n\r\nTo test, run something like `swaymsg [class=\"Firefox\"] urgent enable`.\r\n\r\nTry it with Firefox on a different workspace too, and notice the swaybar indicator working.\r\n\r\nNote that urgency is not yet implemented when xwayland views request it, nor when a view requests focus (depending on the value of `focus_on_window_activation`). I feel like that's out of scope for this PR.\r\n\r\nCloses #2258.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands.c": 1,
        "sway/criteria.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/meson.build": 1,
        "sway/sway.5.scd": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1,
        "swaybar/ipc.c": 1
    },
    "Improve dependency check for libinputFeel free to close this PR if it's not something you would like to have.\r\n\r\nI created this PR because the `README` file mentions this version is required (error prone) while the build doesn't check it.": {
        "meson.build": 1
    },
    "Improved key handling in swaylockI noticed a few things with swaylock that bothered me:\r\n1. Escape key was appended to buffer\r\n2. No CapsLock indicator ( https://github.com/swaywm/sway/issues/1613 )\r\n3. Key press of modifier keys had no indication, not a biggie but with the non-standard input feedback I felt it would be nice to still show that a key was pressed. \r\n\r\nThis pull request adds CapsLock indication, made escape clear the buffer and add some more visual feedback states. ": {
        "include/swaylock/seat.h": 1,
        "include/swaylock/swaylock.h": 1,
        "swaylock/password.c": 1,
        "swaylock/render.c": 1,
        "swaylock/seat.c": 1
    },
    "Init screencopy manager": {
        "sway/server.c": 1
    },
    "Init the dmabuf exporting protocol in wlrootsAllows desktop capture via the dmabuf-capture wlroots example client.": {
        "sway/server.c": 1
    },
    "Initialise previous cursor position.Fix the problem with focus jumping to the container under the cursor\r\nwhen first starting sway.": {
        "sway/input/cursor.c": 1
    },
    "Install swaybar and swaybg under /usr/lib/swayCloses #1880": {
        "meson.build": 1,
        "security.d/00-defaults.in": 1,
        "sway/commands/exec_always.c": 1,
        "swaybar/meson.build": 1,
        "swaybg/meson.build": 1
    },
    "Ipc container typeadd \"type\" to ipc json containers.": {
        "sway/ipc-json.c": 1
    },
    "Ipc new windowShould give a `window::new` event when you open a new window.": {
        "include/sway/ipc-server.h": 1,
        "sway/ipc-server.c": 1,
        "sway/tree/container.c": 1
    },
    "Keep view fullscreened when moving to another workspace`container_handle_fullscreen_reparent()` must be called *after* setting the container's new parent.\r\n\r\nTo test:\r\n\r\n* Fullscreen a view, then move the view to another workspace, then switch to that workspace - the view should be fullscreen.": {
        "sway/tree/layout.c": 1
    },
    "Kill wl_shellhttps://github.com/hdante/hello_wayland/pull/6 has been merged.\r\n\r\nFixes #1692": {
        "include/sway/server.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands/fullscreen.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Libinput configRestore the code that used to be in config.c:apply_input_config() pre-wlroots.\r\n\r\nLines were very long in the original code, do we want to use the heavy rewrite as a chance to wrap these?": {
        "sway/input/input-manager.c": 1,
        "sway/input/seat.c": 1
    },
    "Make command block implementation genericOverview\r\n-------------\r\nFixes #547 - Generic Code Blocks\r\nFixed #1034 - Braces on following line\r\nFixes #1753 - Output Block\r\n\r\nThis allows for any command to be given in either block form or expanded form. All commands should be working now.\r\n\r\n`bar` command\r\n----\r\nFor `bar`, the following syntax structures should be working:\r\n1. Block with optional id subcommand (currently in master)\r\n     ```\r\n    bar {\r\n        id bar-one\r\n        <bar-command>\r\n    }\r\n    # - or, if you prefer the brace on the following line --\r\n    bar\r\n    {\r\n        id bar-one\r\n        <bar-command>\r\n    }\r\n    ```\r\n2. Identifier block (similar to input and seat in master)\r\n    ```\r\n    bar bar-one {\r\n        <bar-command>\r\n    }\r\n    ```\r\n3. Nested\r\n    ```\r\n    bar {\r\n        bar-one {\r\n            <bar-command>\r\n        }\r\n        bar-two {\r\n            <bar-command>\r\n        }\r\n        bar-three <bar-command>\r\n    }\r\n    ```\r\n4. Expanded with identifier\r\n    ```\r\n    bar bar-one <bar-commad>\r\n    ``` \r\n5. Expanded with identifier on bar change\r\n    ```\r\n    bar bar-one <bar-command>\r\n    bar <bar-command>\r\n    bar bar-two <bar-command>\r\n    bar <bar-command>\r\n    ```\r\n\r\nTODO\r\n----------------------------------------------\r\n- [X] Restructure functions to support any command being a given as a block or single line\r\n- [X] Update current blocks to work again\r\n    - [X] `mode`\r\n    - [X] `bar` (See Above)\r\n    - [X] `bar colors`\r\n    - [X] `input`\r\n    - [X] `seat`\r\n- [X] Test all commands and update as necessary": {
        "common/readline.c": 1,
        "include/readline.h": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "sway/commands.c": 1,
        "sway/commands/bar.c": 1,
        "sway/commands/bar/colors.c": 1,
        "sway/commands/bar/id.c": 1,
        "sway/commands/input.c": 1,
        "sway/commands/mode.c": 1,
        "sway/commands/seat.c": 1,
        "sway/config.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/ipc-server.c": 1
    },
    "Make focus part of transactionsRather than maintain copies of the entire focus stack, this PR transactionises the focus by introducing two new properties to the container state and using those when rendering.\r\n\r\n* `bool focused` means this container has actual focus. Only one container should have this equalling true in its current state.\r\n* `struct sway_container *focus_inactive_child` points to the immediate child that was most recently focused (eg. for tabbed and stacked containers).\r\n\r\nWhile implementing this PR I discovered `transaction_commit_dirty` needs to be called even earlier than in `execute_command`, so it's now called from IPC, bindsym handling, etc. The reason for this is that a mapping view with criteria would call `execute_command` which created a second/nested transaction, which when combined with the new focus code making containers dirty would ultimately cause rendering issues. This isn't a problem in the simplify-transactions PR because the focus code in that PR doesn't make containers dirty.\r\n\r\nBecause transactions must be used when focus is changed, `transaction_commit_dirty` is now called in a few more places, such as when handling cursor motion and buttons.\r\n\r\nAnother negative net LOC PR :)\r\n\r\nTo test, use the transaction debug feature:\r\n\r\n* Open views and observe that the focus styling is preserved on the previous view until the new one appears.\r\n* Close views and observe that the focus styling is preserved on the closing view until it disappears.\r\n* Create tabbed and stacked containers and open and close views within them. Prior to this PR, it would render something it shouldn't during the transaction.": {
        "include/sway/input/seat.h": 1,
        "include/sway/tree/container.h": 1,
        "sway/commands.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1
    },
    "Make it clear that unmanaged views don't have a container`view->swayc` is NULL anyway.": {
        "sway/input/cursor.c": 1
    },
    "Make key repeat configurableThis creates two input commands for configuring the repeat delay and rate.\r\n\r\n    input \"myidentifier\" {\r\n        repeat_delay 250\r\n        repeat_rate 25\r\n    }\r\n\r\nTests (use DRM backend):\r\n\r\n* Start sway with variations of the above config\r\n* swaymsg input myidentifier repeat_delay 1000\r\n* swaymsg input myidentifier repeat_rate 10\r\n\r\n<s>Attempting to configure it via IPC doesn't work for some reason. It passes the correct values to wlr_keyboard_set_repeat_info() but it doesn't take effect. Is there anything else I need to do or is that a bug in wlroots?</s> (EDIT: This is because I was testing via the X11 backend)": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "sway/commands.c": 1,
        "sway/commands/input.c": 1,
        "sway/config/input.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/meson.build": 1,
        "sway/sway-input.5.txt": 1
    },
    "Maximize xwayland views by default": {
        "sway/desktop/xwayland.c": 1
    },
    "Merge pull request #1 from swaywm/masterupdate my fork": {},
    "Minor changes to build against json-c 0.13.xI'm not convinced my change to CMakeLists is the correct way to squelch\r\nthe json-c version error when building on a system with version\r\nnumbers greater than 0.12.1. 0.13.x+ is supposed to be backwards\r\ncompatible. Rest of the changes involve replacing int with size_t\r\nwhere necessary to suppress -Werror=sign-compare on gcc 8.": {
        "CMakeLists.txt": 1,
        "sway/ipc-server.c": 1,
        "swaybar/status_line.c": 1,
        "swaygrab/json.c": 1,
        "swaylock/main.c": 1,
        "swaymsg/main.c": 1
    },
    "Misc minor fixes* Don't create a GLES2 renderer\r\n* Use backend renderer when rendering output\r\n* Unify initial xwayland view mapping with map handler ": {
        "include/sway/server.h": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/server.c": 1
    },
    "Move floating windows to front when focusedTo test, open two floating windows and position them (eg. using `move position mouse`) in a way that they overlap. Click each one and observe it move to be in front of the other one.": {
        "common/list.c": 1,
        "include/list.h": 1,
        "sway/input/seat.c": 1
    },
    "Only send frame done to visible viewsAlso don't accumulate empty damage.\r\n\r\nTest plan: try setting and unsetting a view fullscreen.": {
        "sway/desktop/output.c": 1
    },
    "Only send frame to visible surfaces when fullscreenedThis code mirrors `render_output`.": {
        "sway/desktop/output.c": 1
    },
    "Overhaul criteria implementationThis builds off PR #1928 which I submitted several days ago, then decided to close in favour of overhauling the criteria system completely.\r\n\r\nThe criteria struct now uses **properties for each token type** rather than the list_t list of tokens. The reason for this is that different token types have different data types: pcre, string and number to name a few. Tokens like urgent and window_type are enum-ish too. A bonus of this is that criteria is now easier to understand when looking at the struct definition.\r\n\r\nThe criteria **parser has been rewritten** because the previous one didn't support valueless pairs (eg. `[class=\"foo\" floating]`).\r\n\r\nCriteria now has **types**. Types at the moment are `CT_COMMAND`, `CT_ASSIGN_WORKSPACE` and `CT_ASSIGN_OUTPUT`. i3 uses types as well. Previously the assign command was creating a criteria with `move to workspace <name>` as its command, but this caused the window to appear briefly on the focused workspace before being moved to the assigned workspace. It now creates the view directly in the assigned workspace.\r\n\r\nEach view will only **execute a given criteria once**. This is achieved by storing a list of executed criteria in the view. This is the same strategy used by i3.\r\n\r\n**Escaping** now works properly. Previously you could do things like `[class=\"Fire\\\"fox\"]` and the stored value would be `Fire\\\"fox`, but it should be (and now is) `Fire\"fox`.\r\n\r\nThe public functions in criteria.c are now all prefixed with `criteria_`.\r\n\r\nXwayland views now listen to the `set_title`, `set_class` and `set_window_type` events and criteria will be run when these happen. XDG shell has none of these events so it continues to update the title in\r\n`handle_commit`.\r\n\r\nEach view type's `get_prop` function has been split into `get_string_prop` and `get_int_prop` because some properties like the X11 window ID and window type are numeric.\r\n\r\nThe following new criteria tokens are now supported:\r\n\r\n* id (X11 window ID)\r\n* instance\r\n* tiling\r\n* workspace\r\n\r\nTest cases:\r\n\r\n* `for_window [class=\"^Firefox$\"] opacity 0.9`\r\n* `for_window [class=^Firefox$] opacity 0.9`\r\n* `for_window [ class = ^Firefox$ ] opacity 0.9`\r\n* `for_window [tiling] opacity 0.9`\r\n* `assign [class=\"^Firefox$\"] web`\r\n* `swaymsg [class=\"^Firefox$\"] opacity 0.9`\r\n\r\nTry to break things:\r\n\r\n* `swaymsg [invalid] opacity 0.9`\r\n* `swaymsg [tiling`\r\n* `swaymsg '[class=\"Firefox]\"]' opacity 0.9` (should parse properly but won't match)\r\n* `swaymsg '[class=\"Firefox]' opacity 0.9` (mismatched quote)\r\n* `swaymsg [class] opacity 0.9` (value is required)\r\n* `swaymsg [class=] opacity 0.9` (valid and will match any non-NULL class)\r\n* `swaymsg '[class=\"Fire\\\"fox\"]' opacity 0.9` (check debug log to see value is stored as `Fire\"fox`)": {
        "include/sway/criteria.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands.c": 1,
        "sway/commands/assign.c": 1,
        "sway/commands/for_window.c": 1,
        "sway/criteria.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/sway.5.txt": 1,
        "sway/tree/view.c": 1
    },
    "Partially implement move commandWorks:\r\n\r\n- move [container|window] to workspace <name>\r\n    - Note, this should be able to move C_CONTAINER but this is untested\r\n- move [workspace] to output [left|right|up|down|<name>]\r\n\r\nNot implemented yet:\r\n\r\n- move [left|right|up|down]\r\n- move scratchpad\r\n- move position": {
        "/dev/null": 1,
        "include/sway/output.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "sway/commands.c": 1,
        "sway/commands/focus.c": 1,
        "sway/desktop/output.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/output.c": 1
    },
    "Pass pointer events to surface layers": {
        "sway/input/cursor.c": 1
    },
    "Patch #1507: Clicking on invisible title bars switches focusThe initial problem that sparked #1507 was when I had views inside a container inside a tabbed container and could focus those views by clicking in their title bar region when the tab wasn't focused. This patch resolves that bug, but the issue remains open because there is a lot more to fix in those scenarios.": {
        "sway/handlers.c": 1
    },
    "Perform (partial) server initialization before dropping privileges.Some operations during backend creation (e.g. becoming DRM master)\r\nrequire CAP_SYS_ADMIN privileges. At this point, sway has dropped them\r\nalready, though. This patch splits the privileged part of server_init\r\ninto its own function and calls it before dropping its privileges.\r\nThis fixes the bug with minimal security implications.": {
        "include/sway/server.h": 1,
        "sway/main.c": 1,
        "sway/server.c": 1
    },
    "Pool buffer fixes- Set CLOEXEC, just in case\r\n- `munmap` in destroy_buffer": {
        "client/pool-buffer.c": 1,
        "include/pool-buffer.h": 1
    },
    "Port man pages to scdochttps://git.sr.ht/~sircmpwn/scdoc\r\n\r\nscdoc 1.3.0 supports tables, which is the missing piece needed to port sway's manual over to it.\r\n\r\nAdvantages of scdoc:\r\n\r\n- Faster and smaller than asciidoc\r\n- Better syntax than asciidoc\r\n- Not feasible to localize the manual with asciidoc": {
        "/dev/null": 1,
        ".build.yml": 1,
        "README.de.md": 1,
        "README.el.md": 1,
        "README.fr.md": 1,
        "README.it.md": 1,
        "README.ja.md": 1,
        "README.md": 1,
        "README.pt.md": 1,
        "README.ru.md": 1,
        "README.uk.md": 1,
        "meson.build": 1,
        "sway/sway-bar.5.txt": 1,
        "sway/sway-input.5.txt": 1,
        "sway/sway-security.7.txt": 1,
        "sway/sway.1.txt": 1,
        "sway/sway.5.txt": 1,
        "swaygrab/json.c": 1,
        "swaygrab/main.c": 1,
        "swaygrab/swaygrab.1.txt": 1
    },
    "Port swaybar to layer shellI overhauled swaybar's rendering stack along the way.\r\n\r\nFixes #1645, fixes #1224, fixes #1352, fixes #771, fixes #554, fixes #552\r\n\r\n* [x] swaybar\r\n  * [x] Port to layer surfaces\r\n  * [x] Overhaul rendering\r\n  * [x] IPC\r\n  * [x] text mode status line\r\n* [x] sway\r\n  * [x] bar configuration\r\n  * [x] IPC get_bar_config\r\n  * [x] IPC get_workspaces\r\n  * [x] Emit workspace events\r\n  * [x] Spawn i3bar process\r\n  * [x] Config reloading\r\n  * [x] avoid rearranging all windows all the time (layer shell issue)\r\n  * [x] Rearrange on config reload\r\n\r\nNot doing in this patch:\r\n\r\n* [ ] hidpi\r\n* [ ] input\r\n* [ ] output hotplugging\r\n* [ ]  i3bar json status line\r\n* [ ] tray": {
        "/dev/null": 1,
        "common/ipc-client.c": 1,
        "common/meson.build": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "include/sway/ipc-json.h": 1,
        "include/sway/ipc-server.h": 1,
        "include/sway/layers.h": 1,
        "include/sway/output.h": 1,
        "include/swaybar/bar.h": 1,
        "include/swaybar/config.h": 1,
        "include/swaybar/event_loop.h": 1,
        "include/swaybar/ipc.h": 1,
        "include/swaybar/render.h": 1,
        "include/swaybar/status_line.h": 1,
        "meson.build": 1,
        "sway/commands.c": 1,
        "sway/commands/reload.c": 1,
        "sway/config.c": 1,
        "sway/config/output.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1,
        "sway/sway.5.txt": 1,
        "sway/tree/container.c": 1,
        "swaybar/bar.c": 1,
        "swaybar/config.c": 1,
        "swaybar/event_loop.c": 1,
        "swaybar/ipc.c": 1,
        "swaybar/main.c": 1,
        "swaybar/render.c": 1,
        "swaybar/status_line.c": 1,
        "swaybar/tray/dbus.c": 1,
        "swaybar/tray/icon.c": 1,
        "swaybar/tray/sni.c": 1,
        "swaybar/tray/sni_watcher.c": 1,
        "swaybar/tray/tray.c": 1
    },
    "Port swaylock to layer shellFixes https://github.com/swaywm/sway/issues/1506, fixes https://github.com/swaywm/sway/issues/1141, fixes https://github.com/swaywm/sway/issues/918, fixes https://github.com/swaywm/sway/issues/605, fixes https://github.com/swaywm/sway/issues/1072\r\n\r\nRef https://github.com/swaywm/sway/issues/797": {
        "/dev/null": 1,
        "common/meson.build": 1,
        "include/sway/input/input-manager.h": 1,
        "include/sway/input/seat.h": 1,
        "include/swaylock/swaylock.h": 1,
        "meson.build": 1,
        "protocols/meson.build": 1,
        "sway/input/cursor.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/seat.c": 1,
        "swaybg/main.c": 1,
        "swaylock/main.c": 1
    },
    "Pre-multiply alpha for non-texturesFixes #1984 \r\n\r\nBackground\r\n=========\r\nFor textures, Cairo stores ARGB data with pre-multiplied alpha. Additionally, the shader is multiplying all four channels by con->alpha. So wlr_render_texture will render:\r\n\r\n    R = SourceRed * SourceAlpha * con->alpha + DestRed * (1 - SourceAlpha * con->alpha)\r\n    G = SourceGreen * SourceAlpha * con->alpha + DestGreen * (1 - SourceAlpha * con->alpha)\r\n    B = SourceBlue * SourceAlpha * con->alpha + DestGreen * (1 - SourceAlpha * con->alpha)\r\n    A = SourceAlpha * con->alpha + DestAlpha * (1 - SourceAlpha * con->alpha)\r\n\r\nAnything rendered with wlr_render_rect does not use pre-multiplied alpha and we only multiply the alpha channel by con->alpha. So wlr_render_rect will render:\r\n\r\n    R = SourceRed + DestRed * (1 - SourceAlpha * con->alpha)\r\n    G = SourceGreen + DestGreen * (1 - SourceAlpha * con->alpha)\r\n    B = SourceBlue + DestBlue * (1 - SourceAlpha * con->alpha)\r\n    A = SourceAlpha * con->alpha + DestAlpha * (1 - SourceAlpha * con->alpha)\r\n\r\nSummary\r\n=======\r\nAfter testing out both methods, it was obvious that wlr_render_texture is producing the correct result. wlr_render_rect has an issue with lighter colors not blending (fully opaque pure white - \\#FFFFFFFF - will always render as \\#FFFFFFFF regardless of con->alpha). For anyone that wants to compare it against this PR, I'll keep the following up for a bit: [redsoxfan:dont-premultiply-alpha](https://github.com/RedSoxFan/sway/commit/507ba4f8cd3148c744b49ee630d8a0542efa9513)\r\n\r\nThis PR pre-multiples the alpha channel and multiplies all channels by con->alpha before passing the colors array to wlr_render_rect. This produces the same end result as wlr_render_texture.": {
        "sway/desktop/output.c": 1
    },
    "Pretty-print all output info in swaymsg -t get_outputs": {
        "swaymsg/main.c": 1
    },
    "Prevent invalid free of workspace nameAn allocated pointer was incremented before being freed in\r\n`sway/workspace.c` which led to an invalid free. This has been fixed by\r\nkeeping the pointer in place and moving the data instead.\r\n\r\nFixes #1548": {
        "sway/workspace.c": 1
    },
    "Rebuild textures if needed when moving a containerWhen moving a container to an output which has a different scale than the previous, rebuild the title and marks textures at the new scale.\r\n\r\nFixes #1999.\r\n\r\nTo test:\r\n\r\n* Have two outputs at different scales\r\n* Mark a container with `swaymsg mark foo`\r\n* Move the container between the outputs, using both `mod+shift+<direction>`, as well as `mod+shift+<workspace-number>`": {
        "include/sway/tree/container.h": 1,
        "sway/tree/container.c": 1
    },
    "Reduce work duplication in keyboard and binding codeThis pull request first simplifies the bindcode and bindsym generation code, \r\nso that the binding generated are identical in form up to the ids used to identify\r\nthe set of pressed keys; as most of the code between `cmd_bindsym` and `cmd_bindcode`\r\nis shared, the two functions have been merged.\r\n\r\n(Keycode numbering is briefly adjusted to match the XKB numbering scheme, like i3 seems to. (?))\r\n\r\nThe next large change is a rewrite of the shortcut handling, which should preserve the same behavior\r\nexcept in edge cases. A single shortcut model is used for keycodes, raw keysyms, and translated keysyms. Release flag shortcuts are now identified on the preceding keypress, triggered if the next keyrelease breaks the shortcut condition, and kept if the next key event doesn't change shortcut state. The hardcoded list of modifier keys has been replaced by a retroactive test.\r\n\r\nThis pull request closes  #1844 . It interferes with PR #2064, as it uses a slightly different solution to solve the same issue (#2020).\r\n\r\nI have not yet, but probably should, seen what happens with dead, compose, or latch keys. `bindsym --release Control_L` does work, and I haven't yet discovered any bugs with my existing setup.\r\n\r\n": {},
    "Refactor arrange_windows()The arrange_windows() function hurts my brain. Here's a refactor for your consideration.\r\n\r\n* I've split `arrange_windows()` into a function for each container type. So you can call `arrange_root()`, `arrange_output(output)`, `arrange_workspace(workspace)` or `arrange_children_of(workspace_or_container)`. Each one iterates its children and recurses as needed.\r\n* For convenience, if you don't know what type of container you're dealing with and just want it to work, you can pass it to `arrange_windows(whatever)` and it'll figure it out.\r\n* Because there's now several more functions related to arranging, I've moved this out of layout.c and into a new file.\r\n* Passing -1, -1 to the function is now unnecessary, as it gets it from the provided parent and updates the child's dimensions before iterating into it.\r\n* Previously, `arrange_windows()` had inconsistent behaviour as to whether it would update properties on the passed container (eg. root and output would only work with their children). Now they always update the given container's properties, except for `arrange_children_of()` which is obvious from the name.\r\n* The `apply_{horiz,vert}_layout()` functions no longer need `start` and `end` variables passed to them, as it always uses the full children list.\r\n* Additionally, they no longer pass the parent's dimensions separately.\r\n* The `apply_{horiz,vert}_layout()` functions no longer recurse. They only set the child's properties, then execution is returned to `arrange_children_of()` which handles the recursion. This means the function call stack is `arrange_children_of()` => `arrange_children_of()` rather than `arrange_children_of()` => `apply_horiz_layout()` => `arrange_children_of()` which I believe is easier to follow.\r\n* Fullscreen is implemented differently this way. It saves the view's dimensions and restores them. Previously it was calling `view_configure()` without changing the swayc's stored width and height.\r\n\r\nAlso note I had to split view_set_fullscreen() into a lower level function called view_set_fullscreen_raw(), because I had to call the lower level one from elsewhere without having it go and rearrange the windows on me.": {
        "/dev/null": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/commands/layout.c": 1,
        "sway/commands/reload.c": 1,
        "sway/commands/resize.c": 1,
        "sway/commands/split.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/input/seat.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Refactor cmd_output to use config_subcommand**This is forked from #2070 so that needs to be merged first**\r\n\r\n@emersion requested that the output command be refactored to use subcommands in #2070. This PR does that\r\n\r\nThis also fixes setting a solid color background. In master, there are two issues:\r\n1. There is a logic issue that prevents the `solid_color` branch from executing (it is checking against argument before -- the color).\r\n2. `#` needs to be quoted or escaped when included in a shell command (ie swaybg). I decided to go with quoting the argument.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "sway/commands/output.c": 1,
        "sway/meson.build": 1
    },
    "Refactor output command, add output enable": {
        "include/sway/config.h": 1,
        "sway/commands/output.c": 1,
        "sway/config/output.c": 1
    },
    "Refactor parse_title_formatDon't read properties until needed, and do it with less lines of code.": {
        "sway/tree/view.c": 1
    },
    "Refactor rendererFor those reviewing, I highly recommend looking at the individual commits rather than trying to review it as a whole.\r\n\r\nThe first commit moves all the rendering related functions from output.c into a new file, render.c. Some of the functions such as `scale_box` are used by both files, so these are copied for now.\r\n\r\nThe second commit introduces a `struct render_context` which contains the output, damage, scale and output lx and ly. This is a file-scoped variable; the idea being that this file will only ever contain the one public function (`render_output`) so we populate it there and can refer to it anywhere else in the file. This saves us from passing the output and damage through several functions.\r\n\r\nThe next couple of commits remove `{output_view,unmanaged,layer,drag_icons}_for_each_surface` and make their callers call `surface_for_each_surface` directly.\r\n\r\nAnother commit removes the rotation related code, which appears to have been copied from rootston and never applied to sway.\r\n\r\nThe final commit changes how we iterate the surfaces for rendering. Instead of using `surface_for_each_surface` which requires  structs specifically for passing arguments around, we now iterate them directly and render them without requiring these structs. This commit removes `surface_for_each_surface`, `get_surface_box`, `render_view_surfaces` as well as the `render_data` and `root_geometry` structs.\r\n\r\nI will apply a similar refactor to what's remaining in output.c, but wanted to get this out the door because this will have rebase issues the longer I leave it.": {
        "/dev/null": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/meson.build": 1
    },
    "Refactor treeVarious tree refactorings to prepare for split containers, decoration, and damage. Will add todos as I see them.\r\n\r\nTODO:\r\n\r\n* [x] organize tree includes\r\n* [x] consistent naming conventions for functions\r\n* [x] remove typedefs (`swayc_t`)\r\n* [x] rewrite docstrings\r\n\r\nNEXT:\r\n\r\n* [ ] use destroy listeners for properties\r\n* [ ] view x/y in layout coordinate system (not output)\r\n* [ ] reevaluate use of `list_t`\r\n* [ ] include coordinates in x/y names (surface, output, layout)": {
        "/dev/null": 1,
        "include/sway/config.h": 1,
        "include/sway/container.h": 1,
        "include/sway/criteria.h": 1,
        "include/sway/input/input-manager.h": 1,
        "include/sway/input/seat.h": 1,
        "include/sway/ipc-json.h": 1,
        "include/sway/ipc-server.h": 1,
        "include/sway/layout.h": 1,
        "include/sway/view.h": 1,
        "include/sway/workspace.h": 1,
        "sway/commands/exec_always.c": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/kill.c": 1,
        "sway/commands/layout.c": 1,
        "sway/commands/output.c": 1,
        "sway/commands/reload.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/config.c": 1,
        "sway/config/output.c": 1,
        "sway/criteria.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1,
        "swaybar/ipc.c": 1
    },
    "Reimplement swaybg using surface layersThe last commit tears out some obsolete Wayland client code sway 0.x used to have. Diff is easier to read if you ignore that.\r\n\r\n![](https://sr.ht/ZuzP.png)": {
        "/dev/null": 1,
        "common/meson.build": 1,
        "include/client/buffer.h": 1,
        "include/client/cairo.h": 1,
        "include/client/pango.h": 1,
        "include/client/registry.h": 1,
        "include/client/window.h": 1,
        "meson.build": 1,
        "swaybg/main.c": 1,
        "wayland/buffers.c": 1,
        "wayland/cairo.c": 1,
        "wayland/pango.c": 1,
        "wayland/registry.c": 1,
        "wayland/window.c": 1
    },
    "Remove C_TYPES": {
        "include/sway/tree/container.h": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1
    },
    "Remove L_TYPES": {
        "include/sway/tree/container.h": 1,
        "sway/ipc-json.c": 1
    },
    "Remove `clipboard` command and `get_clipboard` message": {
        "completions/zsh/_swaymsg": 1,
        "include/ipc.h": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "swaymsg/main.c": 1,
        "swaymsg/swaymsg.1.scd": 1
    },
    "Remove arrange_windows()After the refactor, this function is no longer called.": {
        "include/sway/tree/arrange.h": 1,
        "sway/tree/arrange.c": 1
    },
    "Remove code that was nullifying output_configCode which loaded a '*' config for backgrounds was wrongly nullifying output_config, breaking dpms commands for specific displays.": {
        "sway/config/output.c": 1
    },
    "Remove orbital screenshooterhttps://github.com/emersion/grim/commit/8480e3ebdb752e8b0b65096cc312af664e50de45": {
        "sway/server.c": 1
    },
    "Remove strip quoting and fix strncpy-overlapFixes #2117 \r\n\r\nThis also fixes a strncpy--param-overlap error by replacing strncpy with memmove.": {
        "sway/commands.c": 1,
        "sway/config.c": 1
    },
    "Remove superfluous IPC urgent eventsWhen an xwayland view is mapped, the IPC urgent event (\"this is/is-not urgent\") was being sent on every surface commit.\r\n\r\nI had intentionally ommitted the check because I figured an urgent surface could update its urgent timestamp by sending urgent a second time. But that's not how it works in xwayland's case, and it makes for more complicated code.": {
        "sway/tree/view.c": 1
    },
    "Remove suspicious unconditional returnThis return effectively disables the log_kernel function. I don't think this is intended. Git blame suggests this was accidentally commited in 9eecbb5d8a988a0dded57ead1982dd0121071454.": {
        "sway/main.c": 1
    },
    "Remove sway_container.workspace_layoutResolves #1716.\r\n\r\nThe `container_set_layout()` function turned into a single `container->layout` assignment, so I opted to remove the function completely.": {
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "sway/commands/layout.c": 1,
        "sway/ipc-json.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Removed trailing comma from swaybar click event jsonTrailing comma was violating JSON validity and caused issues with deserialization in different status_command implementations (eg. [i3status-rust](https://github.com/greshake/i3status-rust))": {},
    "Render drag iconsFixes #2019": {
        "include/sway/input/seat.h": 1,
        "include/sway/tree/layout.h": 1,
        "sway/desktop/output.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/layout.c": 1
    },
    "Render titlesAlso implements the `font` command.\r\n\r\nThe text isn't antialiased (smoothed) so it looks poor at smaller font sizes. Suggestions for how to improve this are welcome.\r\n\r\nThe `text` colour is now stored as a uint32_t again to make it easier to give to cairo. The others remain as floats.\r\n\r\nThe thing works by storing four textures in the sway_container struct: one for focused, one for focused_inactive and so on. They are all updated at the same time. When rendering it picks which texture to use.\r\n\r\nIf a view updates its title it will NOT update the texture. If this is relatively easy to do then I'll add it to the PR, otherwise keep it separate.\r\n\r\nYou'll be pleased to know I've actually tested it with output scaling this time :)\r\n\r\nFixes #1818": {
        "/dev/null": 1,
        "include/sway/config.h": 1,
        "include/sway/tree/container.h": 1,
        "sway/commands.c": 1,
        "sway/commands/client.c": 1,
        "sway/config.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/meson.build": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Render unmanaged xwayland views when an xwayland view is fullscreenThis makes Chromium context menus appear when fullscreen.\r\n\r\nFixes an item on #1828.\r\n\r\nQuestion: This will render all unmanaged xwayland views, even if it doesn't belong to the fullscreen view. Do I need to worry about this, and if so how do I filter them?\r\n\r\nTo test:\r\n\r\n* Launch Chromium, fullscreen it, then right click on the page or open the context menu in the top right.": {
        "sway/desktop/output.c": 1
    },
    "Replace empty workspace with moved workspaceWhen moving a workspace to an output with only an empty workspace, remove the empty workspace instead of leaving it until the user then switches to and away from it.": {
        "sway/tree/layout.c": 1
    },
    "Restore workspaces to output when re-enabled**This is forked from #2108 so that needs to be merged first**\r\n\r\nIn #2108, it was requested that workspaces be restored to their outputs when re-enabled as discussed in swaywm/wlroots#479. This PR implements that request.\r\n": {
        "include/sway/tree/workspace.h": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/output.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Revert \"Break everything^W^WUse wlr_box for sway_container\"Reverts swaywm/sway#1757": {
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "sway/commands/layout.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/resize.c": 1,
        "sway/desktop/desktop.c": 1,
        "sway/desktop/output.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Revert \"Don't unmaximize floating views\"As agreed on IRC.\r\nDoesn't work or do anything yet, I'm hoping someone can throw some hints as to why not.": {
        "include/sway/tree/view.h": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/view.c": 1
    },
    "Revert \"Merge pull request #1653 from swaywm/revert-1647-refactor-tree\"": {
        "/dev/null": 1,
        "include/sway/config.h": 1,
        "include/sway/container.h": 1,
        "include/sway/criteria.h": 1,
        "include/sway/input/input-manager.h": 1,
        "include/sway/input/seat.h": 1,
        "include/sway/ipc-json.h": 1,
        "include/sway/ipc-server.h": 1,
        "include/sway/layout.h": 1,
        "include/sway/view.h": 1,
        "include/sway/workspace.h": 1,
        "sway/commands/exec_always.c": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/kill.c": 1,
        "sway/commands/layout.c": 1,
        "sway/commands/output.c": 1,
        "sway/commands/reload.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/config.c": 1,
        "sway/config/output.c": 1,
        "sway/criteria.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1,
        "swaybar/ipc.c": 1
    },
    "Revert \"Refactor tree\"Reverts swaywm/sway#1647": {
        "/dev/null": 1,
        "include/sway/config.h": 1,
        "include/sway/criteria.h": 1,
        "include/sway/input/input-manager.h": 1,
        "include/sway/input/seat.h": 1,
        "include/sway/ipc-json.h": 1,
        "include/sway/ipc-server.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "include/sway/tree/view.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands/exec_always.c": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/kill.c": 1,
        "sway/commands/layout.c": 1,
        "sway/commands/output.c": 1,
        "sway/commands/reload.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/config.c": 1,
        "sway/config/output.c": 1,
        "sway/criteria.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1,
        "swaybar/ipc.c": 1
    },
    "Revert PR #18811.) has an unneeded / in meson.build which causes the PATH env variable to have an incorrectly appended libexec directory for sway\r\n2.) breaks launching swaybar and swaybg at startup with a message \"sh: swaybar[/bg]: command not found\"": {
        "meson.build": 1,
        "security.d/00-defaults.in": 1,
        "sway/commands/exec_always.c": 1,
        "swaybar/meson.build": 1,
        "swaybg/meson.build": 1
    },
    "Run in verbose mode### Proposal\r\n\r\nThis change causes display managers to launch `sway` using the `--verbose` option.\r\n\r\nWith this change, systemd-enabled systems can access sway's log using `journalctl` tool.": {
        "sway.desktop": 1
    },
    "Runtime variable expansion**This is forked from #2070 so that needs to be merged first**\r\n\r\nFixes #548\r\n\r\nThis makes it so variables are expanded at runtime. For commands like `bindsym` and `bindcode`, that need an argument (such as `<key combo>`) expanded at config time, there is `char *expand_var(char *var)`.\r\n\r\nThis also makes it so that `set` can be used at runtime.": {
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Schedule a frame even if damage is emptyThis fixes clients scheduling a frame by committing without damaging anything like so:\r\n\r\n```\r\ncallback = wl_surface_frame(surface);\r\nwl_surface_commit(surface);\r\n```": {
        "sway/desktop/output.c": 1
    },
    "Seat fixes and cleanup* take `sway_` prefix off of seat and input manager functions for consistency.\r\n* dont copy seat config on the seat\r\n* dont copy input device config on the input device\r\n* general cleanups and refactorings\r\n\r\nNo changes in functionality, just code cleanup.\r\n\r\nsee `sway-input.5.txt`\r\n\r\nexample:\r\n\r\n```\r\nseat seat1 {\r\n        fallback true\r\n}\r\n\r\nseat seat0 {\r\n\tattach '9494:39:CM_Storm_Coolermaster_Novatouch_TKL'\r\n\tattach '1267:12306:ELAN1010:00_04F3:3012_Touchpad' \r\n\r\n}\r\n\r\ninput '1267:12306:ELAN1010:00_04F3:3012_Touchpad' {\r\n}\r\n\r\ninput '9494:39:CM_Storm_Coolermaster_Novatouch_TKL' {\r\n  xkb_layout de\r\n}\r\n```": {
        "include/sway/config.h": 1,
        "include/sway/input/input-manager.h": 1,
        "include/sway/input/seat.h": 1,
        "sway/commands.c": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/seat.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/config.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1,
        "sway/server.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Send clicks to swaybar blocks as X11 button idsCurrently click events are sent to blocks with a linux event code as the button value, but the [i3bar protocol](https://i3wm.org/docs/i3bar-protocol.html) specifies that the button should be an X11 button id.": {
        "include/swaybar/bar.h": 1,
        "include/swaybar/status_line.h": 1,
        "swaybar/bar.c": 1,
        "swaybar/i3bar.c": 1,
        "swaybar/render.c": 1
    },
    "Send enter event to layer shell surfaces": {
        "sway/desktop/layer_shell.c": 1
    },
    "Send pointer button events for keyboard-interactive layer surfacesFixes #2111 \r\n\r\nThe function was returning before the call to `wlr_seat_pointer_notify_button` that sends the event to the layer surface.": {
        "sway/input/cursor.c": 1
    },
    "Send pointer discrete axis valuesUpdate for swaywm/wlroots#970": {
        "sway/input/cursor.c": 1
    },
    "Send reparent events in container_splitFixes #2077 \r\n\r\nI was sending the reparent event for the wrong container, which may have been freed by `container_flatten`. It was supposed to be for the container being split (`container_insert_child` already handles it for the container being moved out of the tab/stack). \r\n\r\nI decided the correct solution was not to send the reparent event after `container_split`, but in the `container_split` function itself.": {
        "sway/tree/layout.c": 1
    },
    "Send surface enter/leave events to view childrenTest plan: check subsurfaces + popups HiDPI support": {
        "include/sway/tree/view.h": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/tree/view.c": 1
    },
    "Send workspace::move in container_output_destroyThis sends the `workspace::move` IPC event in `container_output_destroy` when moving a workspace from one output to another. This notifies swaybar (and anything else subscribed to the IPC events) of the change.": {
        "sway/tree/container.c": 1
    },
    "Set _POSIX_C_SOURCE properlyFixes #1814": {
        "swaybar/status_line.c": 1
    },
    "Set pool_buffers busy when handing them outPool buffers keep track of whether the compositor is still using them, so we don't step on its toes. They never got marked as such, though, so toe-stepping could be occurring.": {
        "client/pool-buffer.c": 1
    },
    "Set xwayland cursor": {
        "include/sway/server.h": 1,
        "sway/input/seat.c": 1,
        "sway/server.c": 1
    },
    "Simplify popup_unconstrainJust use the parent output.\r\n\r\nFixes #2259": {
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1
    },
    "Simplify transactions by using a dirty flag on containersThis PR changes the way we handle transactions to a more simple method. The new method is to mark containers as dirty from low level code (eg. arranging, or `container_destroy`, and eventually `seat_set_focus`), then call `transaction_commit_dirty` which picks up those containers and runs them through a transaction. The old methods of using transactions (`arrange_and_commit`, or creating one manually) are now no longer possible.\r\n\r\nThe highest-level code (`execute_command` and view implementation handlers) will call `transaction_commit_dirty`, so most other code just needs to set containers as dirty. This is done by arranging, but can also be done by calling `container_set_dirty`.\r\n\r\nThis PR will make transactionising the focus stack much easier as I will be able to mark containers as dirty from within `seat_set_focus`. It solves the problem of low level code needing to conditionally add a container to a transaction.\r\n\r\nThis implementation is nicer on the CPU because it doesn't have to check if a container already exists in a transaction when adding one. It comes straight from the `server.dirty_containers` list which doesn't contain duplicates.\r\n\r\nRunning multiple commands through swaymsg will now use a single transaction.\r\n\r\nAnd lastly, this PR has a negative net LOC :)": {
        "include/sway/desktop/transaction.h": 1,
        "include/sway/server.h": 1,
        "include/sway/tree/arrange.h": 1,
        "include/sway/tree/container.h": 1,
        "sway/commands.c": 1,
        "sway/commands/border.c": 1,
        "sway/commands/floating.c": 1,
        "sway/commands/fullscreen.c": 1,
        "sway/commands/gaps.c": 1,
        "sway/commands/layout.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/reload.c": 1,
        "sway/commands/resize.c": 1,
        "sway/commands/smart_gaps.c": 1,
        "sway/commands/split.c": 1,
        "sway/commands/swap.c": 1,
        "sway/config.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/server.c": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "Sorted binding listsThe motivation for this pull request is that binding lookup was O(n) per key press, and duplicated some of the code involved in checking for duplicate bindings. This PR ensures that the lists of bindings remain sorted, so that `get_active_binding` can use binary search instead of a linear scan.\r\n\r\nAs a rule of thumb, for low-cost comparisons, binary search is faster than linear search around 32 elements. With a configuration involving ~60 bindsyms, binding search time drops from 4us to 3us. This change most likely does slow down modes with <10 bindsyms. but in exchange can handle even 100000 bindsyms in 6us rather than e.g. 2ms. Using e.g. an AVL tree ([tree.c.txt](https://github.com/swaywm/sway/files/2195857/tree.c.txt), [tree.h.txt](https://github.com/swaywm/sway/files/2195858/tree.h.txt)) guarantees O(n log n) loading, but yields slower lookups for <100 bindsyms, and introduces too much complexity.\r\n\r\nThe PR also resolves a TODO in `sway/tree/workspace.c`, by extracting the first workspace name from bindcode expressions as well.\r\n\r\n~~I'm not entirely certain on naming, especially with `list_sortedset_insert` ,  `list_sortedset_find`,  and `find_workspace_name` (e.g. is `extract_binding_workspace_name` clearer?).~~ (Edit: the former two aren't pretty, but one can guess the meaning from the name, and `workspace_name_from_binding` better describes the last one.)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n": {},
    "Split rendererThis is a more conservative version of #2183. This PR refactors `output.c`, moving rendering functions into `render.c`. This PR doesn't contain any logic change (apart from fixing a bad cast in `output_view_for_each_surface`).\r\n\r\nThe goal is to make it easier to work with and review changes in `output.c` (such as refactoring iterators).": {
        "/dev/null": 1,
        "include/sway/output.h": 1,
        "sway/desktop/output.c": 1,
        "sway/meson.build": 1
    },
    "Static analysis fixesLike swaywm/wlroots#1101, a bunch of trivial fixes; most are stuff not done properly on error (meh) but there are a couple of real leaks/small fixes.\r\n\r\nI didn't do this as thoroughly as wlroots but it's a start": {
        "common/unicode.c": 1,
        "common/util.c": 1,
        "sway/commands.c": 1,
        "sway/commands/assign.c": 1,
        "sway/commands/bar/font.c": 1,
        "sway/commands/bar/modifier.c": 1,
        "sway/commands/input/accel_profile.c": 1,
        "sway/commands/input/click_method.c": 1,
        "sway/commands/input/drag_lock.c": 1,
        "sway/commands/input/dwt.c": 1,
        "sway/commands/input/events.c": 1,
        "sway/commands/input/left_handed.c": 1,
        "sway/commands/input/map_from_region.c": 1,
        "sway/commands/input/middle_emulation.c": 1,
        "sway/commands/input/natural_scroll.c": 1,
        "sway/commands/input/pointer_accel.c": 1,
        "sway/commands/input/repeat_delay.c": 1,
        "sway/commands/input/repeat_rate.c": 1,
        "sway/commands/input/scroll_method.c": 1,
        "sway/commands/input/tap.c": 1,
        "sway/commands/output/background.c": 1,
        "sway/commands/output/mode.c": 1,
        "sway/commands/output/position.c": 1,
        "sway/config.c": 1,
        "sway/config/bar.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1,
        "sway/tree/workspace.c": 1,
        "swaylock/main.c": 1
    },
    "Subsurfaces and popupsRender subsurfaces and popups.\r\n\r\n* [x] render xdg-popups\r\n* [x] xdg-popups input\r\n* [x] render subsurfaces\r\n* [x] subsurfaces input\r\n* [x] render wl-shell popups\r\n* [x] wl-shell popups input\r\n* [x] render xwayland override redirect\r\n* [x] xwayland override redirect input\r\n\r\nFurther work:\r\n\r\n* make wl-shell transient windows floating": {
        "include/sway/layout.h": 1,
        "include/sway/view.h": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1
    },
    "Support alpha in border coloursThe alpha component is merged with the container's opacity.\r\n\r\nFixes #1882\r\n\r\nIn this example, the title background uses about 25% alpha:\r\n`client.focused          #ff0000 #00ff0040 #ffffff #2e9ef4   #0000ff`\r\n\r\nLaunch a terminal, run `swaymsg opacity 0.5` and it'll adjust accordingly.": {
        "sway/commands/client.c": 1,
        "sway/desktop/output.c": 1
    },
    "Support i3's legacy force_focus_wrapping commandImplements support for i3's legacy `force_focus_wrapping yes|no` command.\r\n\r\nThis is a follow-up to #2060. @SirCmpwn commented after the merge that he wants support for this legacy command.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "sway/commands.c": 1,
        "sway/meson.build": 1,
        "sway/sway.5.scd": 1
    },
    "Swaybar fixRemove status command fd from event loop on error.\r\nThis prevents poll constantly looping on POLLHUP if the status command dies, causing 100% CPU usage.": {
        "swaybar/bar.c": 1,
        "swaybar/event_loop.c": 1
    },
    "Swaybar inputFixes #1104, fixes #1457": {
        "include/swaybar/bar.h": 1,
        "include/swaybar/ipc.h": 1,
        "meson.build": 1,
        "swaybar/bar.c": 1,
        "swaybar/ipc.c": 1,
        "swaybar/meson.build": 1,
        "swaybar/render.c": 1
    },
    "Swaybar: Respect pango_markup configMakes swaybar respect the user's `pango_markup` configuration in the workspace buttons and binding mode indicator.": {
        "swaybar/render.c": 1
    },
    "Swayidle: doublefork to not leave zombies aroundAlso using `waitpid()` in sway for exec cmd because we can\u2122": {
        "sway/commands/exec_always.c": 1,
        "swayidle/main.c": 1
    },
    "Swaylock: Allow per-output imagesThis implements the output part of the `[<output>:]<path>` syntax for the `-i` argument.\r\n\r\nThe previous implementation of this PR used IPC, but that implementation has been replaced with one which uses the xdg-output protocol.\r\n\r\nTests:\r\n\r\n* Specifying no image arguments should show blank on all outputs\r\n* Specifying `-i ~/default.png` should show default.png on all outputs\r\n* Specifying `-i HDMI-A-1:~/a.png` should show a.png on that output, and all others blank\r\n* Specifying `-i HDMI-A-1:~/a.png -i ~/default.png` should show default.png on all other outputs\r\n\r\nUnusual scenario tests:\r\n\r\n* Specifying the same output (or lack of output) multiple times should pick one of them\r\n* Specifying an image that is unreadable should log an error and behave as though you didn't pass that argument": {
        "include/swaylock/swaylock.h": 1,
        "meson.build": 1,
        "protocols/meson.build": 1,
        "swaylock/main.c": 1,
        "swaylock/render.c": 1
    },
    "Swaylock: Clear password buffer after use.After a user enters or clears a password, try to overwrite the buffer containing it. That way it's not sitting around in RAM for something else to read later. Also, mlock() the password buffer so that it is never swapped out.\r\n\r\nThis also replaces the dynamically allocated buffer with a char[1024]. Any characters past 1023 are discarded until the user hits enter or escape. (For comparison, i3lock uses a 512 byte buffer.)": {
        ".travis.yml": 1,
        "CMake/FindJsonC.cmake": 1,
        "CMake/Manpage.cmake": 1,
        "CMakeLists.txt": 1,
        "README.de.md": 1,
        "README.el.md": 1,
        "README.fr.md": 1,
        "README.it.md": 1,
        "README.ja.md": 1,
        "README.md": 1,
        "README.pt.md": 1,
        "README.ru.md": 1,
        "README.uk.md": 1,
        "common/log.c": 1,
        "include/swaybar/tray/tray.h": 1,
        "sway/config.c": 1,
        "sway/container.c": 1,
        "sway/handlers.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1,
        "sway/sway-bar.5.txt": 1,
        "sway/sway-input.5.txt": 1,
        "sway/sway-security.7.txt": 1,
        "sway/sway.1.txt": 1,
        "sway/sway.5.txt": 1,
        "swaybar/bar.c": 1,
        "swaybar/status_line.c": 1,
        "swaygrab/json.c": 1,
        "swaylock/main.c": 1,
        "swaymsg/swaymsg.1.txt": 1
    },
    "Swaylock: Clear password buffer after use.After a user enters or clears a password, try to overwrite the buffer containing it. That way it's not sitting around in RAM for something else to read later. Also, mlock() the password buffer so that it is never swapped out.\r\n\r\nThis also replaces the dynamically allocated buffer with a static char[1024]. Any characters past that are discarded until the user hits enter or escape.\r\n\r\nI had to close #1513 because I opened it against the wrong base. This PR addresses your comments over there.\r\n\r\nRegarding PAM zeroing-out the `strdup()`'d password: I figured that out with gdb. Here's a screenshot of my debug session:\r\n\r\n![screenshot from 2017-12-14 20-40-10](https://user-images.githubusercontent.com/200121/34027053-19ce0e94-e10f-11e7-9330-f68d5660e233.png)\r\n\r\nI'm too lazy to set up debug symbols, and the Linux PAM code is really hard to follow, so I can't link to the exact line where the zeroing happens.\r\n\r\nI also used the debugger to verify that swaylock's copy of the password is zeroed-out.": {
        "swaylock/main.c": 1
    },
    "Switch workspace if required when mapping a viewFixes #1879.\r\n\r\nHave something like this in your config:\r\n\r\n    assign [class=\"Firefox\"] web\r\n    workspace web output X11-2\r\n\r\nThen launch sway with two outputs, focus output X11-1, and launch Firefox. The web workspace will be created on X11-2, Firefox will be created there and focused, the IPC workspace event will be sent, but Firefox wouldn't actually render because you hadn't switched to the workspace.": {
        "sway/tree/view.c": 1
    },
    "Translation updateTranslated news and corrected the translation": {
        "README.ru.md": 1
    },
    "Update README.el.mdShould make things consistent with proposed README.md pr (#1443).": {
        "README.el.md": 1
    },
    "Update README.ja.mdHello. I updated and improved README.ja.md:\r\n- Add feature freeze notice\r\n- Re-Add the support subsection\r\n- Correct errors\r\n\r\nI'm sorry, but I cannot provide support on the IRC channel for now. So that I did not add me to the support subsection.": {
        "README.ja.md": 1
    },
    "Update README.mdQuick fix for consistency.": {
        "README.de.md": 1,
        "README.fr.md": 1,
        "README.it.md": 1,
        "README.ja.md": 1,
        "README.md": 1,
        "README.pt.md": 1,
        "README.ru.md": 1,
        "README.uk.md": 1
    },
    "Update cursor on focus changeThis allows to send wl_pointer.enter when switching between views\r\nin a split/tabbed layout for instance. This (1) updates the cursor\r\nimage accordingly (2) makes it unnecessary to move the mouse before\r\nscrolling. It's harmless to always call cursor_send_pointer_motion\r\nbecause in case the focused surface hasn't changed this is a no-op.\r\n\r\nThe `last_focus != NULL` condition is required otherwise\r\ncursor_send_pointer_motion will crash when sway starts up (the\r\nsway_output doesn't yet have a workspace).": {
        "sway/input/seat.c": 1
    },
    "Update cursor when workspace focus changesNot only this updates the cursor image, but this also (and more importantly) sends pointer enter/leave events.": {
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1
    },
    "Update dbus dependency": {},
    "Update for swaywm/wlroots#1000See swaywm/wlroots#1000": {
        "sway/server.c": 1
    },
    "Update for swaywm/wlroots#1060See swaywm/wlroots#1060": {
        "sway/desktop/output.c": 1
    },
    "Update for swaywm/wlroots#1116See swaywm/wlroots#1116": {
        "sway/tree/view.c": 1
    },
    "Update for swaywm/wlroots#1126See swaywm/wlroots#1126": {
        "CONTRIBUTING.md": 1,
        "HACKING.md": 1,
        "common/background-image.c": 1,
        "common/ipc-client.c": 1,
        "common/log.c": 1,
        "common/pango.c": 1,
        "common/readline.c": 1,
        "common/util.c": 1,
        "include/log.h": 1,
        "sway/commands.c": 1,
        "sway/commands/assign.c": 1,
        "sway/commands/bar.c": 1,
        "sway/commands/bar/binding_mode_indicator.c": 1,
        "sway/commands/bar/font.c": 1,
        "sway/commands/bar/height.c": 1,
        "sway/commands/bar/hidden_state.c": 1,
        "sway/commands/bar/id.c": 1,
        "sway/commands/bar/mode.c": 1,
        "sway/commands/bar/modifier.c": 1,
        "sway/commands/bar/output.c": 1,
        "sway/commands/bar/pango_markup.c": 1,
        "sway/commands/bar/position.c": 1,
        "sway/commands/bar/separator_symbol.c": 1,
        "sway/commands/bar/status_command.c": 1,
        "sway/commands/bar/strip_workspace_numbers.c": 1,
        "sway/commands/bar/swaybar_command.c": 1,
        "sway/commands/bar/workspace_buttons.c": 1,
        "sway/commands/bar/wrap_scroll.c": 1,
        "sway/commands/bind.c": 1,
        "sway/commands/exec.c": 1,
        "sway/commands/exec_always.c": 1,
        "sway/commands/for_window.c": 1,
        "sway/commands/input.c": 1,
        "sway/commands/input/events.c": 1,
        "sway/commands/input/tap.c": 1,
        "sway/commands/input/xkb_layout.c": 1,
        "sway/commands/input/xkb_model.c": 1,
        "sway/commands/input/xkb_options.c": 1,
        "sway/commands/input/xkb_rules.c": 1,
        "sway/commands/input/xkb_variant.c": 1,
        "sway/commands/mode.c": 1,
        "sway/commands/output.c": 1,
        "sway/commands/output/background.c": 1,
        "sway/commands/rename.c": 1,
        "sway/commands/resize.c": 1,
        "sway/commands/set.c": 1,
        "sway/commands/swaybg_command.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/config.c": 1,
        "sway/config/bar.c": 1,
        "sway/config/input.c": 1,
        "sway/config/output.c": 1,
        "sway/config/seat.c": 1,
        "sway/criteria.c": 1,
        "sway/desktop/idle_inhibit_v1.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1,
        "sway/server.c": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/output.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1,
        "swaybar/bar.c": 1,
        "swaybar/i3bar.c": 1,
        "swaybar/ipc.c": 1,
        "swaybar/main.c": 1,
        "swaybar/status_line.c": 1,
        "swaybg/main.c": 1,
        "swayidle/main.c": 1,
        "swaylock/main.c": 1,
        "swaylock/password.c": 1,
        "swaylock/seat.c": 1,
        "swaymsg/main.c": 1
    },
    "Update for swaywm/wlroots#993See swaywm/wlroots#993": {
        "sway/server.c": 1
    },
    "Update for wlroots multi rendererUpdate for https://github.com/swaywm/wlroots/pull/924": {
        "sway/desktop/output.c": 1,
        "sway/server.c": 1
    },
    "Update for wlroots#824See https://github.com/swaywm/wlroots/pull/824": {
        "include/sway/tree/view.h": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/seat.c": 1,
        "sway/tree/container.c": 1
    },
    "Update for wlroots#850See https://github.com/swaywm/wlroots/pull/850": {
        "sway/server.c": 1
    },
    "Update for wlroots#885Update for https://github.com/swaywm/wlroots/pull/885": {
        "sway/tree/view.c": 1
    },
    "Update for wlroots#923See swaywm/wlroots#923": {
        "sway/input/cursor.c": 1
    },
    "Update input events per swaywm/wlroots#765": {
        "sway/input/cursor.c": 1
    },
    "Update layer-shell protocolOtherwise it's not possible to pass a NULL output.": {
        "protocols/wlr-layer-shell-unstable-v1.xml": 1
    },
    "Update rendering code for wlroots matrix redesignBreaking wlroots change: https://github.com/swaywm/wlroots/pull/722": {
        "sway/desktop/output.c": 1
    },
    "Update to json-c 0.13Update json-c dependency to 0.13, which changed the return type of\r\njson_object_array_length to support only a size_t instead of an int as\r\nfallback.\r\n\r\nNot sure if you want to take this patch, otherwise I'll apply it manually in the Arch Linux package.": {
        "CMakeLists.txt": 1,
        "sway/ipc-server.c": 1,
        "swaybar/status_line.c": 1,
        "swaygrab/json.c": 1,
        "swaylock/main.c": 1,
        "swaymsg/main.c": 1
    },
    "Update wlroots APIBreaking changes in wlr_xdg_shell_v6 and wlr_renderer have been\r\nmade upstream.": {
        "include/sway/server.h": 1,
        "sway/desktop/output.c": 1,
        "sway/server.c": 1,
        "sway/tree/container.c": 1
    },
    "Update wlroots xdg-shell-v6 API": {
        "sway/desktop/xdg_shell_v6.c": 1
    },
    "Update xwayland start for new APIThe relevant PR in wlroots: https://github.com/swaywm/wlroots/pull/959\r\nLeft the behavior in sway (non lazy start) the same.": {
        "sway/server.c": 1
    },
    "Updates per swaywm/wlroots#887": {
        "sway/desktop/layer_shell.c": 1
    },
    "Updates per wlroots#1076": {
        "sway/desktop/output.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1
    },
    "Use 'private-code' for wayland-scanner code generationSame as for wlroots - autodetect version and use either 'code' or the\r\nnew one": {
        "protocols/meson.build": 1
    },
    "Use full ws->name in swaybar hotspot callbackProblem: clicking on swaybar workspace hotspot creates new workspace if `strip_workspace_numers` is enabled. Reason is wrong name in hotspot callback.\r\n\r\nExample config subset:\r\n```\r\nset $ws1 \"1:&#x3B1;\"\r\nset $ws2 \"2:&#x3B2;\"\r\n\r\nbindsym $mod+1 workspace $ws1\r\nbindsym $mod+2 workspace $ws2\r\n\r\nbar {\r\n\tstrip_workspace_numbers yes\r\n}\r\n```": {
        "swaybar/render.c": 1
    },
    "Use reasonable default for font heightFixes #1949 \r\n\r\nWhen your config lacks a `font` directive, the font height was being set to 0 and it wasn't being recalculated. This sets the default to 17, which is the font height for `monospace 10` as defined on the line above.": {
        "sway/config.c": 1
    },
    "Use saved buffer when fullscreen view is in a transactionFixes #2237.\r\n\r\nTo test, launch mpv, fullscreen the video then unfullscreen it. When unfullscreening, it continued to render the live buffer while the other views were resizing, which meant you can get some frames of smaller video despite being fullscreen.\r\n\r\nAn easier way to test is to set `TRANSACTION_DEBUG` and increase the `TIMEOUT_MS` to 1000 or so.": {
        "sway/desktop/render.c": 1
    },
    "Use scissor to render title textureThis allows the title's texture to always be the full width of the text, and clipped at render time according to the desired width (eg. tabs...).\r\n\r\nAs an added bonus, the texture no longer needs to be updated when containers are arranged.": {
        "sway/desktop/output.c": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1
    },
    "Use the new map/unmap events for xwayland viewsSee https://github.com/swaywm/wlroots/pull/779": {
        "include/sway/tree/view.h": 1,
        "sway/desktop/xwayland.c": 1
    },
    "Use wlr_renderer_init_wl_shm": {
        "sway/server.c": 1
    },
    "Use wlr_surface_point_accepts_input for unmanaged surfaces": {
        "sway/input/cursor.c": 1
    },
    "Views redesignTest plan: test various shells, test xwayland unmanaged views.": {
        "include/sway/output.h": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/output.c": 1,
        "sway/tree/view.c": 1
    },
    "Warning fixes for json-c json_object_array_lengthA better patch for quieting the warnings related to json_object_array_length\r\nThis grants some future-proofing for the next json-c version which contains this API breaking change.": {
        "CMakeLists.txt": 1,
        "README.de.md": 1,
        "README.el.md": 1,
        "README.fr.md": 1,
        "README.it.md": 1,
        "README.ja.md": 1,
        "README.md": 1,
        "README.pt.md": 1,
        "README.ru.md": 1,
        "README.uk.md": 1,
        "sway/ipc-server.c": 1,
        "swaybar/ipc.c": 1,
        "swaybar/status_line.c": 1,
        "swaygrab/json.c": 1,
        "swaylock/main.c": 1,
        "swaymsg/main.c": 1
    },
    "Work around maybe-uninitialized in bar.cFixes #1855.": {
        "swaybar/bar.c": 1
    },
    "[WIP] Add tabbed layoutThis adds tabbed windows to the layout. The `apply_tabbed_layout` function certainly could be utilized for the stacked layout like in 0.15, but that can be tackled later.": {
        "sway/commands/border.c": 1,
        "sway/commands/layout.c": 1,
        "sway/desktop/output.c": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1
    },
    "[WIP] Fix window geometry supportPlease try this and help me fix it.\r\n\r\nTest plan: open `gnome-terminal`. Open its Preferences menu (floating).\r\n\r\n```\r\n22:54 <emersion> ryan-au: ideas on how to handle widnow geometry?\r\n22:55 <emersion> i've been trying to implement it, but i failed\r\n22:56 <emersion> it's basically a box inside which is the window contents\r\n22:56 <emersion> so we want to crop everything outside it\r\n22:57 <emersion> we basically want to offset view->{x,y,width,height}\r\n22:57 <emersion> problem is, these are used when sending configures\r\n22:58 <emersion> and configures don't include these offsets\r\n22:59 <emersion> so i either get the window geometry right but rendering and input wrong\r\n22:59 <emersion> or the other way around\r\n```\r\n\r\nFixes #2178": {
        "include/sway/tree/view.h": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/tree/view.c": 1
    },
    "[WIP] Floating* [x] `floating enable`\r\n* [ ] `floating disable`\r\n* [x] render floating windows\r\n  * [ ] with respect to the global layout\r\n  * [x] send frame done to them\r\n* [ ] criteria\r\n* [ ] focus\r\n  * [ ] display correct border\r\n  * [ ] pointer events\r\n  * [ ] focus [left|right|up|down]\r\n* [ ] interactive move\r\n* [ ] interactive resize\r\n* [ ] resize command\r\n\r\nFixes #1910": {
        "/dev/null": 1,
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands.c": 1,
        "sway/debug-tree.c": 1,
        "sway/desktop/output.c": 1,
        "sway/ipc-json.c": 1,
        "sway/meson.build": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/workspace.c": 1
    },
    "[WIP] Make swaybg standalone and able to handle multiple outputs- [ ] Reload swaybg when an output command is executed\r\n- [ ] Figure out how to pass per-output scaling modes/colors\r\n\r\nFixes #2051": {
        "/dev/null": 1,
        "include/sway/config.h": 1,
        "include/sway/output.h": 1,
        "meson.build": 1,
        "sway/commands/reload.c": 1,
        "sway/config/bar.c": 1,
        "sway/config/output.c": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1,
        "swaybg/main.c": 1,
        "swaybg/meson.build": 1
    },
    "[WIP] Make the swaylock background only render onceFixes #1857": {
        "swaylock/render.c": 1
    },
    "[WIP] Swaybar tray2 electric boogalooPort tray to wlroots sway. Currently compiles and runs and displays tray\r\n\r\nTODO: (grep for `TODO TRAY`)\r\n- [ ] Click events\r\n- [ ] icon theme\r\n- [ ] remove globals\r\n- [ ] rerender on change\r\n- [ ] scaling (is this done on the base branch?)\r\n- [ ] Enable tray only on certain output\r\n  + Difficult to test right now as I only have one output\r\n- [ ] Commands\r\n  - [ ] `tray_padding`\r\n  - [ ] buttons\r\n  - [ ] `icon_theme`\r\n  - [ ] `tray_output`\r\n\r\nProbably not for this PR:\r\n- [ ] Xembed\r\n  + This is even more broken in wlr sway than in wlc sway\r\n- [ ] swaybar-rendered menus\r\n  + AFAIK not possible yet\r\n\r\n...I wonder if I should write something similar to DRM_DOC for the system tray": {
        "/dev/null": 1,
        "include/swaybar/bar.h": 1,
        "include/swaybar/config.h": 1,
        "include/swaybar/tray/dbus.h": 1,
        "include/swaybar/tray/icon.h": 1,
        "include/swaybar/tray/sni.h": 1,
        "include/swaybar/tray/tray.h": 1,
        "meson.build": 1,
        "meson_options.txt": 1,
        "swaybar/bar.c": 1,
        "swaybar/config.c": 1,
        "swaybar/event_loop.c": 1,
        "swaybar/i3bar.c": 1,
        "swaybar/ipc.c": 1,
        "swaybar/main.c": 1,
        "swaybar/meson.build": 1,
        "swaybar/render.c": 1,
        "swaybar/status_line.c": 1
    },
    "[WIP] gaps: fixes for edge cases & better alignment with i3-gaps syntaxMy previous PR (#2047) had a few bugs with edge cases. This PR is designed to fix those bugs, as well as provide more compatibility with the i3-gaps syntax (specifically the longest gaps command's syntax & semantics).": {
        "CONTRIBUTING.md": 1,
        "HACKING.md": 1,
        "common/background-image.c": 1,
        "common/ipc-client.c": 1,
        "common/list.c": 1,
        "common/log.c": 1,
        "common/pango.c": 1,
        "common/readline.c": 1,
        "common/unicode.c": 1,
        "common/util.c": 1,
        "completions/zsh/_swaymsg": 1,
        "include/ipc.h": 1,
        "include/list.h": 1,
        "include/log.h": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "include/sway/desktop.h": 1,
        "include/sway/desktop/idle_inhibit_v1.h": 1,
        "include/sway/ipc-server.h": 1,
        "include/sway/output.h": 1,
        "include/sway/server.h": 1,
        "include/sway/tree/container.h": 1,
        "include/swaylock/swaylock.h": 1,
        "sway/commands.c": 1,
        "sway/commands/assign.c": 1,
        "sway/commands/bar.c": 1,
        "sway/commands/bar/binding_mode_indicator.c": 1,
        "sway/commands/bar/font.c": 1,
        "sway/commands/bar/height.c": 1,
        "sway/commands/bar/hidden_state.c": 1,
        "sway/commands/bar/id.c": 1,
        "sway/commands/bar/mode.c": 1,
        "sway/commands/bar/modifier.c": 1,
        "sway/commands/bar/output.c": 1,
        "sway/commands/bar/pango_markup.c": 1,
        "sway/commands/bar/position.c": 1,
        "sway/commands/bar/separator_symbol.c": 1,
        "sway/commands/bar/status_command.c": 1,
        "sway/commands/bar/strip_workspace_numbers.c": 1,
        "sway/commands/bar/swaybar_command.c": 1,
        "sway/commands/bar/workspace_buttons.c": 1,
        "sway/commands/bar/wrap_scroll.c": 1,
        "sway/commands/bind.c": 1,
        "sway/commands/exec.c": 1,
        "sway/commands/exec_always.c": 1,
        "sway/commands/floating_minmax_size.c": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/for_window.c": 1,
        "sway/commands/gaps.c": 1,
        "sway/commands/input.c": 1,
        "sway/commands/input/accel_profile.c": 1,
        "sway/commands/input/click_method.c": 1,
        "sway/commands/input/drag_lock.c": 1,
        "sway/commands/input/dwt.c": 1,
        "sway/commands/input/events.c": 1,
        "sway/commands/input/left_handed.c": 1,
        "sway/commands/input/map_from_region.c": 1,
        "sway/commands/input/middle_emulation.c": 1,
        "sway/commands/input/natural_scroll.c": 1,
        "sway/commands/input/pointer_accel.c": 1,
        "sway/commands/input/repeat_delay.c": 1,
        "sway/commands/input/repeat_rate.c": 1,
        "sway/commands/input/scroll_method.c": 1,
        "sway/commands/input/tap.c": 1,
        "sway/commands/input/xkb_layout.c": 1,
        "sway/commands/input/xkb_model.c": 1,
        "sway/commands/input/xkb_options.c": 1,
        "sway/commands/input/xkb_rules.c": 1,
        "sway/commands/input/xkb_variant.c": 1,
        "sway/commands/mode.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/output.c": 1,
        "sway/commands/output/background.c": 1,
        "sway/commands/output/mode.c": 1,
        "sway/commands/output/position.c": 1,
        "sway/commands/reload.c": 1,
        "sway/commands/rename.c": 1,
        "sway/commands/resize.c": 1,
        "sway/commands/set.c": 1,
        "sway/commands/swaybg_command.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/config.c": 1,
        "sway/config/bar.c": 1,
        "sway/config/input.c": 1,
        "sway/config/output.c": 1,
        "sway/config/seat.c": 1,
        "sway/criteria.c": 1,
        "sway/desktop/desktop.c": 1,
        "sway/desktop/idle_inhibit_v1.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/render.c": 1,
        "sway/desktop/transaction.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1,
        "sway/sway-input.5.scd": 1,
        "sway/sway.5.scd": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/output.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1,
        "swaybar/bar.c": 1,
        "swaybar/i3bar.c": 1,
        "swaybar/ipc.c": 1,
        "swaybar/main.c": 1,
        "swaybar/render.c": 1,
        "swaybar/status_line.c": 1,
        "swaybg/main.c": 1,
        "swayidle/main.c": 1,
        "swaylock/main.c": 1,
        "swaylock/password.c": 1,
        "swaylock/render.c": 1,
        "swaylock/seat.c": 1,
        "swaylock/swaylock.1.scd": 1,
        "swaymsg/main.c": 1,
        "swaymsg/swaymsg.1.scd": 1
    },
    "[WIP] make xwayland optionalPlease note that I was running a previous version of these changes on a Raspberry Pi 3 without issues and have not been able to test this latest work because while sway compiles fine it won't start anymore, and I'd like advice with regards to these changes if you think they are the cause of breakage. I have spoken to emersion and he suggests I make a PR for further discussion.": {
        "include/sway/criteria.h": 1,
        "include/sway/server.h": 1,
        "include/sway/tree/layout.h": 1,
        "include/sway/tree/view.h": 1,
        "meson.build": 1,
        "meson_options.txt": 1,
        "sway/commands/swap.c": 1,
        "sway/criteria.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/seat.c": 1,
        "sway/server.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/view.c": 1
    },
    "[WIP] multibackendfixes #1529\r\n\r\nTests:\r\n\r\n* start sway with `-H, --headless` to start with a headless backend\r\n* add a headless output with `swaymsg backend headless add-output headless-2`\r\n* remove the headless outpu with `swaymsg backend headless del-output headless-2`\r\n\r\nThe rest is unimplemented because of wlr-backend limitation, but it's good enough to start the tests. The interface is pretty much stubbed out so it will be easy to add the functionality once it becomes available in wlr.": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/ipc-server.h": 1,
        "include/sway/server.h": 1,
        "sway/commands.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1,
        "sway/tree/container.c": 1
    },
    "[WIP] remove output pos <X,Y> syntaxDeprecate \"output <X,Y>\" in faviour or the legacy  \"output \\<X\\> \\<Y\\>\".\r\n\r\nFixes #1822": {
        "sway/commands/output.c": 1,
        "sway/sway.5.txt": 1
    },
    "[WIP] swaygrab: fix GCC warningGCC is so dumb": {
        "swaygrab/main.c": 1
    },
    "[swaylock] Install pam module": {
        "swaylock/meson.build": 1
    },
    "add headless backend optionAdd option `-H` for headless mode for tests.": {
        "include/sway/server.h": 1,
        "sway/main.c": 1,
        "sway/server.c": 1
    },
    "add xdg-shell protocol headerfixes build for xdg-positioner wlroots pr.": {
        "protocols/meson.build": 1
    },
    "basic get_treeJust enough of `get_tree` to help us debug.": {
        "include/sway/ipc-json.h": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1
    },
    "basic wl_shellPretty much the same features as xdg_shell currently. Gives us a basis for improvement.\r\n\r\nQT can be made to use wl_shell.\r\n\r\nWill post this diff for testing again to make that work in case you missed it:\r\n\r\n```diff\r\ndiff --git sway/server.c b/sway/server.c\r\nindex bf5c37e..e24b607 100644\r\n--- sway/server.c\r\n+++ b/sway/server.c\r\n@@ -36,10 +36,12 @@ bool server_init(struct sway_server *server) {\r\n \twl_signal_add(&server->backend->events.output_remove,\r\n \t\t\t&server->output_remove);\r\n \r\n+\t/*\r\n \tserver->xdg_shell_v6 = wlr_xdg_shell_v6_create(server->wl_display);\r\n \twl_signal_add(&server->xdg_shell_v6->events.new_surface,\r\n \t\t&server->xdg_shell_v6_surface);\r\n \tserver->xdg_shell_v6_surface.notify = handle_xdg_shell_v6_surface;\r\n+\t*/\r\n \r\n \tserver->wl_shell = wlr_wl_shell_create(server->wl_display);\r\n \twl_signal_add(&server->wl_shell->events.new_surface,\r\n```": {
        "/dev/null": 1,
        "include/sway/server.h": 1,
        "include/sway/view.h": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1
    },
    "bugfix: avoid access after freeif src is NULL due to a previous error we cannot use it in the command\r\nresult string.\r\n\r\nMoreover if `src` points to `p.we_wordv[0]` we cannot use it after\r\n`wordfree(&p)` in the command result string.\r\n\r\nBonus feature: If theere was an error accessing the file, the string\r\nrapresentation of the error is now included in the command result\r\nstring.": {
        "sway/commands/output/background.c": 1
    },
    "bugfix: avoid access after freeif src is NULL due to a previous error we cannot use it in the command\r\nresult string.\r\n\r\nMoreover if `src` points to `p.we_wordv[0]` we cannot use it after\r\n`wordfree(&p)` in the command result string.\r\n\r\nBonus feature: If there was an error accessing the file, the string\r\nrapresentation of the error is now included in the command result\r\nstring.": {
        "sway/commands/output/background.c": 1
    },
    "build: add wlroots dependency to commonIt is required for include path if wlroots is not built in standard path,\r\nbut found through pkg-config": {
        "common/meson.build": 1
    },
    "cmd_move_container: Focus a window on the source workspace.In Sway 0.15, moving a window to another workspace would cause a window on the source workspace to be focused. This restores that behavior, allowing you to quickly move a lot of windows to another workspace.": {
        "sway/commands/move.c": 1
    },
    "commands: add 'reload' commandThis is actually pretty straightforward, and doesn't seem to leak anything.\r\n\r\nI've tested:\r\n - key bindings: added/removed/changed, no problem seen\r\n - input config: changed some libinput config option without problem.\r\n\r\nNot sure how the other options work, I'm not using them.\r\n\r\nNote that when I open an urxvt before reloading, sometimes reloading will resize it, but I think this is working as intended as it's called arrange_windows(). I'm not sure why it doesn't happen everytime, but I'm not going to look at window placements right now as there is nothing done there (is there?)\r\nI've also had the choice of commenting out load_swaybars() in commands or adding a stub in config.c and decided to add a stub, happy to go the other way, but we'll probably want that function eventually.": {
        "/dev/null": 1,
        "include/sway/input/cursor.h": 1,
        "include/sway/input/input-manager.h": 1,
        "include/sway/input/seat.h": 1,
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/seat.c": 1,
        "sway/meson.build": 1
    },
    "config cleanup & implement free_configSome typos but it's mostly leak fixing, was waiting for bindings to land to push": {
        "sway/commands.c": 1,
        "sway/commands/input.c": 1,
        "sway/config.c": 1,
        "sway/main.c": 1
    },
    "config.c: fix current_config uninit warning (#2249)": {
        "sway/config.c": 1
    },
    "config: add 'set' command": {
        "/dev/null": 1,
        "include/sway/config.h": 1,
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/meson.build": 1
    },
    "desktop: use wlr-surface commit": {
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1
    },
    "dont focus-follow-mouse when keyboard grabCompare to i3 behavior:\r\n\r\nRight click something to open a popup and focus follows mouse is suspended.": {
        "sway/input/cursor.c": 1
    },
    "exec_always: fix leaks - child would leak in the workspace_record_pid path\r\n - removing malloc lets us get rid of That Comment nobody seems\r\nto remember what it was about\r\n - we would leak pipe fds on first fork failling\r\n - we didn't return an error if second fork failed\r\n - the final executed process still had both pipe fds\r\n(would show up in /proc/23560/fd in launched programs)\r\n - we would write twice to the pipe if execl failed for some reason\r\n(e.g. if /bin/sh doesn't exist?!)\r\n\r\nFWIW, this has a trivial conflict with the pid workspace stuff; happy to wait till the other one lands first but pointless sitting on the commit for such a small conflict.": {
        "sway/commands/exec_always.c": 1
    },
    "feature: scroll button option for input devicesHello!\r\n\r\nI missed in sway an option to set a scrolling button for my trackball Logitech M570, so I decided to implement it myself.\r\n\r\nThis patch adds support for `scroll_button` command in user's config file. Below is an example of my working config:\r\n```\r\ninput \"1133:4136:Logitech_M570\" {\r\n\tscroll_method on_button_down\r\n\tscroll_button 273\r\n}\r\n```\r\nIn result I can scroll with holding the right button instead of default middle button.\r\n\r\nThe scroll button identifier is the same as in `libinput debug-events`.\r\n\r\nI decided to set min and max value of button identifier to 0 and 1000, because I don't really know how the situation will be with other input devices. I am sure, that the minimum possible value must be set to 0, because libinput accepts it and disables the `on_button_down` scroll method. [(source)](https://wayland.freedesktop.org/libinput/doc/latest/group__config.html#gac95a25055b22c3631e3c10c0463ca332)\r\n": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "sway/commands/input.c": 1,
        "sway/config/input.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/meson.build": 1,
        "sway/sway-input.5.scd": 1
    },
    "fix crash on floating windowshttps://github.com/swaywm/sway/commit/15dc5286e280ddd06e845dc57115243e72f2339e crashes sway when opening floating windows. The reason for this is because ``current.children`` can have a length of 0 thus causing `sway_assert` and `list_del` to fail. Since I don't think there's any purpose in moving items around in a zero-length list, I just added a return condition to ``list_move_to_end``.": {
        "sway/input/seat.c": 1
    },
    "fix crash on fullscreen toggleCurrently, attempting to fullscreen while the window is inactive will crash Sway. This fixes that.": {
        "sway/tree/view.c": 1
    },
    "fix handling key modifiers if not pressed at firstfixes #2169 ": {
        "sway/input/keyboard.c": 1
    },
    "fix output resolution parsing errorIt should fixes #1822, but I'm not sure if it has any other side-effects.\r\nwithout fix\r\n[sway/sway/commands.c:331] Handling command 'output WL-1 pos 0'\r\nwith fix\r\n[sway/commands.c:331] Handling command 'output WL-1 pos 0,0 res 600x600'": {
        "sway/commands.c": 1
    },
    "fix remove_view_from_scratchpadFixes #1468 `Scratchpad show then floating toggle crashes sway.`\r\nCould not reproduce with original instructions,\r\nbut can reproduce with instructions provided by nickbatsaras\r\n\r\n1. Move a window to scratchpad\r\n2. Move another window to scratchpad\r\n3. Scratchpad show\r\n4. Floating toggle\r\n5. Scratchpad show\r\n6. Scratchpad show\r\n\r\nThe first sign of the issue starts at step 4.\r\nGiven a scratchpad with 2 windows (1,2), with window 1 being a visible container,\r\nturning off floating via `toggle floating` will call `remove_view_from_scratchpad`.\r\nthis function was incorrect and resulted in removing window 2,\r\nleaving window 1 in the scratchpad when it shouldnt be and losing window 2 permanently.\r\nthe segfault was later caused in update_visibility_output due to window 1 having a NULL parent and dereferencing it.\r\n\r\nthis fix correctly removes the right container from the scratchpad list,\r\nand  checks for null parent just in case,\r\nalso added printing out of scratchpad to layout_log\r\n\r\nthere might be something more to this that i missed, but for now it seems to work": {
        "sway/commands.c": 1,
        "sway/container.c": 1,
        "sway/debug_log.c": 1
    },
    "fix swaybar ipc handlingSwap return with break in IPC_EVENT_WORKSPACE case to free resp.\r\n\r\nChange default return value to true. This causes IPC_EVENT_MODE changes to be\r\nrendered instantly.": {
        "swaybar/ipc.c": 1
    },
    "fix swaymsg: errors are displayed againCommand errors weren't displayed, because the success function didn't accept objects": {
        "swaymsg/main.c": 1
    },
    "fix tabbed titlebar widthsusing tabs with gaps causes the title bar to hang over the container on the right side\r\n![sway_tabbed_gaps_issue](https://user-images.githubusercontent.com/6980201/42548493-25bb46b6-847c-11e8-93c9-c942efd1552e.png)\r\n\r\nthis fixes the title bar width under tabbed mode by factoring gaps into the calculation.": {
        "sway/desktop/render.c": 1
    },
    "fix typo": {
        "README.ru.md": 1
    },
    "focus overhaulChanges:\r\n\r\nNo new features added or bugs fixed, just refactoring changes.\r\n\r\n* Keep an up-to-date list of all the containers of the seat in focus order\r\n* Add `sway_seat_get_focus` to get the \"focus inactive\" of the container (returns true focus if the seat has focus and container is the root)\r\n* Add `sway_seat_container` to store seat-specific data about a container (here, the focus stack list link and destroy handler).\r\n\r\nFeatures:\r\n\r\n* [x] static bfs queue\r\n* [x] separate config/command command handlers\r\n\r\nTests:\r\n\r\n* [x] open several windows and close one and focus should revert to the last container you focused\r\n* [x] move focus with swaymsg/binding in the basic directions (left, right, up, down).\r\n* [x] move focus across outputs\r\n* [x] test on vertical layouts\r\n* [ ] bug: focused popups don't render on top when in the middle of the children list.\r\n\r\nHard problems:\r\n\r\n* [ ] are view coordinates in the output coordinate system or the layout coordinate system?\r\n* [ ] how do I iterate a list of containers in rendering order? (BFS, DFS, or something else?)\r\n* [ ] how do I iterate a list of containers in input order? (reverse of rendering order)\r\n* [ ] are there any use cases where the focus-inactive algorithm gives the wrong answer or is inefficient?\r\n\r\nTest config:\r\n\r\n```\r\nbindsym Alt+h focus left\r\nbindsym Alt+j focus down\r\nbindsym Alt+k focus up\r\nbindsym Alt+l focus right\r\n\r\nbindsym Alt+z layout splith\r\nbindsym Alt+x layout splitv\r\nbindsym Alt+c layout toggle split\r\n```\r\n\r\nFeedback on the approach is welcome.": {
        "/dev/null": 1,
        "include/log.h": 1,
        "include/sway/commands.h": 1,
        "include/sway/container.h": 1,
        "include/sway/input/input-manager.h": 1,
        "include/sway/input/seat.h": 1,
        "include/sway/layout.h": 1,
        "include/sway/output.h": 1,
        "include/sway/server.h": 1,
        "include/sway/workspace.h": 1,
        "meson.build": 1,
        "sway/commands.c": 1,
        "sway/commands/exit.c": 1,
        "sway/commands/kill.c": 1,
        "sway/commands/reload.c": 1,
        "sway/commands/set.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/workspace.c": 1
    },
    "input management and seatIt's probably going to look a lot like rootston. An input manager that manages device add/remove and passes them to seats.\r\n\r\n* [x] pointer device add/remove\r\n* [x] pointer motion\r\n* [x] pointer button/axis\r\n* [x] pointer config\r\n* [x] keyboard device add/remove\r\n* [x] keyboard key\r\n* [x] keyboard modifiers\r\n* [x] keyboard config\r\n* [x] sway seat\r\n* [x] sway cursor\r\n* [x] focus\r\n\r\nTests:\r\n\r\n* `weston-clickdot`\r\n* focus windows with left click\r\n* type into focused windows (with modifiers)\r\n* change keyboard layout at runtime: `swaymsg input 0:0:X11_keyboard xkb_layout de`.\r\n* hotplug devices\r\n* attach devices to seat at runtime: `swaymsg seat seat0 attach 0:0:X11_keyboard`\r\n\r\nFuture work:\r\n\r\n* input for popups and subsurfaces\r\n* detach devices\r\n* keycodes to keysym conversion\r\n* other device config (libinput, mappings)\r\n* touch, tablet tool, tablet pad": {
        "/dev/null": 1,
        "include/sway/commands.h": 1,
        "include/sway/config.h": 1,
        "include/sway/container.h": 1,
        "include/sway/ipc-json.h": 1,
        "include/sway/server.h": 1,
        "meson.build": 1,
        "sway/commands.c": 1,
        "sway/config.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/input.c": 1,
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1,
        "sway/sway-input.5.txt": 1,
        "sway/sway.1.txt": 1,
        "sway/sway.5.txt": 1,
        "sway/tree/container.c": 1,
        "swaymsg/main.c": 1
    },
    "invoke_swaybar: Set process group id~This reproduces 0.15's behavior. It indirectly fixes some issues where you can get multiple swaybars when reloading the config or having multiple displays. Using sh on Ubuntu (which is [dash](https://wiki.ubuntu.com/DashAsBinSh), not sh) caused terminate_swaybar() to kill sh, but sh's child swaybar was then owned by pid 1.~\r\n\r\nEdit: Changed to use setpgid(). This solves the multiple swaybars for me.": {
        "sway/config/bar.c": 1
    },
    "ipc layoutMake the containers have the \"layout\" in ipc json for tests.\r\n\r\n[layout tests](https://github.com/swaywm/sway-tests/blob/master/test/test_layout.py)\r\n\r\nWill also be added to move tests.\r\n\r\nAlso don't send container json if no listeners are subscribed to the event.\r\n\r\n": {
        "sway/ipc-json.c": 1,
        "sway/ipc-server.c": 1
    },
    "ipc show focused containerIndicate the focused container in the ipc tree with the \"focused\" member.": {
        "sway/ipc-json.c": 1
    },
    "ipc window and workspace eventsImplement window and workspace events for things that are implemented right now.\r\n\r\n* [x] window close": {
        "sway/tree/container.c": 1
    },
    "ipc-server: add display destroy listener`wl_event_source_remove()` is illegal after display has been destroyed\r\n\r\n```\r\n==20392==ERROR: AddressSanitizer: heap-use-after-free on address 0x607000001240 at pc 0x00000048e86e bp 0x7ffe4b557e00 sp 0x7ffe4b557df0\r\nREAD of size 8 at 0x607000001240 thread T0\r\n    #0 0x48e86d in wl_list_insert ../common/list.c:149\r\n    #1 0x7fdf673d4d7d in wl_event_source_remove src/event-loop.c:487\r\n    #2 0x41b742 in ipc_terminate ../sway/ipc-server.c:94\r\n    #3 0x40b1ad in main ../sway/main.c:440\r\n    #4 0x7fdf6664c18a in __libc_start_main ../csu/libc-start.c:308\r\n    #5 0x409359 in _start (/opt/wayland/bin/sway+0x409359)\r\n\r\n0x607000001240 is located 48 bytes inside of 72-byte region [0x607000001210,0x607000001258)\r\nfreed by thread T0 here:\r\n    #0 0x7fdf692c4880 in __interceptor_free (/lib64/libasan.so.5+0xee880)\r\n    #1 0x7fdf673d371a in wl_display_destroy src/wayland-server.c:1097\r\n\r\npreviously allocated by thread T0 here:\r\n    #0 0x7fdf692c4c48 in malloc (/lib64/libasan.so.5+0xeec48)\r\n    #1 0x7fdf673d4d9e in wl_event_loop_create src/event-loop.c:522\r\n    #2 0x40acb2 in main ../sway/main.c:363\r\n    #3 0x7fdf6664c18a in __libc_start_main ../csu/libc-start.c:308\r\n```\r\n\r\nAlternative fix would be to, like, just not call `wl_event_source_remove` as we're exiting sway anyway but might as well do this somewhat cleanly (static globals, meh)\r\n\r\nOpen question though: shall handle_display_destroy do more and we could just remove the `ipc_terminate` call in main?": {
        "include/sway/ipc-server.h": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1
    },
    "ipc: add output modesTest plan: `swaymsg -t get_outputs`": {
        "sway/ipc-json.c": 1,
        "swaymsg/main.c": 1
    },
    "json-c: add support for both 0.12.1 and 0.13json-c 0.13 is still *very* new (less than a month old) and even \"up to date\" distros like the latest fedora don't have it yet.\r\n\r\nGiven the difference is minor I'd like to support both for a short while until the distros slightly behind arch follow up with it ; I don't mind keeping this in my local branch (I test wlroots/sway both on arch and non-arch so I need something like this), but I figured this might be useful for others.\r\n\r\nI've tested this commit with both json-c 0.13 and 0.12.1": {
        "meson.build": 1,
        "swaymsg/main.c": 1
    },
    "layer shell: fix some use after free on destroyBoth commits revolve around the same idea that layer shells need to die and cleanup properly before sway's output.\r\n\r\nFirst one is a simple not cleaning up properly on handler being called, but second one is more subtle: both layer shell and sway's output listen to wlr's output destroy event, but there is no ordering guarantee here so I added a new event from sway's output to artificially order them.": {
        "include/sway/output.h": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1
    },
    "layer-shell: use usable_area when arranging non-exclusive layer surfaces~~And arrange them in the correct order.~~": {
        "sway/desktop/layer_shell.c": 1
    },
    "log env after ipc initSo it logs the current SWAYSOCK.": {
        "sway/main.c": 1
    },
    "meson build": {
        "/dev/null": 1,
        ".build.yml": 1,
        ".gitignore": 1,
        ".travis.yml": 1,
        "CMake/FindA2X.cmake": 1,
        "CMake/FindCairo.cmake": 1,
        "CMake/FindDBus.cmake": 1,
        "CMake/FindEpollShim.cmake": 1,
        "CMake/FindGdkPixbuf.cmake": 1,
        "CMake/FindJsonC.cmake": 1,
        "CMake/FindLibInput.cmake": 1,
        "CMake/FindLibcap.cmake": 1,
        "CMake/FindPAM.cmake": 1,
        "CMake/FindPCRE.cmake": 1,
        "CMake/FindPango.cmake": 1,
        "CMake/FindWLC.cmake": 1,
        "CMake/FindWayland.cmake": 1,
        "CMake/FindWlroots.cmake": 1,
        "CMake/FindXKBCommon.cmake": 1,
        "CMake/Manpage.cmake": 1,
        "CMake/Wayland.cmake": 1,
        "CMakeLists.txt": 1,
        "HACKING.md": 1,
        "README.de.md": 1,
        "README.el.md": 1,
        "README.fr.md": 1,
        "README.it.md": 1,
        "README.ja.md": 1,
        "README.md": 1,
        "README.pt.md": 1,
        "README.ru.md": 1,
        "README.uk.md": 1,
        "common/CMakeLists.txt": 1,
        "completions/zsh/CMakeLists.txt": 1,
        "config.in": 1,
        "protocols/CMakeLists.txt": 1,
        "security.d/00-defaults.in": 1,
        "sway/CMakeLists.txt": 1,
        "swaybar/CMakeLists.txt": 1,
        "swaybg/CMakeLists.txt": 1,
        "swaygrab/CMakeLists.txt": 1,
        "swaylock/CMakeLists.txt": 1,
        "swaymsg/CMakeLists.txt": 1,
        "wayland/CMakeLists.txt": 1
    },
    "meson wrap wlrootsEasy way to include wlroots dependency. Thanks @ascent12 .": {
        "/dev/null": 1,
        ".build.yml": 1,
        ".gitignore": 1,
        ".travis.yml": 1,
        "common/meson.build": 1,
        "meson.build": 1
    },
    "meson.build: Try looking for `pam` when `libpam` isn't found.On my system, libpam is called `libpam.so`, which would need the compiler flag `-lpam`. This change keeps the old lookup, but adds a fallback to `cc.find_library('pam')`, which makes it work for me.": {
        "meson.build": 1
    },
    "meson: allow wlroots to be a subprojectUsage: make `subprojects/wlroots` a symbolic link to wlroots.\r\n\r\nThis allows to edit and build sway and wlroots at the same time. This can be useful for features like multibackend.": {
        ".gitignore": 1,
        "meson.build": 1
    },
    "output bg command: fix memleak and refactoringI'm here again with background command stuff.\r\n\r\nI've fixed a memleak, a double free error and made some refactoring.": {
        "sway/commands/output/background.c": 1
    },
    "partial fix #1056this patch allow the user to type its password when a modal window is shown\r\nwhile the desktop is locked by swaylock.\r\nIt is a partial fix of the bug since the window should not be visible (see bug\r\nhttps://github.com/swaywm/sway/issues/1056 for details).": {
        "sway/handlers.c": 1
    },
    "properly close container containersDon't destroy the containers, close all the views instead.": {
        "include/sway/tree/container.h": 1,
        "include/sway/tree/layout.h": 1,
        "include/sway/tree/workspace.h": 1,
        "sway/commands/kill.c": 1,
        "sway/commands/layout.c": 1,
        "sway/commands/move.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/config/output.c": 1,
        "sway/desktop/output.c": 1,
        "sway/input/seat.c": 1,
        "sway/meson.build": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/output.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1
    },
    "protocols: remove xdg-shell XML file": {
        "protocols/desktop-shell.xml": 1,
        "protocols/gamma-control.xml": 1,
        "protocols/server-decoration.xml": 1,
        "protocols/swaylock.xml": 1,
        "protocols/xdg-shell.xml": 1
    },
    "refactor: use frame done": {
        "sway/desktop/output.c": 1
    },
    "remove empty workspace when focusing its outputUntil now, focus changing code only considered cleaning up the last focused\r\nworkspace. This commit adds removal of empty workspace from output that just\r\nreceived focus on a different workspace.\r\n\r\nFixes: #1797": {
        "sway/input/seat.c": 1
    },
    "remove nvidia support claim": {
        "sway/main.c": 1
    },
    "remove unused timepsec funcShould fix travis. I think we used this before to send surface callbacks.": {
        "sway/desktop/output.c": 1
    },
    "save errno to avoid issues with it being overwritten in sway_log_errnowas fiddling around with the logging to make it a bit more convenient to debug\r\nand noticed a small mistake with `sway_log_errno`, as `errno` can get overwritten before we use it.\r\n\r\nits been a while since i contributed, but i assume 0.15 is where development is going for now": {
        "common/log.c": 1
    },
    "set mode on outputMakes it work with drm. Future work will involve getting the configured mode and setting that.": {
        "sway/desktop/output.c": 1
    },
    "slim client dependenciesThis removes the wlroots dependency for clients.\r\nThe clients used wlr_log, to get rid of the dependency, the relevant\r\nmacros and functions are copied over and renamed to sway_log.\r\nThis also \"fixes\" that wlr_strip_path strips the wlr source path,\r\nsway_strip_path will strip the sway source directroy.\r\nIt also makes the ipc an explicit dependency, not part of sway_common,\r\nto allow building clients that don't require IPC without jsonc.": {
        "/dev/null": 1,
        "common/background-image.c": 1,
        "common/ipc-client.c": 1,
        "common/log.c": 1,
        "common/meson.build": 1,
        "common/pango.c": 1,
        "common/readline.c": 1,
        "common/util.c": 1,
        "include/log.h": 1,
        "include/sway/input/keyboard.h": 1,
        "include/util.h": 1,
        "meson.build": 1,
        "sway/commands.c": 1,
        "sway/commands/assign.c": 1,
        "sway/commands/bar.c": 1,
        "sway/commands/bar/binding_mode_indicator.c": 1,
        "sway/commands/bar/font.c": 1,
        "sway/commands/bar/height.c": 1,
        "sway/commands/bar/hidden_state.c": 1,
        "sway/commands/bar/id.c": 1,
        "sway/commands/bar/mode.c": 1,
        "sway/commands/bar/modifier.c": 1,
        "sway/commands/bar/output.c": 1,
        "sway/commands/bar/pango_markup.c": 1,
        "sway/commands/bar/position.c": 1,
        "sway/commands/bar/separator_symbol.c": 1,
        "sway/commands/bar/status_command.c": 1,
        "sway/commands/bar/strip_workspace_numbers.c": 1,
        "sway/commands/bar/swaybar_command.c": 1,
        "sway/commands/bar/workspace_buttons.c": 1,
        "sway/commands/bar/wrap_scroll.c": 1,
        "sway/commands/bind.c": 1,
        "sway/commands/exec.c": 1,
        "sway/commands/exec_always.c": 1,
        "sway/commands/focus.c": 1,
        "sway/commands/for_window.c": 1,
        "sway/commands/input.c": 1,
        "sway/commands/input/events.c": 1,
        "sway/commands/input/tap.c": 1,
        "sway/commands/input/xkb_layout.c": 1,
        "sway/commands/input/xkb_model.c": 1,
        "sway/commands/input/xkb_options.c": 1,
        "sway/commands/input/xkb_rules.c": 1,
        "sway/commands/input/xkb_variant.c": 1,
        "sway/commands/kill.c": 1,
        "sway/commands/mode.c": 1,
        "sway/commands/output.c": 1,
        "sway/commands/rename.c": 1,
        "sway/commands/resize.c": 1,
        "sway/commands/seat.c": 1,
        "sway/commands/set.c": 1,
        "sway/commands/swaybg_command.c": 1,
        "sway/commands/workspace.c": 1,
        "sway/config.c": 1,
        "sway/config/bar.c": 1,
        "sway/config/input.c": 1,
        "sway/config/output.c": 1,
        "sway/config/seat.c": 1,
        "sway/criteria.c": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/input/cursor.c": 1,
        "sway/input/input-manager.c": 1,
        "sway/input/keyboard.c": 1,
        "sway/input/seat.c": 1,
        "sway/ipc-server.c": 1,
        "sway/main.c": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1,
        "sway/tree/arrange.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1,
        "sway/tree/output.c": 1,
        "sway/tree/view.c": 1,
        "sway/tree/workspace.c": 1,
        "swaybar/bar.c": 1,
        "swaybar/i3bar.c": 1,
        "swaybar/ipc.c": 1,
        "swaybar/main.c": 1,
        "swaybar/meson.build": 1,
        "swaybar/status_line.c": 1,
        "swaybg/main.c": 1,
        "swayidle/main.c": 1,
        "swaylock/main.c": 1,
        "swaylock/password.c": 1,
        "swaylock/seat.c": 1,
        "swaymsg/main.c": 1,
        "swaymsg/meson.build": 1
    },
    "startup: move setenv WAYLAND_DISPLAY before config execsWe would previously run all config commands without the environment,\r\nwhich would appear to work as our socket name is the default one, but\r\nwayland clients would start up in the wrong sway session.\r\n\r\n(This explains why 'sometimes' my swayidle processes wouldn't die with\r\nsway, as they weren't listening to the correct socket)": {
        "sway/main.c": 1,
        "sway/server.c": 1
    },
    "sway main: init old log system until end of switch to wlr_logWe need to keep the old log init if we do not want all current calls to sway_log to be silent\r\n\r\nThe function declaration next to log headers is fugly but I don't have a better idea for something quick, I guess I can try to fix sway's log.h to be compatible if we care but it'd probaby be just as fast to finish converting all sway_logs to wlr_logs...": {
        "sway/main.c": 1
    },
    "sway views: add helpers to get view and layer from wlr_surfaceAs discussed on IRC a few days ago with @emersion, get the appropriate wlr shell type depending on the surface type with wlr_surface_is_x then get the view through that `->data` field.\r\n\r\nThis is a prerequisite for idle inhibit to properly toggle itself on/off depending on surface visibility as the inhibitor only has a wlr_surface to deal with - I have an implementation that uses this and it appears to work but some of the rest depends on atomic transactions (e.g. when to check if view is still visible) so that'll hold off until atomic stuff is merged... But I wanted to get feedbacks on this first anyway.": {
        "include/sway/layers.h": 1,
        "include/sway/tree/view.h": 1,
        "sway/desktop/layer_shell.c": 1,
        "sway/desktop/output.c": 1,
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/tree/view.c": 1
    },
    "sway/config: fix use-after-free for end of blockIntroduced in 7c810dc344c28d1876c5ee158cb0806289d0f813": {
        "sway/config.c": 1
    },
    "sway/criteria: gcc string truncation warning fixgcc complains about 0-length strncpy... it's fine anyway because calloc": {
        "sway/criteria.c": 1
    },
    "sway: run commands without waiting for XwaylandXwayland is lazy now, there is no need to wait at all\r\n\r\nTest plan: Try to add stuff to your .sway/config as 'exec' statements to run at startup, see nothing fails unexpectedly because we didn't wait enough.\r\n(works for me: X11 app (urxvt), swayidle, swaylock)": {
        "include/sway/server.h": 1,
        "sway/main.c": 1,
        "sway/server.c": 1
    },
    "swaybar/bg: Fix crash on DPMS offWhen turning off displays via DPMS, swaybar and swaybg still tried to\r\nrender, but did not get a valid buffer, causing them to crash.\r\n\r\nNot sure if that's a proper fix for the problem, but it does work": {
        "swaybar/render.c": 1,
        "swaybg/main.c": 1
    },
    "swaybar: correctly render min_width for stringsfixes #1635": {
        "include/swaybar/status_line.h": 1,
        "swaybar/render.c": 1,
        "swaybar/status_line.c": 1
    },
    "swaybg: add HiDPI supportSeems to work fine on Sway's side": {
        "swaybg/main.c": 1
    },
    "swaybg: remove assertions with side-effects": {
        "swaybg/main.c": 1
    },
    "swaybg: set an empty input region": {
        "swaybg/main.c": 1
    },
    "swayidle: cleanupNo idea why wlr_output_layout was involved here.": {
        "swayidle/main.c": 1
    },
    "swayidle: fix stack overflow on sleep": {
        "swayidle/main.c": 1
    },
    "swayidle: terminate when server diedFixes #1977.": {
        "swayidle/main.c": 1
    },
    "swaylock: Securely zero-out password.- Replace char* with static array. Any chars > 1024 will be discarded.\r\n- mlock() password buffer so it can't be written to swap.\r\n- Clear password buffer after auth succeeds or fails.\r\n\r\nThis is basically the same treatment I gave the 0.15 branch in https://github.com/swaywm/sway/pull/1519": {
        "include/swaylock/swaylock.h": 1,
        "swaylock/main.c": 1,
        "swaylock/password.c": 1
    },
    "swaylock: daemonize after lockingWill be useful for #2215.": {
        "include/swaylock/swaylock.h": 1,
        "swaylock/main.c": 1,
        "swaylock/swaylock.1.scd": 1
    },
    "swaylock: fix the displaying of \"verified\"Displaying verified after damaging state needs more than one roundtrip,\r\nso keep looping until surfaces are not dirty anymore\r\n\r\nI had this commit laying around for testing since we talked about it in #2112,\r\nmight as well use that since the author closed the original PR.\r\n(I don't remember why the flush is needed after the loop, but I said it's needed so it probably was...)": {
        "swaylock/password.c": 1
    },
    "swaylock: implement ^U to clear bufferThe whole state->xcb.modifiers thing didn't work at all (always 0)\r\n\r\nThe xkb doc says \"[xkb_state_serialize_mods] should not be used in\r\nregular clients; please use the xkb_state_mod_*_is_active API instead\"\r\nso here it is\r\n\r\nThe final result is still rather messy so happy to get rebuked, please give me a better idea to do it though.": {
        "include/swaylock/seat.h": 1,
        "swaylock/password.c": 1,
        "swaylock/seat.c": 1
    },
    "swaylock: implement a proper render loopThis is an attempt to fix #2031. I cannot reproduce this issue, so please test.\r\n\r\nIf I typed too fast, I experienced tearing. This PR fixes it by implementing a proper render loop.": {
        "include/swaylock/swaylock.h": 1,
        "swaylock/main.c": 1,
        "swaylock/password.c": 1,
        "swaylock/render.c": 1
    },
    "swaymsg: Fix exit codeWhen executing commands via IPC, sway returns the result in a JSON array. swaymsg expected the result to be in the root of the JSON object, wouldn't find the `success` boolean, and would always return the fallback which is `true`.\r\n\r\nThis changes swaymsg to look in the array rather than the root, and return false if any of the commands failed.\r\n\r\nNote that sway only ever returns an array of one item (the last executed command), but that's out of scope of this PR.\r\n\r\nTo test, run `swaymsg lol; echo $?`": {
        "swaymsg/main.c": 1
    },
    "swaymsg: Fix spelling in error message": {
        "swaymsg/main.c": 1
    },
    "try to fix focus-inactiveFocus-inactive is broken.\r\n\r\n[test plan](https://github.com/swaywm/sway-tests/blob/master/test/test_split.py)": {
        "sway/input/seat.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1
    },
    "update for new wlr-keyboard modifiersUpdate for [wlroots 553](https://github.com/swaywm/wlroots/pull/553).": {
        "sway/input/keyboard.c": 1,
        "sway/input/seat.c": 1
    },
    "update json-c dep to 0.13Array lengths are size_t now, but otherwise everything works fine.": {
        "meson.build": 1,
        "swaymsg/main.c": 1
    },
    "use \"size\" instead of \"dimensions\"": {
        "include/sway/view.h": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/sway.5.txt": 1,
        "sway/tree/layout.c": 1
    },
    "use app_id instead of classThe app_id and class are essentially the same thing and should be treated the same. Pick one name and stick with it.": {
        "include/sway/view.h": 1
    },
    "view activate": {
        "include/sway/view.h": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1
    },
    "view set position": {
        "include/sway/view.h": 1,
        "sway/desktop/wl_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1,
        "sway/desktop/xwayland.c": 1,
        "sway/tree/container.c": 1,
        "sway/tree/layout.c": 1
    },
    "xdg-shell: make all toplevels tiledDepends on https://github.com/swaywm/wlroots/pull/1007\r\nFixes #1988": {
        "sway/desktop/xdg_shell.c": 1
    },
    "xdg_shell: listen to fullscreen request on mapThat event comes from the toplevel and not the surface, so would cause\r\na use-after-free on destroy if the toplevel got destroyed first:\r\n\r\n```\r\n==5454==ERROR: AddressSanitizer: heap-use-after-free on address 0x6110001ed198 at pc 0x000000472d10 bp 0x7ffc19070a80 sp 0x7ffc19070a70\r\nWRITE of size 8 at 0x6110001ed198 thread T0\r\n    #0 0x472d0f in wl_list_remove ../common/list.c:157\r\n    #1 0x42e159 in handle_destroy ../sway/desktop/xdg_shell_v6.c:243\r\n    #2 0x7fa9e5b28ce8 in wlr_signal_emit_safe ../util/signal.c:29\r\n    #3 0x7fa9e5afd6b1 in destroy_xdg_surface_v6 ../types/xdg_shell_v6/wlr_xdg_surface_v6.c:101\r\n    #4 0x7fa9e5d98025 in destroy_resource src/wayland-server.c:688\r\n    #5 0x7fa9e5d98091 in wl_resource_destroy src/wayland-server.c:705\r\n    #6 0x7fa9e27f103d in ffi_call_unix64 (/lib64/libffi.so.6+0x603d)\r\n    #7 0x7fa9e27f09fe in ffi_call (/lib64/libffi.so.6+0x59fe)\r\n    #8 0x7fa9e5d9bf2c  (/lib64/libwayland-server.so.0+0xbf2c)\r\n    #9 0x7fa9e5d983de in wl_client_connection_data src/wayland-server.c:420\r\n    #10 0x7fa9e5d99f01 in wl_event_loop_dispatch src/event-loop.c:641\r\n    #11 0x7fa9e5d98601 in wl_display_run src/wayland-server.c:1260\r\n    #12 0x40a2f4 in main ../sway/main.c:433\r\n    #13 0x7fa9e527318a in __libc_start_main ../csu/libc-start.c:308\r\n    #14 0x40b749 in _start (/opt/wayland/bin/sway+0x40b749)\r\n\r\n0x6110001ed198 is located 152 bytes inside of 240-byte region [0x6110001ed100,0x6110001ed1f0)\r\nfreed by thread T0 here:\r\n    #0 0x7fa9e7c89880 in __interceptor_free (/lib64/libasan.so.5+0xee880)\r\n    #1 0x7fa9e5affce9 in destroy_xdg_toplevel_v6 ../types/xdg_shell_v6/wlr_xdg_toplevel_v6.c:23\r\n    #2 0x7fa9e5d98025 in destroy_resource src/wayland-server.c:688\r\n\r\npreviously allocated by thread T0 here:\r\n    #0 0x7fa9e7c89e50 in calloc (/lib64/libasan.so.5+0xeee50)\r\n    #1 0x7fa9e5b00eea in create_xdg_toplevel_v6 ../types/xdg_shell_v6/wlr_xdg_toplevel_v6.c:427\r\n    #2 0x7fa9e27f103d in ffi_call_unix64 (/lib64/libffi.so.6+0x603d)\r\n```\r\n\r\nThe toplevel only notifies the compositor on destroy if it was mapped,\r\nso only listen to events at map time.\r\n\r\n\r\nI commited that ages ago and was waiting for transactions to be merged (small conflict as I moved the function around), can't recall what client reproduces that :/ since it says toplevel_v6 on the stack probably something with konsole on quit... As it's in wl_list_remove you need valgrind to see that (or a hack like me for ASAN)": {
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1
    },
    "xdg_shell: make view floating if a parent has been setPrompts e.g. authentication request from firefox-wayland ought to be\r\nfloating.\r\n\r\nThis is a bit coarse but just fixed size is not enough, here is what\r\nfirefox does:\r\n\r\n```\r\n[1285461.363]  -> xdg_wm_base@18.get_xdg_surface(new id xdg_surface@68, wl_surface@71)\r\n[1285461.508]  -> xdg_surface@68.get_toplevel(new id xdg_toplevel@67)\r\n[1285461.571]  -> xdg_toplevel@67.set_parent(xdg_toplevel@37)\r\n[1285461.630]  -> xdg_toplevel@67.set_title(\"Authentication Required\")\r\n[1285461.736]  -> xdg_toplevel@67.set_app_id(\"firefox\")\r\n...\r\n[1285476.549] xdg_toplevel@67.configure(0, 0, array)\r\n...\r\n[1285502.080]  -> xdg_toplevel@67.set_min_size(299, 187)\r\n[1285502.140]  -> xdg_toplevel@67.set_max_size(1920, 32767)\r\n```\r\n\r\nThis can also be observed with e.g. the open window of gedit\r\n(gedit->open->other documents)": {
        "sway/desktop/xdg_shell.c": 1,
        "sway/desktop/xdg_shell_v6.c": 1
    },
    "xwayland shellBasic xwayland shell with the same features as the others.": {
        "/dev/null": 1,
        "include/sway/server.h": 1,
        "include/sway/view.h": 1,
        "sway/meson.build": 1,
        "sway/server.c": 1
    },
    "xwayland: do not send surface configure when no width/heightThe code in `apply_horiz_layout` systematically does `set_position`\r\nthen `set_size`, so for new windows there is an invalid call.\r\n\r\nFor old windows there are two calls when only one is needed,\r\nwith the current code set_position could not send any surface\r\nconfigure without impact, but in the future it might be needed?\r\nNative wayland surfaces do not need to know where they are (the\r\nset_position handled only updates the sway internal view variable),\r\nwhy does X11 window need that?": {
        "sway/desktop/xwayland.c": 1
    }
}
